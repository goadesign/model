// Code generated by goa v3.13.2, DO NOT EDIT.
//
// DSLEditor HTTP server
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package server

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	dsleditor "goa.design/model/mdlsvc/gen/dsl_editor"
)

// Server lists the DSLEditor service endpoint HTTP handlers.
type Server struct {
	Mounts             []*MountPoint
	UpdateDSL          http.Handler
	UpsertSystem       http.Handler
	UpsertPerson       http.Handler
	UpsertContainer    http.Handler
	UpsertComponent    http.Handler
	UpsertRelationship http.Handler
	DeleteSystem       http.Handler
	DeletePerson       http.Handler
	DeleteContainer    http.Handler
	DeleteComponent    http.Handler
	DeleteRelationship http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the DSLEditor service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *dsleditor.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"UpdateDSL", "POST", "/api/dsl"},
			{"UpsertSystem", "PUT", "/api/dsl/system"},
			{"UpsertPerson", "PUT", "/api/dsl/person"},
			{"UpsertContainer", "PUT", "/api/dsl/container"},
			{"UpsertComponent", "PUT", "/api/dsl/component"},
			{"UpsertRelationship", "PUT", "/api/dsl/relationship"},
			{"DeleteSystem", "DELETE", "/api/dsl/system/{SystemName}"},
			{"DeletePerson", "DELETE", "/api/dsl/person/{PersonName}"},
			{"DeleteContainer", "DELETE", "/api/dsl/system/{SystemName}/container/{ContainerName}"},
			{"DeleteComponent", "DELETE", "/api/dsl/system/{SystemName}/container/{ContainerName}/component/{ComponentName}"},
			{"DeleteRelationship", "DELETE", "/api/dsl/relationship"},
		},
		UpdateDSL:          NewUpdateDSLHandler(e.UpdateDSL, mux, decoder, encoder, errhandler, formatter),
		UpsertSystem:       NewUpsertSystemHandler(e.UpsertSystem, mux, decoder, encoder, errhandler, formatter),
		UpsertPerson:       NewUpsertPersonHandler(e.UpsertPerson, mux, decoder, encoder, errhandler, formatter),
		UpsertContainer:    NewUpsertContainerHandler(e.UpsertContainer, mux, decoder, encoder, errhandler, formatter),
		UpsertComponent:    NewUpsertComponentHandler(e.UpsertComponent, mux, decoder, encoder, errhandler, formatter),
		UpsertRelationship: NewUpsertRelationshipHandler(e.UpsertRelationship, mux, decoder, encoder, errhandler, formatter),
		DeleteSystem:       NewDeleteSystemHandler(e.DeleteSystem, mux, decoder, encoder, errhandler, formatter),
		DeletePerson:       NewDeletePersonHandler(e.DeletePerson, mux, decoder, encoder, errhandler, formatter),
		DeleteContainer:    NewDeleteContainerHandler(e.DeleteContainer, mux, decoder, encoder, errhandler, formatter),
		DeleteComponent:    NewDeleteComponentHandler(e.DeleteComponent, mux, decoder, encoder, errhandler, formatter),
		DeleteRelationship: NewDeleteRelationshipHandler(e.DeleteRelationship, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "DSLEditor" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.UpdateDSL = m(s.UpdateDSL)
	s.UpsertSystem = m(s.UpsertSystem)
	s.UpsertPerson = m(s.UpsertPerson)
	s.UpsertContainer = m(s.UpsertContainer)
	s.UpsertComponent = m(s.UpsertComponent)
	s.UpsertRelationship = m(s.UpsertRelationship)
	s.DeleteSystem = m(s.DeleteSystem)
	s.DeletePerson = m(s.DeletePerson)
	s.DeleteContainer = m(s.DeleteContainer)
	s.DeleteComponent = m(s.DeleteComponent)
	s.DeleteRelationship = m(s.DeleteRelationship)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return dsleditor.MethodNames[:] }

// Mount configures the mux to serve the DSLEditor endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountUpdateDSLHandler(mux, h.UpdateDSL)
	MountUpsertSystemHandler(mux, h.UpsertSystem)
	MountUpsertPersonHandler(mux, h.UpsertPerson)
	MountUpsertContainerHandler(mux, h.UpsertContainer)
	MountUpsertComponentHandler(mux, h.UpsertComponent)
	MountUpsertRelationshipHandler(mux, h.UpsertRelationship)
	MountDeleteSystemHandler(mux, h.DeleteSystem)
	MountDeletePersonHandler(mux, h.DeletePerson)
	MountDeleteContainerHandler(mux, h.DeleteContainer)
	MountDeleteComponentHandler(mux, h.DeleteComponent)
	MountDeleteRelationshipHandler(mux, h.DeleteRelationship)
}

// Mount configures the mux to serve the DSLEditor endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountUpdateDSLHandler configures the mux to serve the "DSLEditor" service
// "UpdateDSL" endpoint.
func MountUpdateDSLHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/dsl", f)
}

// NewUpdateDSLHandler creates a HTTP handler which loads the HTTP request and
// calls the "DSLEditor" service "UpdateDSL" endpoint.
func NewUpdateDSLHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateDSLRequest(mux, decoder)
		encodeResponse = EncodeUpdateDSLResponse(encoder)
		encodeError    = EncodeUpdateDSLError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpdateDSL")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpsertSystemHandler configures the mux to serve the "DSLEditor" service
// "UpsertSystem" endpoint.
func MountUpsertSystemHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/dsl/system", f)
}

// NewUpsertSystemHandler creates a HTTP handler which loads the HTTP request
// and calls the "DSLEditor" service "UpsertSystem" endpoint.
func NewUpsertSystemHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpsertSystemRequest(mux, decoder)
		encodeResponse = EncodeUpsertSystemResponse(encoder)
		encodeError    = EncodeUpsertSystemError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpsertSystem")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpsertPersonHandler configures the mux to serve the "DSLEditor" service
// "UpsertPerson" endpoint.
func MountUpsertPersonHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/dsl/person", f)
}

// NewUpsertPersonHandler creates a HTTP handler which loads the HTTP request
// and calls the "DSLEditor" service "UpsertPerson" endpoint.
func NewUpsertPersonHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpsertPersonRequest(mux, decoder)
		encodeResponse = EncodeUpsertPersonResponse(encoder)
		encodeError    = EncodeUpsertPersonError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpsertPerson")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpsertContainerHandler configures the mux to serve the "DSLEditor"
// service "UpsertContainer" endpoint.
func MountUpsertContainerHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/dsl/container", f)
}

// NewUpsertContainerHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "UpsertContainer" endpoint.
func NewUpsertContainerHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpsertContainerRequest(mux, decoder)
		encodeResponse = EncodeUpsertContainerResponse(encoder)
		encodeError    = EncodeUpsertContainerError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpsertContainer")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpsertComponentHandler configures the mux to serve the "DSLEditor"
// service "UpsertComponent" endpoint.
func MountUpsertComponentHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/dsl/component", f)
}

// NewUpsertComponentHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "UpsertComponent" endpoint.
func NewUpsertComponentHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpsertComponentRequest(mux, decoder)
		encodeResponse = EncodeUpsertComponentResponse(encoder)
		encodeError    = EncodeUpsertComponentError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpsertComponent")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpsertRelationshipHandler configures the mux to serve the "DSLEditor"
// service "UpsertRelationship" endpoint.
func MountUpsertRelationshipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/dsl/relationship", f)
}

// NewUpsertRelationshipHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "UpsertRelationship" endpoint.
func NewUpsertRelationshipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpsertRelationshipRequest(mux, decoder)
		encodeResponse = EncodeUpsertRelationshipResponse(encoder)
		encodeError    = EncodeUpsertRelationshipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpsertRelationship")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteSystemHandler configures the mux to serve the "DSLEditor" service
// "DeleteSystem" endpoint.
func MountDeleteSystemHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/dsl/system/{SystemName}", f)
}

// NewDeleteSystemHandler creates a HTTP handler which loads the HTTP request
// and calls the "DSLEditor" service "DeleteSystem" endpoint.
func NewDeleteSystemHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteSystemRequest(mux, decoder)
		encodeResponse = EncodeDeleteSystemResponse(encoder)
		encodeError    = EncodeDeleteSystemError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteSystem")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeletePersonHandler configures the mux to serve the "DSLEditor" service
// "DeletePerson" endpoint.
func MountDeletePersonHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/dsl/person/{PersonName}", f)
}

// NewDeletePersonHandler creates a HTTP handler which loads the HTTP request
// and calls the "DSLEditor" service "DeletePerson" endpoint.
func NewDeletePersonHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeletePersonRequest(mux, decoder)
		encodeResponse = EncodeDeletePersonResponse(encoder)
		encodeError    = EncodeDeletePersonError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeletePerson")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteContainerHandler configures the mux to serve the "DSLEditor"
// service "DeleteContainer" endpoint.
func MountDeleteContainerHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/dsl/system/{SystemName}/container/{ContainerName}", f)
}

// NewDeleteContainerHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "DeleteContainer" endpoint.
func NewDeleteContainerHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteContainerRequest(mux, decoder)
		encodeResponse = EncodeDeleteContainerResponse(encoder)
		encodeError    = EncodeDeleteContainerError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteContainer")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteComponentHandler configures the mux to serve the "DSLEditor"
// service "DeleteComponent" endpoint.
func MountDeleteComponentHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/dsl/system/{SystemName}/container/{ContainerName}/component/{ComponentName}", f)
}

// NewDeleteComponentHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "DeleteComponent" endpoint.
func NewDeleteComponentHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteComponentRequest(mux, decoder)
		encodeResponse = EncodeDeleteComponentResponse(encoder)
		encodeError    = EncodeDeleteComponentError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteComponent")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteRelationshipHandler configures the mux to serve the "DSLEditor"
// service "DeleteRelationship" endpoint.
func MountDeleteRelationshipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/dsl/relationship", f)
}

// NewDeleteRelationshipHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "DeleteRelationship" endpoint.
func NewDeleteRelationshipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteRelationshipRequest(mux, decoder)
		encodeResponse = EncodeDeleteRelationshipResponse(encoder)
		encodeError    = EncodeDeleteRelationshipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteRelationship")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
