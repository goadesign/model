// Code generated by goa v3.13.2, DO NOT EDIT.
//
// DSLEditor client HTTP transport
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the DSLEditor service endpoint HTTP clients.
type Client struct {
	// UpsertSystem Doer is the HTTP client used to make requests to the
	// UpsertSystem endpoint.
	UpsertSystemDoer goahttp.Doer

	// UpsertPerson Doer is the HTTP client used to make requests to the
	// UpsertPerson endpoint.
	UpsertPersonDoer goahttp.Doer

	// UpsertContainer Doer is the HTTP client used to make requests to the
	// UpsertContainer endpoint.
	UpsertContainerDoer goahttp.Doer

	// UpsertComponent Doer is the HTTP client used to make requests to the
	// UpsertComponent endpoint.
	UpsertComponentDoer goahttp.Doer

	// UpsertRelationship Doer is the HTTP client used to make requests to the
	// UpsertRelationship endpoint.
	UpsertRelationshipDoer goahttp.Doer

	// DeleteSystem Doer is the HTTP client used to make requests to the
	// DeleteSystem endpoint.
	DeleteSystemDoer goahttp.Doer

	// DeletePerson Doer is the HTTP client used to make requests to the
	// DeletePerson endpoint.
	DeletePersonDoer goahttp.Doer

	// DeleteContainer Doer is the HTTP client used to make requests to the
	// DeleteContainer endpoint.
	DeleteContainerDoer goahttp.Doer

	// DeleteComponent Doer is the HTTP client used to make requests to the
	// DeleteComponent endpoint.
	DeleteComponentDoer goahttp.Doer

	// DeleteRelationship Doer is the HTTP client used to make requests to the
	// DeleteRelationship endpoint.
	DeleteRelationshipDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the DSLEditor service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		UpsertSystemDoer:       doer,
		UpsertPersonDoer:       doer,
		UpsertContainerDoer:    doer,
		UpsertComponentDoer:    doer,
		UpsertRelationshipDoer: doer,
		DeleteSystemDoer:       doer,
		DeletePersonDoer:       doer,
		DeleteContainerDoer:    doer,
		DeleteComponentDoer:    doer,
		DeleteRelationshipDoer: doer,
		RestoreResponseBody:    restoreBody,
		scheme:                 scheme,
		host:                   host,
		decoder:                dec,
		encoder:                enc,
	}
}

// UpsertSystem returns an endpoint that makes HTTP requests to the DSLEditor
// service UpsertSystem server.
func (c *Client) UpsertSystem() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpsertSystemRequest(c.encoder)
		decodeResponse = DecodeUpsertSystemResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpsertSystemRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpsertSystemDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "UpsertSystem", err)
		}
		return decodeResponse(resp)
	}
}

// UpsertPerson returns an endpoint that makes HTTP requests to the DSLEditor
// service UpsertPerson server.
func (c *Client) UpsertPerson() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpsertPersonRequest(c.encoder)
		decodeResponse = DecodeUpsertPersonResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpsertPersonRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpsertPersonDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "UpsertPerson", err)
		}
		return decodeResponse(resp)
	}
}

// UpsertContainer returns an endpoint that makes HTTP requests to the
// DSLEditor service UpsertContainer server.
func (c *Client) UpsertContainer() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpsertContainerRequest(c.encoder)
		decodeResponse = DecodeUpsertContainerResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpsertContainerRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpsertContainerDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "UpsertContainer", err)
		}
		return decodeResponse(resp)
	}
}

// UpsertComponent returns an endpoint that makes HTTP requests to the
// DSLEditor service UpsertComponent server.
func (c *Client) UpsertComponent() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpsertComponentRequest(c.encoder)
		decodeResponse = DecodeUpsertComponentResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpsertComponentRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpsertComponentDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "UpsertComponent", err)
		}
		return decodeResponse(resp)
	}
}

// UpsertRelationship returns an endpoint that makes HTTP requests to the
// DSLEditor service UpsertRelationship server.
func (c *Client) UpsertRelationship() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpsertRelationshipRequest(c.encoder)
		decodeResponse = DecodeUpsertRelationshipResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpsertRelationshipRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpsertRelationshipDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "UpsertRelationship", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteSystem returns an endpoint that makes HTTP requests to the DSLEditor
// service DeleteSystem server.
func (c *Client) DeleteSystem() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteSystemRequest(c.encoder)
		decodeResponse = DecodeDeleteSystemResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteSystemRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteSystemDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "DeleteSystem", err)
		}
		return decodeResponse(resp)
	}
}

// DeletePerson returns an endpoint that makes HTTP requests to the DSLEditor
// service DeletePerson server.
func (c *Client) DeletePerson() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeletePersonRequest(c.encoder)
		decodeResponse = DecodeDeletePersonResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeletePersonRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeletePersonDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "DeletePerson", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteContainer returns an endpoint that makes HTTP requests to the
// DSLEditor service DeleteContainer server.
func (c *Client) DeleteContainer() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteContainerRequest(c.encoder)
		decodeResponse = DecodeDeleteContainerResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteContainerRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteContainerDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "DeleteContainer", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteComponent returns an endpoint that makes HTTP requests to the
// DSLEditor service DeleteComponent server.
func (c *Client) DeleteComponent() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteComponentRequest(c.encoder)
		decodeResponse = DecodeDeleteComponentResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteComponentRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteComponentDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "DeleteComponent", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteRelationship returns an endpoint that makes HTTP requests to the
// DSLEditor service DeleteRelationship server.
func (c *Client) DeleteRelationship() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteRelationshipRequest(c.encoder)
		decodeResponse = DecodeDeleteRelationshipResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteRelationshipRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteRelationshipDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "DeleteRelationship", err)
		}
		return decodeResponse(resp)
	}
}
