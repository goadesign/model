// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Module HTTP server types
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package server

import (
	goa "goa.design/goa/v3/pkg"
	module "goa.design/model/mdlsvc/gen/module"
)

// ListModulesResponseBody is the type of the "Module" service "ListModules"
// endpoint HTTP response body.
type ListModulesResponseBody []*ModuleResponse

// CompileCompilationFailedResponseBody is the type of the "Module" service
// "Compile" endpoint HTTP response body for the "compilation_failed" error.
type CompileCompilationFailedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ModuleResponse is used to define fields on response body types.
type ModuleResponse struct {
	// Design Go module
	GoMod string `form:"GoMod" json:"GoMod" xml:"GoMod"`
}

// NewListModulesResponseBody builds the HTTP response body from the result of
// the "ListModules" endpoint of the "Module" service.
func NewListModulesResponseBody(res []*module.Module) ListModulesResponseBody {
	body := make([]*ModuleResponse, len(res))
	for i, val := range res {
		body[i] = marshalModuleModuleToModuleResponse(val)
	}
	return body
}

// NewCompileCompilationFailedResponseBody builds the HTTP response body from
// the result of the "Compile" endpoint of the "Module" service.
func NewCompileCompilationFailedResponseBody(res *goa.ServiceError) *CompileCompilationFailedResponseBody {
	body := &CompileCompilationFailedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSubscribeModule builds a Module service Subscribe endpoint payload.
func NewSubscribeModule(goMod string) *module.Module {
	v := &module.Module{}
	v.GoMod = goMod

	return v
}

// NewGetModelModule builds a Module service GetModel endpoint payload.
func NewGetModelModule(goMod string) *module.Module {
	v := &module.Module{}
	v.GoMod = goMod

	return v
}

// NewCompileModule builds a Module service Compile endpoint payload.
func NewCompileModule(goMod string) *module.Module {
	v := &module.Module{}
	v.GoMod = goMod

	return v
}

// NewGetLayoutModule builds a Module service GetLayout endpoint payload.
func NewGetLayoutModule(goMod string) *module.Module {
	v := &module.Module{}
	v.GoMod = goMod

	return v
}

// NewWriteDiagramModule builds a Module service WriteDiagram endpoint payload.
func NewWriteDiagramModule(goMod string) *module.Module {
	v := &module.Module{}
	v.GoMod = goMod

	return v
}
