// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Module HTTP server encoders and decoders
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package server

import (
	"context"
	"errors"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	module "goa.design/model/mdlsvc/gen/module"
)

// EncodeListModulesResponse returns an encoder for responses returned by the
// Module ListModules endpoint.
func EncodeListModulesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*module.Module)
		enc := encoder(ctx, w)
		body := NewListModulesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSubscribeRequest returns a decoder for requests sent to the Module
// Subscribe endpoint.
func DecodeSubscribeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			goMod string
			err   error
		)
		goMod = r.URL.Query().Get("mod")
		if goMod == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("GoMod", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("GoMod", goMod, "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\\-]+/(/([a-zA-Z0-9_\\-]+))*$"))
		if err != nil {
			return nil, err
		}
		payload := NewSubscribeModule(goMod)

		return payload, nil
	}
}

// EncodeGetModelResponse returns an encoder for responses returned by the
// Module GetModel endpoint.
func EncodeGetModelResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeGetModelRequest returns a decoder for requests sent to the Module
// GetModel endpoint.
func DecodeGetModelRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			goMod string
			err   error
		)
		goMod = r.URL.Query().Get("mod")
		if goMod == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("GoMod", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("GoMod", goMod, "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\\-]+/(/([a-zA-Z0-9_\\-]+))*$"))
		if err != nil {
			return nil, err
		}
		payload := NewGetModelModule(goMod)

		return payload, nil
	}
}

// EncodeCompileResponse returns an encoder for responses returned by the
// Module Compile endpoint.
func EncodeCompileResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(module.Model)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCompileRequest returns a decoder for requests sent to the Module
// Compile endpoint.
func DecodeCompileRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			goMod string
			err   error
		)
		goMod = r.URL.Query().Get("mod")
		if goMod == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("GoMod", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("GoMod", goMod, "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\\-]+/(/([a-zA-Z0-9_\\-]+))*$"))
		if err != nil {
			return nil, err
		}
		payload := NewCompileModule(goMod)

		return payload, nil
	}
}

// EncodeCompileError returns an encoder for errors returned by the Compile
// Module endpoint.
func EncodeCompileError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCompileCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetLayoutResponse returns an encoder for responses returned by the
// Module GetLayout endpoint.
func EncodeGetLayoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeGetLayoutRequest returns a decoder for requests sent to the Module
// GetLayout endpoint.
func DecodeGetLayoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			goMod string
			err   error
		)
		goMod = r.URL.Query().Get("mod")
		if goMod == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("GoMod", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("GoMod", goMod, "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\\-]+/(/([a-zA-Z0-9_\\-]+))*$"))
		if err != nil {
			return nil, err
		}
		payload := NewGetLayoutModule(goMod)

		return payload, nil
	}
}

// EncodeWriteDiagramResponse returns an encoder for responses returned by the
// Module WriteDiagram endpoint.
func EncodeWriteDiagramResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeWriteDiagramRequest returns a decoder for requests sent to the Module
// WriteDiagram endpoint.
func DecodeWriteDiagramRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			goMod string
			err   error
		)
		goMod = r.URL.Query().Get("mod")
		if goMod == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("GoMod", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("GoMod", goMod, "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\\-]+/(/([a-zA-Z0-9_\\-]+))*$"))
		if err != nil {
			return nil, err
		}
		payload := NewWriteDiagramModule(goMod)

		return payload, nil
	}
}

// marshalModuleModuleToModuleResponse builds a value of type *ModuleResponse
// from a value of type *module.Module.
func marshalModuleModuleToModuleResponse(v *module.Module) *ModuleResponse {
	res := &ModuleResponse{
		GoMod: v.GoMod,
	}

	return res
}
