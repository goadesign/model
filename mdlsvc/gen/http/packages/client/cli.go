// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Packages HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package client

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	types "goa.design/model/mdlsvc/gen/types"
)

// BuildListPackagesPayload builds the payload for the Packages ListPackages
// endpoint from CLI flags.
func BuildListPackagesPayload(packagesListPackagesWorkspace string) (*types.Workspace, error) {
	var err error
	var workspace string
	{
		workspace = packagesListPackagesWorkspace
		if utf8.RuneCountInString(workspace) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Workspace", workspace, utf8.RuneCountInString(workspace), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &types.Workspace{}
	v.Workspace = workspace

	return v, nil
}

// BuildListPackageFilesPayload builds the payload for the Packages
// ListPackageFiles endpoint from CLI flags.
func BuildListPackageFilesPayload(packagesListPackageFilesWorkspace string, packagesListPackageFilesDir string) (*types.PackageLocator, error) {
	var err error
	var workspace string
	{
		workspace = packagesListPackageFilesWorkspace
		if utf8.RuneCountInString(workspace) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Workspace", workspace, utf8.RuneCountInString(workspace), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var dir string
	{
		dir = packagesListPackageFilesDir
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &types.PackageLocator{}
	v.Workspace = workspace
	v.Dir = dir

	return v, nil
}

// BuildSubscribePayload builds the payload for the Packages Subscribe endpoint
// from CLI flags.
func BuildSubscribePayload(packagesSubscribeWorkspace string, packagesSubscribeDir string) (*types.PackageLocator, error) {
	var err error
	var workspace string
	{
		workspace = packagesSubscribeWorkspace
		if utf8.RuneCountInString(workspace) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Workspace", workspace, utf8.RuneCountInString(workspace), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var dir string
	{
		dir = packagesSubscribeDir
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &types.PackageLocator{}
	v.Workspace = workspace
	v.Dir = dir

	return v, nil
}

// BuildGetModelJSONPayload builds the payload for the Packages GetModelJSON
// endpoint from CLI flags.
func BuildGetModelJSONPayload(packagesGetModelJSONWorkspace string, packagesGetModelJSONDir string) (*types.PackageLocator, error) {
	var err error
	var workspace string
	{
		workspace = packagesGetModelJSONWorkspace
		if utf8.RuneCountInString(workspace) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Workspace", workspace, utf8.RuneCountInString(workspace), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var dir string
	{
		dir = packagesGetModelJSONDir
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &types.PackageLocator{}
	v.Workspace = workspace
	v.Dir = dir

	return v, nil
}

// BuildGetLayoutPayload builds the payload for the Packages GetLayout endpoint
// from CLI flags.
func BuildGetLayoutPayload(packagesGetLayoutWorkspace string, packagesGetLayoutDir string) (*types.PackageLocator, error) {
	var err error
	var workspace string
	{
		workspace = packagesGetLayoutWorkspace
		if utf8.RuneCountInString(workspace) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Workspace", workspace, utf8.RuneCountInString(workspace), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var dir string
	{
		dir = packagesGetLayoutDir
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &types.PackageLocator{}
	v.Workspace = workspace
	v.Dir = dir

	return v, nil
}
