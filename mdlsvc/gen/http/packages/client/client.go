// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Packages client HTTP transport
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package client

import (
	"context"
	"net/http"
	"time"

	"github.com/gorilla/websocket"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	packages "goa.design/model/mdlsvc/gen/packages"
)

// Client lists the Packages service endpoint HTTP clients.
type Client struct {
	// ListPackages Doer is the HTTP client used to make requests to the
	// ListPackages endpoint.
	ListPackagesDoer goahttp.Doer

	// ListPackageFiles Doer is the HTTP client used to make requests to the
	// ListPackageFiles endpoint.
	ListPackageFilesDoer goahttp.Doer

	// Subscribe Doer is the HTTP client used to make requests to the Subscribe
	// endpoint.
	SubscribeDoer goahttp.Doer

	// GetModelJSON Doer is the HTTP client used to make requests to the
	// GetModelJSON endpoint.
	GetModelJSONDoer goahttp.Doer

	// GetLayout Doer is the HTTP client used to make requests to the GetLayout
	// endpoint.
	GetLayoutDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme     string
	host       string
	encoder    func(*http.Request) goahttp.Encoder
	decoder    func(*http.Response) goahttp.Decoder
	dialer     goahttp.Dialer
	configurer *ConnConfigurer
}

// NewClient instantiates HTTP clients for all the Packages service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
	dialer goahttp.Dialer,
	cfn *ConnConfigurer,
) *Client {
	if cfn == nil {
		cfn = &ConnConfigurer{}
	}
	return &Client{
		ListPackagesDoer:     doer,
		ListPackageFilesDoer: doer,
		SubscribeDoer:        doer,
		GetModelJSONDoer:     doer,
		GetLayoutDoer:        doer,
		RestoreResponseBody:  restoreBody,
		scheme:               scheme,
		host:                 host,
		decoder:              dec,
		encoder:              enc,
		dialer:               dialer,
		configurer:           cfn,
	}
}

// ListPackages returns an endpoint that makes HTTP requests to the Packages
// service ListPackages server.
func (c *Client) ListPackages() goa.Endpoint {
	var (
		encodeRequest  = EncodeListPackagesRequest(c.encoder)
		decodeResponse = DecodeListPackagesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListPackagesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListPackagesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Packages", "ListPackages", err)
		}
		return decodeResponse(resp)
	}
}

// ListPackageFiles returns an endpoint that makes HTTP requests to the
// Packages service ListPackageFiles server.
func (c *Client) ListPackageFiles() goa.Endpoint {
	var (
		encodeRequest  = EncodeListPackageFilesRequest(c.encoder)
		decodeResponse = DecodeListPackageFilesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListPackageFilesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListPackageFilesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Packages", "ListPackageFiles", err)
		}
		return decodeResponse(resp)
	}
}

// Subscribe returns an endpoint that makes HTTP requests to the Packages
// service Subscribe server.
func (c *Client) Subscribe() goa.Endpoint {
	var (
		encodeRequest  = EncodeSubscribeRequest(c.encoder)
		decodeResponse = DecodeSubscribeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSubscribeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("Packages", "Subscribe", err)
		}
		if c.configurer.SubscribeFn != nil {
			var cancel context.CancelFunc
			ctx, cancel = context.WithCancel(ctx)
			conn = c.configurer.SubscribeFn(conn, cancel)
		}
		go func() {
			<-ctx.Done()
			conn.WriteControl(
				websocket.CloseMessage,
				websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing connection"),
				time.Now().Add(time.Second),
			)
			conn.Close()
		}()
		stream := &SubscribeClientStream{conn: conn}
		return stream, nil
	}
}

// GetModelJSON returns an endpoint that makes HTTP requests to the Packages
// service GetModelJSON server.
func (c *Client) GetModelJSON() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetModelJSONRequest(c.encoder)
		decodeResponse = DecodeGetModelJSONResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetModelJSONRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetModelJSONDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Packages", "GetModelJSON", err)
		}
		_, err = decodeResponse(resp)
		if err != nil {
			resp.Body.Close()
			return nil, err
		}
		return &packages.GetModelJSONResponseData{Body: resp.Body}, nil
	}
}

// GetLayout returns an endpoint that makes HTTP requests to the Packages
// service GetLayout server.
func (c *Client) GetLayout() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetLayoutRequest(c.encoder)
		decodeResponse = DecodeGetLayoutResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetLayoutRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetLayoutDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Packages", "GetLayout", err)
		}
		_, err = decodeResponse(resp)
		if err != nil {
			resp.Body.Close()
			return nil, err
		}
		return &packages.GetLayoutResponseData{Body: resp.Body}, nil
	}
}
