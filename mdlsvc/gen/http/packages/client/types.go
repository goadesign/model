// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Packages HTTP client types
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package client

import (
	goa "goa.design/goa/v3/pkg"
	packages "goa.design/model/mdlsvc/gen/packages"
)

// ListPackagesResponseBody is the type of the "Packages" service
// "ListPackages" endpoint HTTP response body.
type ListPackagesResponseBody []*PackageResponse

// UploadCompilationFailedResponseBody is the type of the "Packages" service
// "Upload" endpoint HTTP response body for the "compilation_failed" error.
type UploadCompilationFailedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PackageResponse is used to define fields on response body types.
type PackageResponse struct {
	// Design Go package import path
	PackagePath *string `form:"PackagePath,omitempty" json:"PackagePath,omitempty" xml:"PackagePath,omitempty"`
}

// NewListPackagesPackageOK builds a "Packages" service "ListPackages" endpoint
// result from a HTTP "OK" response.
func NewListPackagesPackageOK(body []*PackageResponse) []*packages.Package {
	v := make([]*packages.Package, len(body))
	for i, val := range body {
		v[i] = unmarshalPackageResponseToPackagesPackage(val)
	}

	return v
}

// NewSubscribeModelSwitchingProtocols builds a "Packages" service "Subscribe"
// endpoint result from a HTTP "SwitchingProtocols" response.
func NewSubscribeModelSwitchingProtocols(body string) packages.Model {
	v := packages.Model(body)

	return v
}

// NewUploadModelOK builds a "Packages" service "Upload" endpoint result from a
// HTTP "OK" response.
func NewUploadModelOK(body string) packages.Model {
	v := packages.Model(body)

	return v
}

// NewUploadCompilationFailed builds a Packages service Upload endpoint
// compilation_failed error.
func NewUploadCompilationFailed(body *UploadCompilationFailedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateUploadCompilationFailedResponseBody runs the validations defined on
// Upload_compilation_failed_Response_Body
func ValidateUploadCompilationFailedResponseBody(body *UploadCompilationFailedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePackageResponse runs the validations defined on PackageResponse
func ValidatePackageResponse(body *PackageResponse) (err error) {
	if body.PackagePath == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("PackagePath", "body"))
	}
	if body.PackagePath != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.PackagePath", *body.PackagePath, "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\\-]+/(/([a-zA-Z0-9_\\-]+))*$"))
	}
	return
}
