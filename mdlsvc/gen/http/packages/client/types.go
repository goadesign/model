// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Packages HTTP client types
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package client

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	types "goa.design/model/mdlsvc/gen/types"
)

// ListPackagesResponseBody is the type of the "Packages" service
// "ListPackages" endpoint HTTP response body.
type ListPackagesResponseBody []*PackageResponse

// ListPackageFilesResponseBody is the type of the "Packages" service
// "ListPackageFiles" endpoint HTTP response body.
type ListPackageFilesResponseBody []*PackageFileResponse

// PackageResponse is used to define fields on response body types.
type PackageResponse struct {
	// Design Go package import path
	ImportPath *string `form:"ImportPath,omitempty" json:"ImportPath,omitempty" xml:"ImportPath,omitempty"`
	// Path to directory containing a model package
	Dir *string `form:"Dir,omitempty" json:"Dir,omitempty" xml:"Dir,omitempty"`
}

// PackageFileResponse is used to define fields on response body types.
type PackageFileResponse struct {
	// Path to file containing DSL code
	Locator *FileLocatorResponse `form:"Locator,omitempty" json:"Locator,omitempty" xml:"Locator,omitempty"`
	// DSL code
	Content *string `form:"Content,omitempty" json:"Content,omitempty" xml:"Content,omitempty"`
}

// FileLocatorResponse is used to define fields on response body types.
type FileLocatorResponse struct {
	// Name of DSL file
	Filename *string `form:"Filename,omitempty" json:"Filename,omitempty" xml:"Filename,omitempty"`
	// Workspace identifier
	Workspace *string `form:"Workspace,omitempty" json:"Workspace,omitempty" xml:"Workspace,omitempty"`
	// Path to directory containing a model package
	Dir *string `form:"Dir,omitempty" json:"Dir,omitempty" xml:"Dir,omitempty"`
}

// NewListPackagesTypesPackageOK builds a "Packages" service "ListPackages"
// endpoint result from a HTTP "OK" response.
func NewListPackagesTypesPackageOK(body []*PackageResponse) []*types.Package {
	v := make([]*types.Package, len(body))
	for i, val := range body {
		v[i] = unmarshalPackageResponseToTypesPackage(val)
	}

	return v
}

// NewListPackageFilesTypesPackageFileOK builds a "Packages" service
// "ListPackageFiles" endpoint result from a HTTP "OK" response.
func NewListPackageFilesTypesPackageFileOK(body []*PackageFileResponse) []*types.PackageFile {
	v := make([]*types.PackageFile, len(body))
	for i, val := range body {
		v[i] = unmarshalPackageFileResponseToTypesPackageFile(val)
	}

	return v
}

// NewSubscribeModelJSONSwitchingProtocols builds a "Packages" service
// "Subscribe" endpoint result from a HTTP "SwitchingProtocols" response.
func NewSubscribeModelJSONSwitchingProtocols(body string) types.ModelJSON {
	v := types.ModelJSON(body)

	return v
}

// ValidatePackageResponse runs the validations defined on PackageResponse
func ValidatePackageResponse(body *PackageResponse) (err error) {
	if body.ImportPath == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ImportPath", "body"))
	}
	if body.Dir == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "body"))
	}
	if body.ImportPath != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.ImportPath", *body.ImportPath, "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\\-]+/(/([a-zA-Z0-9_\\-]+))*$"))
	}
	if body.Dir != nil {
		if utf8.RuneCountInString(*body.Dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Dir", *body.Dir, utf8.RuneCountInString(*body.Dir), 1, true))
		}
	}
	return
}

// ValidatePackageFileResponse runs the validations defined on
// PackageFileResponse
func ValidatePackageFileResponse(body *PackageFileResponse) (err error) {
	if body.Locator == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Locator", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Content", "body"))
	}
	if body.Locator != nil {
		if err2 := ValidateFileLocatorResponse(body.Locator); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Content != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.Content", *body.Content, "import . \"goa.design/model/dsl\""))
	}
	if body.Content != nil {
		if utf8.RuneCountInString(*body.Content) < 58 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Content", *body.Content, utf8.RuneCountInString(*body.Content), 58, true))
		}
	}
	return
}

// ValidateFileLocatorResponse runs the validations defined on
// FileLocatorResponse
func ValidateFileLocatorResponse(body *FileLocatorResponse) (err error) {
	if body.Filename == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Filename", "body"))
	}
	if body.Workspace == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Workspace", "body"))
	}
	if body.Dir == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "body"))
	}
	if body.Filename != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.Filename", *body.Filename, "\\.go$"))
	}
	if body.Workspace != nil {
		if utf8.RuneCountInString(*body.Workspace) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Workspace", *body.Workspace, utf8.RuneCountInString(*body.Workspace), 1, true))
		}
	}
	if body.Dir != nil {
		if utf8.RuneCountInString(*body.Dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Dir", *body.Dir, utf8.RuneCountInString(*body.Dir), 1, true))
		}
	}
	return
}
