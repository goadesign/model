// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Packages HTTP client encoders and decoders
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	packages "goa.design/model/mdlsvc/gen/packages"
)

// BuildListPackagesRequest instantiates a HTTP request object with method and
// path set to call the "Packages" service "ListPackages" endpoint
func (c *Client) BuildListPackagesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListPackagesPackagesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Packages", "ListPackages", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListPackagesResponse returns a decoder for responses returned by the
// Packages ListPackages endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeListPackagesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListPackagesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Packages", "ListPackages", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidatePackageResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("Packages", "ListPackages", err)
			}
			res := NewListPackagesPackageOK(body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Packages", "ListPackages", resp.StatusCode, string(body))
		}
	}
}

// BuildSubscribeRequest instantiates a HTTP request object with method and
// path set to call the "Packages" service "Subscribe" endpoint
func (c *Client) BuildSubscribeRequest(ctx context.Context, v any) (*http.Request, error) {
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: SubscribePackagesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Packages", "Subscribe", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSubscribeRequest returns an encoder for requests sent to the Packages
// Subscribe server.
func EncodeSubscribeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*packages.Package)
		if !ok {
			return goahttp.ErrInvalidType("Packages", "Subscribe", "*packages.Package", v)
		}
		values := req.URL.Query()
		values.Add("package", p.PackagePath)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeSubscribeResponse returns a decoder for responses returned by the
// Packages Subscribe endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeSubscribeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusSwitchingProtocols:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Packages", "Subscribe", err)
			}
			err = goa.MergeErrors(err, goa.ValidateFormat("body", body, goa.FormatJSON))
			if err != nil {
				return nil, goahttp.ErrValidationError("Packages", "Subscribe", err)
			}
			res := NewSubscribeModelSwitchingProtocols(body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Packages", "Subscribe", resp.StatusCode, string(body))
		}
	}
}

// BuildUploadRequest instantiates a HTTP request object with method and path
// set to call the "Packages" service "Upload" endpoint
func (c *Client) BuildUploadRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		body io.Reader
	)
	rd, ok := v.(*packages.UploadRequestData)
	if !ok {
		return nil, goahttp.ErrInvalidType("Packages", "Upload", "packages.UploadRequestData", v)
	}
	body = rd.Body
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UploadPackagesPath()}
	req, err := http.NewRequest("POST", u.String(), body)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Packages", "Upload", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUploadRequest returns an encoder for requests sent to the Packages
// Upload server.
func EncodeUploadRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		data, ok := v.(*packages.UploadRequestData)
		if !ok {
			return goahttp.ErrInvalidType("Packages", "Upload", "*packages.UploadRequestData", v)
		}
		p := data.Payload
		values := req.URL.Query()
		values.Add("package", p.PackagePath)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeUploadResponse returns a decoder for responses returned by the
// Packages Upload endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUploadResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUploadResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Packages", "Upload", err)
			}
			err = goa.MergeErrors(err, goa.ValidateFormat("body", body, goa.FormatJSON))
			if err != nil {
				return nil, goahttp.ErrValidationError("Packages", "Upload", err)
			}
			res := NewUploadModelOK(body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UploadCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Packages", "Upload", err)
			}
			err = ValidateUploadCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Packages", "Upload", err)
			}
			return nil, NewUploadCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Packages", "Upload", resp.StatusCode, string(body))
		}
	}
}

// // BuildUploadStreamPayload creates a streaming endpoint request payload from
// the method payload and the path to the file to be streamed
func BuildUploadStreamPayload(payload any, fpath string) (*packages.UploadRequestData, error) {
	f, err := os.Open(fpath)
	if err != nil {
		return nil, err
	}
	return &packages.UploadRequestData{
		Payload: payload.(*packages.Package),
		Body:    f,
	}, nil
}

// BuildGetModelRequest instantiates a HTTP request object with method and path
// set to call the "Packages" service "GetModel" endpoint
func (c *Client) BuildGetModelRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetModelPackagesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Packages", "GetModel", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetModelRequest returns an encoder for requests sent to the Packages
// GetModel server.
func EncodeGetModelRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*packages.Package)
		if !ok {
			return goahttp.ErrInvalidType("Packages", "GetModel", "*packages.Package", v)
		}
		values := req.URL.Query()
		values.Add("package", p.PackagePath)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetModelResponse returns a decoder for responses returned by the
// Packages GetModel endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeGetModelResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Packages", "GetModel", resp.StatusCode, string(body))
		}
	}
}

// unmarshalPackageResponseToPackagesPackage builds a value of type
// *packages.Package from a value of type *PackageResponse.
func unmarshalPackageResponseToPackagesPackage(v *PackageResponse) *packages.Package {
	res := &packages.Package{
		PackagePath: *v.PackagePath,
	}

	return res
}
