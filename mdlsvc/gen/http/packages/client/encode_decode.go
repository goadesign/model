// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Packages HTTP client encoders and decoders
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	types "goa.design/model/mdlsvc/gen/types"
)

// BuildListPackagesRequest instantiates a HTTP request object with method and
// path set to call the "Packages" service "ListPackages" endpoint
func (c *Client) BuildListPackagesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListPackagesPackagesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Packages", "ListPackages", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListPackagesRequest returns an encoder for requests sent to the
// Packages ListPackages server.
func EncodeListPackagesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*types.Workspace)
		if !ok {
			return goahttp.ErrInvalidType("Packages", "ListPackages", "*types.Workspace", v)
		}
		values := req.URL.Query()
		values.Add("work", p.Workspace)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListPackagesResponse returns a decoder for responses returned by the
// Packages ListPackages endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeListPackagesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListPackagesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Packages", "ListPackages", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidatePackageResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("Packages", "ListPackages", err)
			}
			res := NewListPackagesTypesPackageOK(body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Packages", "ListPackages", resp.StatusCode, string(body))
		}
	}
}

// BuildListPackageFilesRequest instantiates a HTTP request object with method
// and path set to call the "Packages" service "ListPackageFiles" endpoint
func (c *Client) BuildListPackageFilesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListPackageFilesPackagesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Packages", "ListPackageFiles", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListPackageFilesRequest returns an encoder for requests sent to the
// Packages ListPackageFiles server.
func EncodeListPackageFilesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*types.PackageLocator)
		if !ok {
			return goahttp.ErrInvalidType("Packages", "ListPackageFiles", "*types.PackageLocator", v)
		}
		values := req.URL.Query()
		values.Add("work", p.Workspace)
		values.Add("dir", p.Dir)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListPackageFilesResponse returns a decoder for responses returned by
// the Packages ListPackageFiles endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeListPackageFilesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListPackageFilesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Packages", "ListPackageFiles", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidatePackageFileResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("Packages", "ListPackageFiles", err)
			}
			res := NewListPackageFilesTypesPackageFileOK(body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Packages", "ListPackageFiles", resp.StatusCode, string(body))
		}
	}
}

// BuildSubscribeRequest instantiates a HTTP request object with method and
// path set to call the "Packages" service "Subscribe" endpoint
func (c *Client) BuildSubscribeRequest(ctx context.Context, v any) (*http.Request, error) {
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: SubscribePackagesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Packages", "Subscribe", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSubscribeRequest returns an encoder for requests sent to the Packages
// Subscribe server.
func EncodeSubscribeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*types.PackageLocator)
		if !ok {
			return goahttp.ErrInvalidType("Packages", "Subscribe", "*types.PackageLocator", v)
		}
		values := req.URL.Query()
		values.Add("work", p.Workspace)
		values.Add("dir", p.Dir)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeSubscribeResponse returns a decoder for responses returned by the
// Packages Subscribe endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeSubscribeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusSwitchingProtocols:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Packages", "Subscribe", err)
			}
			err = goa.MergeErrors(err, goa.ValidateFormat("body", body, goa.FormatJSON))
			if err != nil {
				return nil, goahttp.ErrValidationError("Packages", "Subscribe", err)
			}
			res := NewSubscribeModelJSONSwitchingProtocols(body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Packages", "Subscribe", resp.StatusCode, string(body))
		}
	}
}

// BuildGetModelJSONRequest instantiates a HTTP request object with method and
// path set to call the "Packages" service "GetModelJSON" endpoint
func (c *Client) BuildGetModelJSONRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetModelJSONPackagesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Packages", "GetModelJSON", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetModelJSONRequest returns an encoder for requests sent to the
// Packages GetModelJSON server.
func EncodeGetModelJSONRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*types.PackageLocator)
		if !ok {
			return goahttp.ErrInvalidType("Packages", "GetModelJSON", "*types.PackageLocator", v)
		}
		values := req.URL.Query()
		values.Add("work", p.Workspace)
		values.Add("dir", p.Dir)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetModelJSONResponse returns a decoder for responses returned by the
// Packages GetModelJSON endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeGetModelJSONResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Packages", "GetModelJSON", resp.StatusCode, string(body))
		}
	}
}

// BuildGetLayoutRequest instantiates a HTTP request object with method and
// path set to call the "Packages" service "GetLayout" endpoint
func (c *Client) BuildGetLayoutRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetLayoutPackagesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Packages", "GetLayout", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetLayoutRequest returns an encoder for requests sent to the Packages
// GetLayout server.
func EncodeGetLayoutRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*types.PackageLocator)
		if !ok {
			return goahttp.ErrInvalidType("Packages", "GetLayout", "*types.PackageLocator", v)
		}
		values := req.URL.Query()
		values.Add("work", p.Workspace)
		values.Add("dir", p.Dir)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetLayoutResponse returns a decoder for responses returned by the
// Packages GetLayout endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeGetLayoutResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Packages", "GetLayout", resp.StatusCode, string(body))
		}
	}
}

// unmarshalPackageResponseToTypesPackage builds a value of type *types.Package
// from a value of type *PackageResponse.
func unmarshalPackageResponseToTypesPackage(v *PackageResponse) *types.Package {
	res := &types.Package{
		ImportPath: *v.ImportPath,
		Dir:        *v.Dir,
	}

	return res
}

// unmarshalPackageFileResponseToTypesPackageFile builds a value of type
// *types.PackageFile from a value of type *PackageFileResponse.
func unmarshalPackageFileResponseToTypesPackageFile(v *PackageFileResponse) *types.PackageFile {
	res := &types.PackageFile{
		Content: *v.Content,
	}
	res.Locator = unmarshalFileLocatorResponseToTypesFileLocator(v.Locator)

	return res
}

// unmarshalFileLocatorResponseToTypesFileLocator builds a value of type
// *types.FileLocator from a value of type *FileLocatorResponse.
func unmarshalFileLocatorResponseToTypesFileLocator(v *FileLocatorResponse) *types.FileLocator {
	res := &types.FileLocator{
		Filename:  *v.Filename,
		Workspace: *v.Workspace,
		Dir:       *v.Dir,
	}

	return res
}
