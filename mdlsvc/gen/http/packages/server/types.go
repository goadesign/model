// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Packages HTTP server types
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package server

import (
	goa "goa.design/goa/v3/pkg"
	packages "goa.design/model/mdlsvc/gen/packages"
)

// ListPackagesResponseBody is the type of the "Packages" service
// "ListPackages" endpoint HTTP response body.
type ListPackagesResponseBody []*PackageResponse

// UploadCompilationFailedResponseBody is the type of the "Packages" service
// "Upload" endpoint HTTP response body for the "compilation_failed" error.
type UploadCompilationFailedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PackageResponse is used to define fields on response body types.
type PackageResponse struct {
	// Design Go package import path
	PackagePath string `form:"PackagePath" json:"PackagePath" xml:"PackagePath"`
}

// NewListPackagesResponseBody builds the HTTP response body from the result of
// the "ListPackages" endpoint of the "Packages" service.
func NewListPackagesResponseBody(res []*packages.Package) ListPackagesResponseBody {
	body := make([]*PackageResponse, len(res))
	for i, val := range res {
		body[i] = marshalPackagesPackageToPackageResponse(val)
	}
	return body
}

// NewUploadCompilationFailedResponseBody builds the HTTP response body from
// the result of the "Upload" endpoint of the "Packages" service.
func NewUploadCompilationFailedResponseBody(res *goa.ServiceError) *UploadCompilationFailedResponseBody {
	body := &UploadCompilationFailedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSubscribePackage builds a Packages service Subscribe endpoint payload.
func NewSubscribePackage(packagePath string) *packages.Package {
	v := &packages.Package{}
	v.PackagePath = packagePath

	return v
}

// NewUploadPackage builds a Packages service Upload endpoint payload.
func NewUploadPackage(packagePath string) *packages.Package {
	v := &packages.Package{}
	v.PackagePath = packagePath

	return v
}

// NewGetModelPackage builds a Packages service GetModel endpoint payload.
func NewGetModelPackage(packagePath string) *packages.Package {
	v := &packages.Package{}
	v.PackagePath = packagePath

	return v
}
