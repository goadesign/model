// Code generated by goa v3.13.2, DO NOT EDIT.
//
// SVG HTTP client encoders and decoders
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	svg "goa.design/model/mdlsvc/gen/svg"
)

// BuildLoadRequest instantiates a HTTP request object with method and path set
// to call the "SVG" service "Load" endpoint
func (c *Client) BuildLoadRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LoadSVGPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("SVG", "Load", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLoadRequest returns an encoder for requests sent to the SVG Load
// server.
func EncodeLoadRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*svg.Filename)
		if !ok {
			return goahttp.ErrInvalidType("SVG", "Load", "*svg.Filename", v)
		}
		values := req.URL.Query()
		values.Add("file", p.Filename)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeLoadResponse returns a decoder for responses returned by the SVG Load
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeLoadResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("SVG", "Load", err)
			}
			err = goa.MergeErrors(err, goa.ValidatePattern("body", body, "<svg.*</svg>$"))
			if err != nil {
				return nil, goahttp.ErrValidationError("SVG", "Load", err)
			}
			res := NewLoadSVGOK(body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("SVG", "Load", resp.StatusCode, string(body))
		}
	}
}

// BuildSaveRequest instantiates a HTTP request object with method and path set
// to call the "SVG" service "Save" endpoint
func (c *Client) BuildSaveRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SaveSVGPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("SVG", "Save", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSaveRequest returns an encoder for requests sent to the SVG Save
// server.
func EncodeSaveRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*svg.SavePayload)
		if !ok {
			return goahttp.ErrInvalidType("SVG", "Save", "*svg.SavePayload", v)
		}
		values := req.URL.Query()
		values.Add("file", p.Filename)
		req.URL.RawQuery = values.Encode()
		body := NewSaveRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("SVG", "Save", err)
		}
		return nil
	}
}

// DecodeSaveResponse returns a decoder for responses returned by the SVG Save
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeSaveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("SVG", "Save", resp.StatusCode, string(body))
		}
	}
}
