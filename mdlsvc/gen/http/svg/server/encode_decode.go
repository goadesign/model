// Code generated by goa v3.13.2, DO NOT EDIT.
//
// SVG HTTP server encoders and decoders
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package server

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeLoadResponse returns an encoder for responses returned by the SVG Load
// endpoint.
func EncodeLoadResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeLoadRequest returns a decoder for requests sent to the SVG Load
// endpoint.
func DecodeLoadRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			filename string
			err      error
		)
		filename = r.URL.Query().Get("file")
		if filename == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Filename", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("Filename", filename, ".*\\.svg"))
		if err != nil {
			return nil, err
		}
		payload := NewLoadFilename(filename)

		return payload, nil
	}
}

// EncodeSaveResponse returns an encoder for responses returned by the SVG Save
// endpoint.
func EncodeSaveResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeSaveRequest returns a decoder for requests sent to the SVG Save
// endpoint.
func DecodeSaveRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			filename string
			err      error
		)
		filename = r.URL.Query().Get("file")
		if filename == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Filename", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("Filename", filename, ".*\\.svg"))
		if err != nil {
			return nil, err
		}
		payload := NewSaveFilename(filename)

		return payload, nil
	}
}
