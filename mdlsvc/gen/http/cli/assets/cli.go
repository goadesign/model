// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Assets HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	dsleditorc "goa.design/model/mdlsvc/gen/http/dsl_editor/client"
	packagesc "goa.design/model/mdlsvc/gen/http/packages/client"
	svgc "goa.design/model/mdlsvc/gen/http/svg/client"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `dsl-editor (update-dsl|upsert-system|upsert-person|upsert-container|upsert-component|upsert-relationship|delete-system|delete-person|delete-container|delete-component|delete-relationship)
packages (list-workspaces|create-package|delete-package|list-packages|read-package-files|subscribe)
svg (load|save)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` dsl-editor update-dsl --body '{
      "Content": "import . \"goa.design/model/dsl\"\n\nvar _ = Design(func() {})",
      "Locator": {
         "Dir": "src/repo/model",
         "Filename": "model.go",
         "Workspace": "my-workspace"
      }
   }'` + "\n" +
		os.Args[0] + ` packages list-workspaces` + "\n" +
		os.Args[0] + ` svg load --filename "diagram.svg"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	dialer goahttp.Dialer,
	packagesConfigurer *packagesc.ConnConfigurer,
) (goa.Endpoint, any, error) {
	var (
		dSLEditorFlags = flag.NewFlagSet("dsl-editor", flag.ContinueOnError)

		dSLEditorUpdateDSLFlags    = flag.NewFlagSet("update-dsl", flag.ExitOnError)
		dSLEditorUpdateDSLBodyFlag = dSLEditorUpdateDSLFlags.String("body", "REQUIRED", "")

		dSLEditorUpsertSystemFlags    = flag.NewFlagSet("upsert-system", flag.ExitOnError)
		dSLEditorUpsertSystemBodyFlag = dSLEditorUpsertSystemFlags.String("body", "REQUIRED", "")

		dSLEditorUpsertPersonFlags    = flag.NewFlagSet("upsert-person", flag.ExitOnError)
		dSLEditorUpsertPersonBodyFlag = dSLEditorUpsertPersonFlags.String("body", "REQUIRED", "")

		dSLEditorUpsertContainerFlags    = flag.NewFlagSet("upsert-container", flag.ExitOnError)
		dSLEditorUpsertContainerBodyFlag = dSLEditorUpsertContainerFlags.String("body", "REQUIRED", "")

		dSLEditorUpsertComponentFlags    = flag.NewFlagSet("upsert-component", flag.ExitOnError)
		dSLEditorUpsertComponentBodyFlag = dSLEditorUpsertComponentFlags.String("body", "REQUIRED", "")

		dSLEditorUpsertRelationshipFlags    = flag.NewFlagSet("upsert-relationship", flag.ExitOnError)
		dSLEditorUpsertRelationshipBodyFlag = dSLEditorUpsertRelationshipFlags.String("body", "REQUIRED", "")

		dSLEditorDeleteSystemFlags          = flag.NewFlagSet("delete-system", flag.ExitOnError)
		dSLEditorDeleteSystemBodyFlag       = dSLEditorDeleteSystemFlags.String("body", "REQUIRED", "")
		dSLEditorDeleteSystemSystemNameFlag = dSLEditorDeleteSystemFlags.String("system-name", "REQUIRED", "Name of software system to delete")

		dSLEditorDeletePersonFlags          = flag.NewFlagSet("delete-person", flag.ExitOnError)
		dSLEditorDeletePersonBodyFlag       = dSLEditorDeletePersonFlags.String("body", "REQUIRED", "")
		dSLEditorDeletePersonPersonNameFlag = dSLEditorDeletePersonFlags.String("person-name", "REQUIRED", "Name of person to delete")

		dSLEditorDeleteContainerFlags             = flag.NewFlagSet("delete-container", flag.ExitOnError)
		dSLEditorDeleteContainerBodyFlag          = dSLEditorDeleteContainerFlags.String("body", "REQUIRED", "")
		dSLEditorDeleteContainerSystemNameFlag    = dSLEditorDeleteContainerFlags.String("system-name", "REQUIRED", "Name of container software system")
		dSLEditorDeleteContainerContainerNameFlag = dSLEditorDeleteContainerFlags.String("container-name", "REQUIRED", "Name of container to delete")

		dSLEditorDeleteComponentFlags             = flag.NewFlagSet("delete-component", flag.ExitOnError)
		dSLEditorDeleteComponentBodyFlag          = dSLEditorDeleteComponentFlags.String("body", "REQUIRED", "")
		dSLEditorDeleteComponentSystemNameFlag    = dSLEditorDeleteComponentFlags.String("system-name", "REQUIRED", "Name of component software system")
		dSLEditorDeleteComponentContainerNameFlag = dSLEditorDeleteComponentFlags.String("container-name", "REQUIRED", "Name of component software system")
		dSLEditorDeleteComponentComponentNameFlag = dSLEditorDeleteComponentFlags.String("component-name", "REQUIRED", "Name of component to delete")

		dSLEditorDeleteRelationshipFlags    = flag.NewFlagSet("delete-relationship", flag.ExitOnError)
		dSLEditorDeleteRelationshipBodyFlag = dSLEditorDeleteRelationshipFlags.String("body", "REQUIRED", "")

		packagesFlags = flag.NewFlagSet("packages", flag.ContinueOnError)

		packagesListWorkspacesFlags = flag.NewFlagSet("list-workspaces", flag.ExitOnError)

		packagesCreatePackageFlags         = flag.NewFlagSet("create-package", flag.ExitOnError)
		packagesCreatePackageBodyFlag      = packagesCreatePackageFlags.String("body", "REQUIRED", "")
		packagesCreatePackageWorkspaceFlag = packagesCreatePackageFlags.String("workspace", "REQUIRED", "")
		packagesCreatePackageDirFlag       = packagesCreatePackageFlags.String("dir", "REQUIRED", "")

		packagesDeletePackageFlags         = flag.NewFlagSet("delete-package", flag.ExitOnError)
		packagesDeletePackageWorkspaceFlag = packagesDeletePackageFlags.String("workspace", "REQUIRED", "")
		packagesDeletePackageDirFlag       = packagesDeletePackageFlags.String("dir", "REQUIRED", "")

		packagesListPackagesFlags         = flag.NewFlagSet("list-packages", flag.ExitOnError)
		packagesListPackagesWorkspaceFlag = packagesListPackagesFlags.String("workspace", "REQUIRED", "")

		packagesReadPackageFilesFlags         = flag.NewFlagSet("read-package-files", flag.ExitOnError)
		packagesReadPackageFilesWorkspaceFlag = packagesReadPackageFilesFlags.String("workspace", "REQUIRED", "")
		packagesReadPackageFilesDirFlag       = packagesReadPackageFilesFlags.String("dir", "REQUIRED", "")

		packagesSubscribeFlags         = flag.NewFlagSet("subscribe", flag.ExitOnError)
		packagesSubscribeWorkspaceFlag = packagesSubscribeFlags.String("workspace", "REQUIRED", "")
		packagesSubscribeDirFlag       = packagesSubscribeFlags.String("dir", "REQUIRED", "")

		sVGFlags = flag.NewFlagSet("svg", flag.ContinueOnError)

		sVGLoadFlags        = flag.NewFlagSet("load", flag.ExitOnError)
		sVGLoadFilenameFlag = sVGLoadFlags.String("filename", "REQUIRED", "")

		sVGSaveFlags        = flag.NewFlagSet("save", flag.ExitOnError)
		sVGSaveBodyFlag     = sVGSaveFlags.String("body", "REQUIRED", "")
		sVGSaveFilenameFlag = sVGSaveFlags.String("filename", "REQUIRED", "")
	)
	dSLEditorFlags.Usage = dSLEditorUsage
	dSLEditorUpdateDSLFlags.Usage = dSLEditorUpdateDSLUsage
	dSLEditorUpsertSystemFlags.Usage = dSLEditorUpsertSystemUsage
	dSLEditorUpsertPersonFlags.Usage = dSLEditorUpsertPersonUsage
	dSLEditorUpsertContainerFlags.Usage = dSLEditorUpsertContainerUsage
	dSLEditorUpsertComponentFlags.Usage = dSLEditorUpsertComponentUsage
	dSLEditorUpsertRelationshipFlags.Usage = dSLEditorUpsertRelationshipUsage
	dSLEditorDeleteSystemFlags.Usage = dSLEditorDeleteSystemUsage
	dSLEditorDeletePersonFlags.Usage = dSLEditorDeletePersonUsage
	dSLEditorDeleteContainerFlags.Usage = dSLEditorDeleteContainerUsage
	dSLEditorDeleteComponentFlags.Usage = dSLEditorDeleteComponentUsage
	dSLEditorDeleteRelationshipFlags.Usage = dSLEditorDeleteRelationshipUsage

	packagesFlags.Usage = packagesUsage
	packagesListWorkspacesFlags.Usage = packagesListWorkspacesUsage
	packagesCreatePackageFlags.Usage = packagesCreatePackageUsage
	packagesDeletePackageFlags.Usage = packagesDeletePackageUsage
	packagesListPackagesFlags.Usage = packagesListPackagesUsage
	packagesReadPackageFilesFlags.Usage = packagesReadPackageFilesUsage
	packagesSubscribeFlags.Usage = packagesSubscribeUsage

	sVGFlags.Usage = sVGUsage
	sVGLoadFlags.Usage = sVGLoadUsage
	sVGSaveFlags.Usage = sVGSaveUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "dsl-editor":
			svcf = dSLEditorFlags
		case "packages":
			svcf = packagesFlags
		case "svg":
			svcf = sVGFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "dsl-editor":
			switch epn {
			case "update-dsl":
				epf = dSLEditorUpdateDSLFlags

			case "upsert-system":
				epf = dSLEditorUpsertSystemFlags

			case "upsert-person":
				epf = dSLEditorUpsertPersonFlags

			case "upsert-container":
				epf = dSLEditorUpsertContainerFlags

			case "upsert-component":
				epf = dSLEditorUpsertComponentFlags

			case "upsert-relationship":
				epf = dSLEditorUpsertRelationshipFlags

			case "delete-system":
				epf = dSLEditorDeleteSystemFlags

			case "delete-person":
				epf = dSLEditorDeletePersonFlags

			case "delete-container":
				epf = dSLEditorDeleteContainerFlags

			case "delete-component":
				epf = dSLEditorDeleteComponentFlags

			case "delete-relationship":
				epf = dSLEditorDeleteRelationshipFlags

			}

		case "packages":
			switch epn {
			case "list-workspaces":
				epf = packagesListWorkspacesFlags

			case "create-package":
				epf = packagesCreatePackageFlags

			case "delete-package":
				epf = packagesDeletePackageFlags

			case "list-packages":
				epf = packagesListPackagesFlags

			case "read-package-files":
				epf = packagesReadPackageFilesFlags

			case "subscribe":
				epf = packagesSubscribeFlags

			}

		case "svg":
			switch epn {
			case "load":
				epf = sVGLoadFlags

			case "save":
				epf = sVGSaveFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "dsl-editor":
			c := dsleditorc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "update-dsl":
				endpoint = c.UpdateDSL()
				data, err = dsleditorc.BuildUpdateDSLPayload(*dSLEditorUpdateDSLBodyFlag)
			case "upsert-system":
				endpoint = c.UpsertSystem()
				data, err = dsleditorc.BuildUpsertSystemPayload(*dSLEditorUpsertSystemBodyFlag)
			case "upsert-person":
				endpoint = c.UpsertPerson()
				data, err = dsleditorc.BuildUpsertPersonPayload(*dSLEditorUpsertPersonBodyFlag)
			case "upsert-container":
				endpoint = c.UpsertContainer()
				data, err = dsleditorc.BuildUpsertContainerPayload(*dSLEditorUpsertContainerBodyFlag)
			case "upsert-component":
				endpoint = c.UpsertComponent()
				data, err = dsleditorc.BuildUpsertComponentPayload(*dSLEditorUpsertComponentBodyFlag)
			case "upsert-relationship":
				endpoint = c.UpsertRelationship()
				data, err = dsleditorc.BuildUpsertRelationshipPayload(*dSLEditorUpsertRelationshipBodyFlag)
			case "delete-system":
				endpoint = c.DeleteSystem()
				data, err = dsleditorc.BuildDeleteSystemPayload(*dSLEditorDeleteSystemBodyFlag, *dSLEditorDeleteSystemSystemNameFlag)
			case "delete-person":
				endpoint = c.DeletePerson()
				data, err = dsleditorc.BuildDeletePersonPayload(*dSLEditorDeletePersonBodyFlag, *dSLEditorDeletePersonPersonNameFlag)
			case "delete-container":
				endpoint = c.DeleteContainer()
				data, err = dsleditorc.BuildDeleteContainerPayload(*dSLEditorDeleteContainerBodyFlag, *dSLEditorDeleteContainerSystemNameFlag, *dSLEditorDeleteContainerContainerNameFlag)
			case "delete-component":
				endpoint = c.DeleteComponent()
				data, err = dsleditorc.BuildDeleteComponentPayload(*dSLEditorDeleteComponentBodyFlag, *dSLEditorDeleteComponentSystemNameFlag, *dSLEditorDeleteComponentContainerNameFlag, *dSLEditorDeleteComponentComponentNameFlag)
			case "delete-relationship":
				endpoint = c.DeleteRelationship()
				data, err = dsleditorc.BuildDeleteRelationshipPayload(*dSLEditorDeleteRelationshipBodyFlag)
			}
		case "packages":
			c := packagesc.NewClient(scheme, host, doer, enc, dec, restore, dialer, packagesConfigurer)
			switch epn {
			case "list-workspaces":
				endpoint = c.ListWorkspaces()
				data = nil
			case "create-package":
				endpoint = c.CreatePackage()
				data, err = packagesc.BuildCreatePackagePayload(*packagesCreatePackageBodyFlag, *packagesCreatePackageWorkspaceFlag, *packagesCreatePackageDirFlag)
			case "delete-package":
				endpoint = c.DeletePackage()
				data, err = packagesc.BuildDeletePackagePayload(*packagesDeletePackageWorkspaceFlag, *packagesDeletePackageDirFlag)
			case "list-packages":
				endpoint = c.ListPackages()
				data, err = packagesc.BuildListPackagesPayload(*packagesListPackagesWorkspaceFlag)
			case "read-package-files":
				endpoint = c.ReadPackageFiles()
				data, err = packagesc.BuildReadPackageFilesPayload(*packagesReadPackageFilesWorkspaceFlag, *packagesReadPackageFilesDirFlag)
			case "subscribe":
				endpoint = c.Subscribe()
				data, err = packagesc.BuildSubscribePayload(*packagesSubscribeWorkspaceFlag, *packagesSubscribeDirFlag)
			}
		case "svg":
			c := svgc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "load":
				endpoint = c.Load()
				data, err = svgc.BuildLoadPayload(*sVGLoadFilenameFlag)
			case "save":
				endpoint = c.Save()
				data, err = svgc.BuildSavePayload(*sVGSaveBodyFlag, *sVGSaveFilenameFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// dsl-editorUsage displays the usage of the dsl-editor command and its
// subcommands.
func dSLEditorUsage() {
	fmt.Fprintf(os.Stderr, `Service is the DSLEditor service interface.
Usage:
    %[1]s [globalflags] dsl-editor COMMAND [flags]

COMMAND:
    update-dsl: Update the DSL for the given package, compile it and return the corresponding JSON if successful
    upsert-system: Create or update a software system in the model
    upsert-person: Create or update a person in the model
    upsert-container: Create or update a container in the model
    upsert-component: Create or update a component in the model
    upsert-relationship: Create or update a relationship in the model
    delete-system: Delete an existing software system from the model
    delete-person: Delete an existing person from the model
    delete-container: Delete an existing container from the model
    delete-component: Delete an existing component from the model
    delete-relationship: Delete an existing relationship from the model

Additional help:
    %[1]s dsl-editor COMMAND --help
`, os.Args[0])
}
func dSLEditorUpdateDSLUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor update-dsl -body JSON

Update the DSL for the given package, compile it and return the corresponding JSON if successful
    -body JSON: 

Example:
    %[1]s dsl-editor update-dsl --body '{
      "Content": "import . \"goa.design/model/dsl\"\n\nvar _ = Design(func() {})",
      "Locator": {
         "Dir": "src/repo/model",
         "Filename": "model.go",
         "Workspace": "my-workspace"
      }
   }'
`, os.Args[0])
}

func dSLEditorUpsertSystemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-system -body JSON

Create or update a software system in the model
    -body JSON: 

Example:
    %[1]s dsl-editor upsert-system --body '{
      "Description": "System description",
      "Location": "Internal",
      "Locator": {
         "Dir": "src/repo/model",
         "Filename": "model.go",
         "Workspace": "my-workspace"
      },
      "Name": "System",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "URL": "https://system.com"
   }'
`, os.Args[0])
}

func dSLEditorUpsertPersonUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-person -body JSON

Create or update a person in the model
    -body JSON: 

Example:
    %[1]s dsl-editor upsert-person --body '{
      "Description": "Person description",
      "Location": "Internal",
      "Locator": {
         "Dir": "src/repo/model",
         "Filename": "model.go",
         "Workspace": "my-workspace"
      },
      "Name": "Person",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "URL": "https://person.com"
   }'
`, os.Args[0])
}

func dSLEditorUpsertContainerUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-container -body JSON

Create or update a container in the model
    -body JSON: 

Example:
    %[1]s dsl-editor upsert-container --body '{
      "Description": "Container description",
      "Locator": {
         "Dir": "src/repo/model",
         "Filename": "model.go",
         "Workspace": "my-workspace"
      },
      "Name": "Container",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "SystemName": "My System",
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "Technology": "Technology",
      "URL": "https://container.com"
   }'
`, os.Args[0])
}

func dSLEditorUpsertComponentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-component -body JSON

Create or update a component in the model
    -body JSON: 

Example:
    %[1]s dsl-editor upsert-component --body '{
      "ContainerName": "My Container",
      "Description": "Component description",
      "Locator": {
         "Dir": "src/repo/model",
         "Filename": "model.go",
         "Workspace": "my-workspace"
      },
      "Name": "Component",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "SystemName": "My System",
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "Technology": "Technology",
      "URL": "https://component.com"
   }'
`, os.Args[0])
}

func dSLEditorUpsertRelationshipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-relationship -body JSON

Create or update a relationship in the model
    -body JSON: 

Example:
    %[1]s dsl-editor upsert-relationship --body '{
      "Description": "Relationship description",
      "DestinationPath": "Software System/Container/Component",
      "InteractionStyle": "Asynchronous",
      "Locator": {
         "Dir": "src/repo/model",
         "Filename": "model.go",
         "Workspace": "my-workspace"
      },
      "SourcePath": "Software System/Container/Component",
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "Technology": "Technology",
      "URL": "https://relationship.com"
   }'
`, os.Args[0])
}

func dSLEditorDeleteSystemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-system -body JSON -system-name STRING

Delete an existing software system from the model
    -body JSON: 
    -system-name STRING: Name of software system to delete

Example:
    %[1]s dsl-editor delete-system --body '{
      "Dir": "src/repo/model",
      "Filename": "model.go",
      "Workspace": "my-workspace"
   }' --system-name "Maxime sapiente eum dolorem eum."
`, os.Args[0])
}

func dSLEditorDeletePersonUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-person -body JSON -person-name STRING

Delete an existing person from the model
    -body JSON: 
    -person-name STRING: Name of person to delete

Example:
    %[1]s dsl-editor delete-person --body '{
      "Dir": "src/repo/model",
      "Filename": "model.go",
      "Workspace": "my-workspace"
   }' --person-name "Tempora non est magnam dicta."
`, os.Args[0])
}

func dSLEditorDeleteContainerUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-container -body JSON -system-name STRING -container-name STRING

Delete an existing container from the model
    -body JSON: 
    -system-name STRING: Name of container software system
    -container-name STRING: Name of container to delete

Example:
    %[1]s dsl-editor delete-container --body '{
      "Dir": "src/repo/model",
      "Filename": "model.go",
      "Workspace": "my-workspace"
   }' --system-name "Velit minus impedit molestias." --container-name "Velit quod totam vel laudantium impedit voluptatem."
`, os.Args[0])
}

func dSLEditorDeleteComponentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-component -body JSON -system-name STRING -container-name STRING -component-name STRING

Delete an existing component from the model
    -body JSON: 
    -system-name STRING: Name of component software system
    -container-name STRING: Name of component software system
    -component-name STRING: Name of component to delete

Example:
    %[1]s dsl-editor delete-component --body '{
      "Dir": "src/repo/model",
      "Filename": "model.go",
      "Workspace": "my-workspace"
   }' --system-name "My System" --container-name "My Container" --component-name "My Component"
`, os.Args[0])
}

func dSLEditorDeleteRelationshipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-relationship -body JSON

Delete an existing relationship from the model
    -body JSON: 

Example:
    %[1]s dsl-editor delete-relationship --body '{
      "DestinationPath": "Software System/Container/Component",
      "Dir": "src/repo/model",
      "Filename": "model.go",
      "SourcePath": "Software System/Container/Component",
      "Workspace": "my-workspace"
   }'
`, os.Args[0])
}

// packagesUsage displays the usage of the packages command and its subcommands.
func packagesUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Packages service interface.
Usage:
    %[1]s [globalflags] packages COMMAND [flags]

COMMAND:
    list-workspaces: List the known workspaces
    create-package: Create a new model package in the given workspace
    delete-package: Delete the given model package
    list-packages: List the model packages in the given workspace
    read-package-files: Get the DSL files and their content for the given model package
    subscribe: Send model JSON on initial subscription and when the model package changes

Additional help:
    %[1]s packages COMMAND --help
`, os.Args[0])
}
func packagesListWorkspacesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages list-workspaces

List the known workspaces

Example:
    %[1]s packages list-workspaces
`, os.Args[0])
}

func packagesCreatePackageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages create-package -body JSON -workspace STRING -dir STRING

Create a new model package in the given workspace
    -body JSON: 
    -workspace STRING: 
    -dir STRING: 

Example:
    %[1]s packages create-package --body '{
      "Content": "import . \"goa.design/model/dsl\"\n\nvar _ = Design(\"System Design\", func() {\n\n})"
   }' --workspace "my-workspace" --dir "src/repo/model"
`, os.Args[0])
}

func packagesDeletePackageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages delete-package -workspace STRING -dir STRING

Delete the given model package
    -workspace STRING: 
    -dir STRING: 

Example:
    %[1]s packages delete-package --workspace "my-workspace" --dir "src/repo/model"
`, os.Args[0])
}

func packagesListPackagesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages list-packages -workspace STRING

List the model packages in the given workspace
    -workspace STRING: 

Example:
    %[1]s packages list-packages --workspace "my-workspace"
`, os.Args[0])
}

func packagesReadPackageFilesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages read-package-files -workspace STRING -dir STRING

Get the DSL files and their content for the given model package
    -workspace STRING: 
    -dir STRING: 

Example:
    %[1]s packages read-package-files --workspace "my-workspace" --dir "src/repo/model"
`, os.Args[0])
}

func packagesSubscribeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages subscribe -workspace STRING -dir STRING

Send model JSON on initial subscription and when the model package changes
    -workspace STRING: 
    -dir STRING: 

Example:
    %[1]s packages subscribe --workspace "my-workspace" --dir "src/repo/model"
`, os.Args[0])
}

// svgUsage displays the usage of the svg command and its subcommands.
func sVGUsage() {
	fmt.Fprintf(os.Stderr, `Service is the SVG service interface.
Usage:
    %[1]s [globalflags] svg COMMAND [flags]

COMMAND:
    load: Stream the model layout JSON saved in the SVG
    save: Save the SVG streamed in the request body

Additional help:
    %[1]s svg COMMAND --help
`, os.Args[0])
}
func sVGLoadUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svg load -filename STRING

Stream the model layout JSON saved in the SVG
    -filename STRING: 

Example:
    %[1]s svg load --filename "diagram.svg"
`, os.Args[0])
}

func sVGSaveUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svg save -body JSON -filename STRING

Save the SVG streamed in the request body
    -body JSON: 
    -filename STRING: 

Example:
    %[1]s svg save --body '{
      "SVG": "\u003csvg�\u003c/svg\u003e"
   }' --filename "diagram.svg"
`, os.Args[0])
}
