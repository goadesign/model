// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Assets HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	dsleditorc "goa.design/model/mdlsvc/gen/http/dsl_editor/client"
	packagesc "goa.design/model/mdlsvc/gen/http/packages/client"
	svgc "goa.design/model/mdlsvc/gen/http/svg/client"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `dsl-editor (upsert-system|upsert-person|upsert-container|upsert-component|upsert-relationship|delete-system|delete-person|delete-container|delete-component|delete-relationship)
packages (list-packages|subscribe|upload|get-model)
svg (load|save)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` dsl-editor upsert-system --body '{
      "Description": "System description",
      "Location": "External",
      "Name": "System",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "URL": "https://system.com"
   }' --package-path "goa.design/model/examples/basic/model"` + "\n" +
		os.Args[0] + ` packages list-packages` + "\n" +
		os.Args[0] + ` svg load --filename "diagram.svg"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	dialer goahttp.Dialer,
	packagesConfigurer *packagesc.ConnConfigurer,
) (goa.Endpoint, any, error) {
	var (
		dSLEditorFlags = flag.NewFlagSet("dsl-editor", flag.ContinueOnError)

		dSLEditorUpsertSystemFlags           = flag.NewFlagSet("upsert-system", flag.ExitOnError)
		dSLEditorUpsertSystemBodyFlag        = dSLEditorUpsertSystemFlags.String("body", "REQUIRED", "")
		dSLEditorUpsertSystemPackagePathFlag = dSLEditorUpsertSystemFlags.String("package-path", "REQUIRED", "")

		dSLEditorUpsertPersonFlags           = flag.NewFlagSet("upsert-person", flag.ExitOnError)
		dSLEditorUpsertPersonBodyFlag        = dSLEditorUpsertPersonFlags.String("body", "REQUIRED", "")
		dSLEditorUpsertPersonPackagePathFlag = dSLEditorUpsertPersonFlags.String("package-path", "REQUIRED", "")

		dSLEditorUpsertContainerFlags           = flag.NewFlagSet("upsert-container", flag.ExitOnError)
		dSLEditorUpsertContainerBodyFlag        = dSLEditorUpsertContainerFlags.String("body", "REQUIRED", "")
		dSLEditorUpsertContainerPackagePathFlag = dSLEditorUpsertContainerFlags.String("package-path", "REQUIRED", "")

		dSLEditorUpsertComponentFlags           = flag.NewFlagSet("upsert-component", flag.ExitOnError)
		dSLEditorUpsertComponentBodyFlag        = dSLEditorUpsertComponentFlags.String("body", "REQUIRED", "")
		dSLEditorUpsertComponentPackagePathFlag = dSLEditorUpsertComponentFlags.String("package-path", "REQUIRED", "")

		dSLEditorUpsertRelationshipFlags           = flag.NewFlagSet("upsert-relationship", flag.ExitOnError)
		dSLEditorUpsertRelationshipBodyFlag        = dSLEditorUpsertRelationshipFlags.String("body", "REQUIRED", "")
		dSLEditorUpsertRelationshipPackagePathFlag = dSLEditorUpsertRelationshipFlags.String("package-path", "REQUIRED", "")

		dSLEditorDeleteSystemFlags           = flag.NewFlagSet("delete-system", flag.ExitOnError)
		dSLEditorDeleteSystemNameFlag        = dSLEditorDeleteSystemFlags.String("name", "REQUIRED", "Name of software system to delete")
		dSLEditorDeleteSystemPackagePathFlag = dSLEditorDeleteSystemFlags.String("package-path", "REQUIRED", "")

		dSLEditorDeletePersonFlags           = flag.NewFlagSet("delete-person", flag.ExitOnError)
		dSLEditorDeletePersonNameFlag        = dSLEditorDeletePersonFlags.String("name", "REQUIRED", "Name of person to delete")
		dSLEditorDeletePersonPackagePathFlag = dSLEditorDeletePersonFlags.String("package-path", "REQUIRED", "")

		dSLEditorDeleteContainerFlags           = flag.NewFlagSet("delete-container", flag.ExitOnError)
		dSLEditorDeleteContainerSystemNameFlag  = dSLEditorDeleteContainerFlags.String("system-name", "REQUIRED", "Name of container software system")
		dSLEditorDeleteContainerNameFlag        = dSLEditorDeleteContainerFlags.String("name", "REQUIRED", "Name of container to delete")
		dSLEditorDeleteContainerPackagePathFlag = dSLEditorDeleteContainerFlags.String("package-path", "REQUIRED", "")

		dSLEditorDeleteComponentFlags             = flag.NewFlagSet("delete-component", flag.ExitOnError)
		dSLEditorDeleteComponentSystemNameFlag    = dSLEditorDeleteComponentFlags.String("system-name", "REQUIRED", "Name of component software system")
		dSLEditorDeleteComponentContainerNameFlag = dSLEditorDeleteComponentFlags.String("container-name", "REQUIRED", "Name of component software system")
		dSLEditorDeleteComponentNameFlag          = dSLEditorDeleteComponentFlags.String("name", "REQUIRED", "Name of component to delete")
		dSLEditorDeleteComponentPackagePathFlag   = dSLEditorDeleteComponentFlags.String("package-path", "REQUIRED", "")

		dSLEditorDeleteRelationshipFlags               = flag.NewFlagSet("delete-relationship", flag.ExitOnError)
		dSLEditorDeleteRelationshipSourcePathFlag      = dSLEditorDeleteRelationshipFlags.String("source-path", "REQUIRED", "Path to source element consisting of <software system name>[/<container name>[/<component name>]]")
		dSLEditorDeleteRelationshipDestinationPathFlag = dSLEditorDeleteRelationshipFlags.String("destination-path", "REQUIRED", "Path to destination element, see SourcePath for details.")
		dSLEditorDeleteRelationshipPackagePathFlag     = dSLEditorDeleteRelationshipFlags.String("package-path", "REQUIRED", "")

		packagesFlags = flag.NewFlagSet("packages", flag.ContinueOnError)

		packagesListPackagesFlags = flag.NewFlagSet("list-packages", flag.ExitOnError)

		packagesSubscribeFlags           = flag.NewFlagSet("subscribe", flag.ExitOnError)
		packagesSubscribePackagePathFlag = packagesSubscribeFlags.String("package-path", "REQUIRED", "")

		packagesUploadFlags           = flag.NewFlagSet("upload", flag.ExitOnError)
		packagesUploadPackagePathFlag = packagesUploadFlags.String("package-path", "REQUIRED", "")
		packagesUploadStreamFlag      = packagesUploadFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		packagesGetModelFlags           = flag.NewFlagSet("get-model", flag.ExitOnError)
		packagesGetModelPackagePathFlag = packagesGetModelFlags.String("package-path", "REQUIRED", "")

		sVGFlags = flag.NewFlagSet("svg", flag.ContinueOnError)

		sVGLoadFlags        = flag.NewFlagSet("load", flag.ExitOnError)
		sVGLoadFilenameFlag = sVGLoadFlags.String("filename", "REQUIRED", "")

		sVGSaveFlags        = flag.NewFlagSet("save", flag.ExitOnError)
		sVGSaveFilenameFlag = sVGSaveFlags.String("filename", "REQUIRED", "")
		sVGSaveStreamFlag   = sVGSaveFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")
	)
	dSLEditorFlags.Usage = dSLEditorUsage
	dSLEditorUpsertSystemFlags.Usage = dSLEditorUpsertSystemUsage
	dSLEditorUpsertPersonFlags.Usage = dSLEditorUpsertPersonUsage
	dSLEditorUpsertContainerFlags.Usage = dSLEditorUpsertContainerUsage
	dSLEditorUpsertComponentFlags.Usage = dSLEditorUpsertComponentUsage
	dSLEditorUpsertRelationshipFlags.Usage = dSLEditorUpsertRelationshipUsage
	dSLEditorDeleteSystemFlags.Usage = dSLEditorDeleteSystemUsage
	dSLEditorDeletePersonFlags.Usage = dSLEditorDeletePersonUsage
	dSLEditorDeleteContainerFlags.Usage = dSLEditorDeleteContainerUsage
	dSLEditorDeleteComponentFlags.Usage = dSLEditorDeleteComponentUsage
	dSLEditorDeleteRelationshipFlags.Usage = dSLEditorDeleteRelationshipUsage

	packagesFlags.Usage = packagesUsage
	packagesListPackagesFlags.Usage = packagesListPackagesUsage
	packagesSubscribeFlags.Usage = packagesSubscribeUsage
	packagesUploadFlags.Usage = packagesUploadUsage
	packagesGetModelFlags.Usage = packagesGetModelUsage

	sVGFlags.Usage = sVGUsage
	sVGLoadFlags.Usage = sVGLoadUsage
	sVGSaveFlags.Usage = sVGSaveUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "dsl-editor":
			svcf = dSLEditorFlags
		case "packages":
			svcf = packagesFlags
		case "svg":
			svcf = sVGFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "dsl-editor":
			switch epn {
			case "upsert-system":
				epf = dSLEditorUpsertSystemFlags

			case "upsert-person":
				epf = dSLEditorUpsertPersonFlags

			case "upsert-container":
				epf = dSLEditorUpsertContainerFlags

			case "upsert-component":
				epf = dSLEditorUpsertComponentFlags

			case "upsert-relationship":
				epf = dSLEditorUpsertRelationshipFlags

			case "delete-system":
				epf = dSLEditorDeleteSystemFlags

			case "delete-person":
				epf = dSLEditorDeletePersonFlags

			case "delete-container":
				epf = dSLEditorDeleteContainerFlags

			case "delete-component":
				epf = dSLEditorDeleteComponentFlags

			case "delete-relationship":
				epf = dSLEditorDeleteRelationshipFlags

			}

		case "packages":
			switch epn {
			case "list-packages":
				epf = packagesListPackagesFlags

			case "subscribe":
				epf = packagesSubscribeFlags

			case "upload":
				epf = packagesUploadFlags

			case "get-model":
				epf = packagesGetModelFlags

			}

		case "svg":
			switch epn {
			case "load":
				epf = sVGLoadFlags

			case "save":
				epf = sVGSaveFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "dsl-editor":
			c := dsleditorc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "upsert-system":
				endpoint = c.UpsertSystem()
				data, err = dsleditorc.BuildUpsertSystemPayload(*dSLEditorUpsertSystemBodyFlag, *dSLEditorUpsertSystemPackagePathFlag)
			case "upsert-person":
				endpoint = c.UpsertPerson()
				data, err = dsleditorc.BuildUpsertPersonPayload(*dSLEditorUpsertPersonBodyFlag, *dSLEditorUpsertPersonPackagePathFlag)
			case "upsert-container":
				endpoint = c.UpsertContainer()
				data, err = dsleditorc.BuildUpsertContainerPayload(*dSLEditorUpsertContainerBodyFlag, *dSLEditorUpsertContainerPackagePathFlag)
			case "upsert-component":
				endpoint = c.UpsertComponent()
				data, err = dsleditorc.BuildUpsertComponentPayload(*dSLEditorUpsertComponentBodyFlag, *dSLEditorUpsertComponentPackagePathFlag)
			case "upsert-relationship":
				endpoint = c.UpsertRelationship()
				data, err = dsleditorc.BuildUpsertRelationshipPayload(*dSLEditorUpsertRelationshipBodyFlag, *dSLEditorUpsertRelationshipPackagePathFlag)
			case "delete-system":
				endpoint = c.DeleteSystem()
				data, err = dsleditorc.BuildDeleteSystemPayload(*dSLEditorDeleteSystemNameFlag, *dSLEditorDeleteSystemPackagePathFlag)
			case "delete-person":
				endpoint = c.DeletePerson()
				data, err = dsleditorc.BuildDeletePersonPayload(*dSLEditorDeletePersonNameFlag, *dSLEditorDeletePersonPackagePathFlag)
			case "delete-container":
				endpoint = c.DeleteContainer()
				data, err = dsleditorc.BuildDeleteContainerPayload(*dSLEditorDeleteContainerSystemNameFlag, *dSLEditorDeleteContainerNameFlag, *dSLEditorDeleteContainerPackagePathFlag)
			case "delete-component":
				endpoint = c.DeleteComponent()
				data, err = dsleditorc.BuildDeleteComponentPayload(*dSLEditorDeleteComponentSystemNameFlag, *dSLEditorDeleteComponentContainerNameFlag, *dSLEditorDeleteComponentNameFlag, *dSLEditorDeleteComponentPackagePathFlag)
			case "delete-relationship":
				endpoint = c.DeleteRelationship()
				data, err = dsleditorc.BuildDeleteRelationshipPayload(*dSLEditorDeleteRelationshipSourcePathFlag, *dSLEditorDeleteRelationshipDestinationPathFlag, *dSLEditorDeleteRelationshipPackagePathFlag)
			}
		case "packages":
			c := packagesc.NewClient(scheme, host, doer, enc, dec, restore, dialer, packagesConfigurer)
			switch epn {
			case "list-packages":
				endpoint = c.ListPackages()
				data = nil
			case "subscribe":
				endpoint = c.Subscribe()
				data, err = packagesc.BuildSubscribePayload(*packagesSubscribePackagePathFlag)
			case "upload":
				endpoint = c.Upload()
				data, err = packagesc.BuildUploadPayload(*packagesUploadPackagePathFlag)
				if err == nil {
					data, err = packagesc.BuildUploadStreamPayload(data, *packagesUploadStreamFlag)
				}
			case "get-model":
				endpoint = c.GetModel()
				data, err = packagesc.BuildGetModelPayload(*packagesGetModelPackagePathFlag)
			}
		case "svg":
			c := svgc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "load":
				endpoint = c.Load()
				data, err = svgc.BuildLoadPayload(*sVGLoadFilenameFlag)
			case "save":
				endpoint = c.Save()
				data, err = svgc.BuildSavePayload(*sVGSaveFilenameFlag)
				if err == nil {
					data, err = svgc.BuildSaveStreamPayload(data, *sVGSaveStreamFlag)
				}
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// dsl-editorUsage displays the usage of the dsl-editor command and its
// subcommands.
func dSLEditorUsage() {
	fmt.Fprintf(os.Stderr, `Service is the DSLEditor service interface.
Usage:
    %[1]s [globalflags] dsl-editor COMMAND [flags]

COMMAND:
    upsert-system: Create or update a software system in the model
    upsert-person: Create or update a person in the model
    upsert-container: Create or update a container in the model
    upsert-component: Create or update a component in the model
    upsert-relationship: Create or update a relationship in the model
    delete-system: Delete an existing software system from the model
    delete-person: Delete an existing person from the model
    delete-container: Delete an existing container from the model
    delete-component: Delete an existing component from the model
    delete-relationship: Delete an existing relationship from the model

Additional help:
    %[1]s dsl-editor COMMAND --help
`, os.Args[0])
}
func dSLEditorUpsertSystemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-system -body JSON -package-path STRING

Create or update a software system in the model
    -body JSON: 
    -package-path STRING: 

Example:
    %[1]s dsl-editor upsert-system --body '{
      "Description": "System description",
      "Location": "External",
      "Name": "System",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "URL": "https://system.com"
   }' --package-path "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func dSLEditorUpsertPersonUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-person -body JSON -package-path STRING

Create or update a person in the model
    -body JSON: 
    -package-path STRING: 

Example:
    %[1]s dsl-editor upsert-person --body '{
      "Description": "Person description",
      "Location": "Internal",
      "Name": "Person",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "URL": "https://person.com"
   }' --package-path "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func dSLEditorUpsertContainerUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-container -body JSON -package-path STRING

Create or update a container in the model
    -body JSON: 
    -package-path STRING: 

Example:
    %[1]s dsl-editor upsert-container --body '{
      "Description": "Container description",
      "Name": "Container",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "SystemName": "My System",
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "Technology": "Technology",
      "URL": "https://container.com"
   }' --package-path "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func dSLEditorUpsertComponentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-component -body JSON -package-path STRING

Create or update a component in the model
    -body JSON: 
    -package-path STRING: 

Example:
    %[1]s dsl-editor upsert-component --body '{
      "ContainerName": "My Container",
      "Description": "Component description",
      "Name": "Component",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "SystemName": "My System",
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "Technology": "Technology",
      "URL": "https://component.com"
   }' --package-path "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func dSLEditorUpsertRelationshipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-relationship -body JSON -package-path STRING

Create or update a relationship in the model
    -body JSON: 
    -package-path STRING: 

Example:
    %[1]s dsl-editor upsert-relationship --body '{
      "Description": "Relationship description",
      "DestinationPath": "Software System/Container/Component",
      "InteractionStyle": "Asynchronous",
      "SourcePath": "Software System/Container/Component",
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "Technology": "Technology",
      "URL": "https://relationship.com"
   }' --package-path "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func dSLEditorDeleteSystemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-system -name STRING -package-path STRING

Delete an existing software system from the model
    -name STRING: Name of software system to delete
    -package-path STRING: 

Example:
    %[1]s dsl-editor delete-system --name "Illo dolore aut." --package-path "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func dSLEditorDeletePersonUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-person -name STRING -package-path STRING

Delete an existing person from the model
    -name STRING: Name of person to delete
    -package-path STRING: 

Example:
    %[1]s dsl-editor delete-person --name "Voluptate sint voluptate non et." --package-path "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func dSLEditorDeleteContainerUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-container -system-name STRING -name STRING -package-path STRING

Delete an existing container from the model
    -system-name STRING: Name of container software system
    -name STRING: Name of container to delete
    -package-path STRING: 

Example:
    %[1]s dsl-editor delete-container --system-name "Ut dolor non quos molestiae velit suscipit." --name "Id tempora." --package-path "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func dSLEditorDeleteComponentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-component -system-name STRING -container-name STRING -name STRING -package-path STRING

Delete an existing component from the model
    -system-name STRING: Name of component software system
    -container-name STRING: Name of component software system
    -name STRING: Name of component to delete
    -package-path STRING: 

Example:
    %[1]s dsl-editor delete-component --system-name "My System" --container-name "My Container" --name "My Component" --package-path "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func dSLEditorDeleteRelationshipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-relationship -source-path STRING -destination-path STRING -package-path STRING

Delete an existing relationship from the model
    -source-path STRING: Path to source element consisting of <software system name>[/<container name>[/<component name>]]
    -destination-path STRING: Path to destination element, see SourcePath for details.
    -package-path STRING: 

Example:
    %[1]s dsl-editor delete-relationship --source-path "Software System/Container/Component" --destination-path "Software System/Container/Component" --package-path "goa.design/model/examples/basic/model"
`, os.Args[0])
}

// packagesUsage displays the usage of the packages command and its subcommands.
func packagesUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Packages service interface.
Usage:
    %[1]s [globalflags] packages COMMAND [flags]

COMMAND:
    list-packages: List the model packages in the current Go workspace
    subscribe: WebSocket endpoint for subscribing to updates to a package
    upload: Upload the package content, compile it and return the corresponding JSON
    get-model: Stream the model JSON for the given package, see https://pkg.go.dev/goa.design/model/model#Model

Additional help:
    %[1]s packages COMMAND --help
`, os.Args[0])
}
func packagesListPackagesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages list-packages

List the model packages in the current Go workspace

Example:
    %[1]s packages list-packages
`, os.Args[0])
}

func packagesSubscribeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages subscribe -package-path STRING

WebSocket endpoint for subscribing to updates to a package
    -package-path STRING: 

Example:
    %[1]s packages subscribe --package-path "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func packagesUploadUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages upload -package-path STRING -stream STRING

Upload the package content, compile it and return the corresponding JSON
    -package-path STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    %[1]s packages upload --package-path "goa.design/model/examples/basic/model" --stream "goa.png"
`, os.Args[0])
}

func packagesGetModelUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages get-model -package-path STRING

Stream the model JSON for the given package, see https://pkg.go.dev/goa.design/model/model#Model
    -package-path STRING: 

Example:
    %[1]s packages get-model --package-path "goa.design/model/examples/basic/model"
`, os.Args[0])
}

// svgUsage displays the usage of the svg command and its subcommands.
func sVGUsage() {
	fmt.Fprintf(os.Stderr, `Service is the SVG service interface.
Usage:
    %[1]s [globalflags] svg COMMAND [flags]

COMMAND:
    load: Stream the model layout JSON saved in the SVG
    save: Save the SVG streamed in the request body

Additional help:
    %[1]s svg COMMAND --help
`, os.Args[0])
}
func sVGLoadUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svg load -filename STRING

Stream the model layout JSON saved in the SVG
    -filename STRING: 

Example:
    %[1]s svg load --filename "diagram.svg"
`, os.Args[0])
}

func sVGSaveUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svg save -filename STRING -stream STRING

Save the SVG streamed in the request body
    -filename STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    %[1]s svg save --filename "diagram.svg" --stream "goa.png"
`, os.Args[0])
}
