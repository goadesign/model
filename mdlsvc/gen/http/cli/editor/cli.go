// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Editor HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	editorc "goa.design/model/mdlsvc/gen/http/editor/client"
	modulec "goa.design/model/mdlsvc/gen/http/module/client"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `editor (upsert-system|upsert-person|upsert-container|upsert-component|upsert-relationship|delete-system|delete-person|delete-container|delete-component|delete-relationship)
module (list-modules|subscribe|get-model|compile|get-layout|write-diagram)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` editor upsert-system --body '{
      "Description": "System description",
      "Location": "External",
      "Name": "System",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "URL": "https://system.com"
   }' --go-mod "goa.design/model/examples/basic/model"` + "\n" +
		os.Args[0] + ` module list-modules` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	dialer goahttp.Dialer,
	moduleConfigurer *modulec.ConnConfigurer,
) (goa.Endpoint, any, error) {
	var (
		editorFlags = flag.NewFlagSet("editor", flag.ContinueOnError)

		editorUpsertSystemFlags     = flag.NewFlagSet("upsert-system", flag.ExitOnError)
		editorUpsertSystemBodyFlag  = editorUpsertSystemFlags.String("body", "REQUIRED", "")
		editorUpsertSystemGoModFlag = editorUpsertSystemFlags.String("go-mod", "REQUIRED", "")

		editorUpsertPersonFlags     = flag.NewFlagSet("upsert-person", flag.ExitOnError)
		editorUpsertPersonBodyFlag  = editorUpsertPersonFlags.String("body", "REQUIRED", "")
		editorUpsertPersonGoModFlag = editorUpsertPersonFlags.String("go-mod", "REQUIRED", "")

		editorUpsertContainerFlags     = flag.NewFlagSet("upsert-container", flag.ExitOnError)
		editorUpsertContainerBodyFlag  = editorUpsertContainerFlags.String("body", "REQUIRED", "")
		editorUpsertContainerGoModFlag = editorUpsertContainerFlags.String("go-mod", "REQUIRED", "")

		editorUpsertComponentFlags     = flag.NewFlagSet("upsert-component", flag.ExitOnError)
		editorUpsertComponentBodyFlag  = editorUpsertComponentFlags.String("body", "REQUIRED", "")
		editorUpsertComponentGoModFlag = editorUpsertComponentFlags.String("go-mod", "REQUIRED", "")

		editorUpsertRelationshipFlags     = flag.NewFlagSet("upsert-relationship", flag.ExitOnError)
		editorUpsertRelationshipBodyFlag  = editorUpsertRelationshipFlags.String("body", "REQUIRED", "")
		editorUpsertRelationshipGoModFlag = editorUpsertRelationshipFlags.String("go-mod", "REQUIRED", "")

		editorDeleteSystemFlags     = flag.NewFlagSet("delete-system", flag.ExitOnError)
		editorDeleteSystemNameFlag  = editorDeleteSystemFlags.String("name", "REQUIRED", "Name of software system to delete")
		editorDeleteSystemGoModFlag = editorDeleteSystemFlags.String("go-mod", "REQUIRED", "")

		editorDeletePersonFlags     = flag.NewFlagSet("delete-person", flag.ExitOnError)
		editorDeletePersonNameFlag  = editorDeletePersonFlags.String("name", "REQUIRED", "Name of person to delete")
		editorDeletePersonGoModFlag = editorDeletePersonFlags.String("go-mod", "REQUIRED", "")

		editorDeleteContainerFlags          = flag.NewFlagSet("delete-container", flag.ExitOnError)
		editorDeleteContainerSystemNameFlag = editorDeleteContainerFlags.String("system-name", "REQUIRED", "Name of container software system")
		editorDeleteContainerNameFlag       = editorDeleteContainerFlags.String("name", "REQUIRED", "Name of container to delete")
		editorDeleteContainerGoModFlag      = editorDeleteContainerFlags.String("go-mod", "REQUIRED", "")

		editorDeleteComponentFlags             = flag.NewFlagSet("delete-component", flag.ExitOnError)
		editorDeleteComponentSystemNameFlag    = editorDeleteComponentFlags.String("system-name", "REQUIRED", "Name of component software system")
		editorDeleteComponentContainerNameFlag = editorDeleteComponentFlags.String("container-name", "REQUIRED", "Name of component software system")
		editorDeleteComponentNameFlag          = editorDeleteComponentFlags.String("name", "REQUIRED", "Name of component to delete")
		editorDeleteComponentGoModFlag         = editorDeleteComponentFlags.String("go-mod", "REQUIRED", "")

		editorDeleteRelationshipFlags               = flag.NewFlagSet("delete-relationship", flag.ExitOnError)
		editorDeleteRelationshipSourcePathFlag      = editorDeleteRelationshipFlags.String("source-path", "REQUIRED", "Path to source element consisting of <software system name>[/<container name>[/<component name>]]")
		editorDeleteRelationshipDestinationPathFlag = editorDeleteRelationshipFlags.String("destination-path", "REQUIRED", "Path to destination element, see SourcePath for details.")
		editorDeleteRelationshipGoModFlag           = editorDeleteRelationshipFlags.String("go-mod", "REQUIRED", "")

		moduleFlags = flag.NewFlagSet("module", flag.ContinueOnError)

		moduleListModulesFlags = flag.NewFlagSet("list-modules", flag.ExitOnError)

		moduleSubscribeFlags     = flag.NewFlagSet("subscribe", flag.ExitOnError)
		moduleSubscribeGoModFlag = moduleSubscribeFlags.String("go-mod", "REQUIRED", "")

		moduleGetModelFlags     = flag.NewFlagSet("get-model", flag.ExitOnError)
		moduleGetModelGoModFlag = moduleGetModelFlags.String("go-mod", "REQUIRED", "")

		moduleCompileFlags      = flag.NewFlagSet("compile", flag.ExitOnError)
		moduleCompileGoModFlag  = moduleCompileFlags.String("go-mod", "REQUIRED", "")
		moduleCompileStreamFlag = moduleCompileFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		moduleGetLayoutFlags     = flag.NewFlagSet("get-layout", flag.ExitOnError)
		moduleGetLayoutGoModFlag = moduleGetLayoutFlags.String("go-mod", "REQUIRED", "")

		moduleWriteDiagramFlags      = flag.NewFlagSet("write-diagram", flag.ExitOnError)
		moduleWriteDiagramGoModFlag  = moduleWriteDiagramFlags.String("go-mod", "REQUIRED", "")
		moduleWriteDiagramStreamFlag = moduleWriteDiagramFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")
	)
	editorFlags.Usage = editorUsage
	editorUpsertSystemFlags.Usage = editorUpsertSystemUsage
	editorUpsertPersonFlags.Usage = editorUpsertPersonUsage
	editorUpsertContainerFlags.Usage = editorUpsertContainerUsage
	editorUpsertComponentFlags.Usage = editorUpsertComponentUsage
	editorUpsertRelationshipFlags.Usage = editorUpsertRelationshipUsage
	editorDeleteSystemFlags.Usage = editorDeleteSystemUsage
	editorDeletePersonFlags.Usage = editorDeletePersonUsage
	editorDeleteContainerFlags.Usage = editorDeleteContainerUsage
	editorDeleteComponentFlags.Usage = editorDeleteComponentUsage
	editorDeleteRelationshipFlags.Usage = editorDeleteRelationshipUsage

	moduleFlags.Usage = moduleUsage
	moduleListModulesFlags.Usage = moduleListModulesUsage
	moduleSubscribeFlags.Usage = moduleSubscribeUsage
	moduleGetModelFlags.Usage = moduleGetModelUsage
	moduleCompileFlags.Usage = moduleCompileUsage
	moduleGetLayoutFlags.Usage = moduleGetLayoutUsage
	moduleWriteDiagramFlags.Usage = moduleWriteDiagramUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "editor":
			svcf = editorFlags
		case "module":
			svcf = moduleFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "editor":
			switch epn {
			case "upsert-system":
				epf = editorUpsertSystemFlags

			case "upsert-person":
				epf = editorUpsertPersonFlags

			case "upsert-container":
				epf = editorUpsertContainerFlags

			case "upsert-component":
				epf = editorUpsertComponentFlags

			case "upsert-relationship":
				epf = editorUpsertRelationshipFlags

			case "delete-system":
				epf = editorDeleteSystemFlags

			case "delete-person":
				epf = editorDeletePersonFlags

			case "delete-container":
				epf = editorDeleteContainerFlags

			case "delete-component":
				epf = editorDeleteComponentFlags

			case "delete-relationship":
				epf = editorDeleteRelationshipFlags

			}

		case "module":
			switch epn {
			case "list-modules":
				epf = moduleListModulesFlags

			case "subscribe":
				epf = moduleSubscribeFlags

			case "get-model":
				epf = moduleGetModelFlags

			case "compile":
				epf = moduleCompileFlags

			case "get-layout":
				epf = moduleGetLayoutFlags

			case "write-diagram":
				epf = moduleWriteDiagramFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "editor":
			c := editorc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "upsert-system":
				endpoint = c.UpsertSystem()
				data, err = editorc.BuildUpsertSystemPayload(*editorUpsertSystemBodyFlag, *editorUpsertSystemGoModFlag)
			case "upsert-person":
				endpoint = c.UpsertPerson()
				data, err = editorc.BuildUpsertPersonPayload(*editorUpsertPersonBodyFlag, *editorUpsertPersonGoModFlag)
			case "upsert-container":
				endpoint = c.UpsertContainer()
				data, err = editorc.BuildUpsertContainerPayload(*editorUpsertContainerBodyFlag, *editorUpsertContainerGoModFlag)
			case "upsert-component":
				endpoint = c.UpsertComponent()
				data, err = editorc.BuildUpsertComponentPayload(*editorUpsertComponentBodyFlag, *editorUpsertComponentGoModFlag)
			case "upsert-relationship":
				endpoint = c.UpsertRelationship()
				data, err = editorc.BuildUpsertRelationshipPayload(*editorUpsertRelationshipBodyFlag, *editorUpsertRelationshipGoModFlag)
			case "delete-system":
				endpoint = c.DeleteSystem()
				data, err = editorc.BuildDeleteSystemPayload(*editorDeleteSystemNameFlag, *editorDeleteSystemGoModFlag)
			case "delete-person":
				endpoint = c.DeletePerson()
				data, err = editorc.BuildDeletePersonPayload(*editorDeletePersonNameFlag, *editorDeletePersonGoModFlag)
			case "delete-container":
				endpoint = c.DeleteContainer()
				data, err = editorc.BuildDeleteContainerPayload(*editorDeleteContainerSystemNameFlag, *editorDeleteContainerNameFlag, *editorDeleteContainerGoModFlag)
			case "delete-component":
				endpoint = c.DeleteComponent()
				data, err = editorc.BuildDeleteComponentPayload(*editorDeleteComponentSystemNameFlag, *editorDeleteComponentContainerNameFlag, *editorDeleteComponentNameFlag, *editorDeleteComponentGoModFlag)
			case "delete-relationship":
				endpoint = c.DeleteRelationship()
				data, err = editorc.BuildDeleteRelationshipPayload(*editorDeleteRelationshipSourcePathFlag, *editorDeleteRelationshipDestinationPathFlag, *editorDeleteRelationshipGoModFlag)
			}
		case "module":
			c := modulec.NewClient(scheme, host, doer, enc, dec, restore, dialer, moduleConfigurer)
			switch epn {
			case "list-modules":
				endpoint = c.ListModules()
				data = nil
			case "subscribe":
				endpoint = c.Subscribe()
				data, err = modulec.BuildSubscribePayload(*moduleSubscribeGoModFlag)
			case "get-model":
				endpoint = c.GetModel()
				data, err = modulec.BuildGetModelPayload(*moduleGetModelGoModFlag)
			case "compile":
				endpoint = c.Compile()
				data, err = modulec.BuildCompilePayload(*moduleCompileGoModFlag)
				if err == nil {
					data, err = modulec.BuildCompileStreamPayload(data, *moduleCompileStreamFlag)
				}
			case "get-layout":
				endpoint = c.GetLayout()
				data, err = modulec.BuildGetLayoutPayload(*moduleGetLayoutGoModFlag)
			case "write-diagram":
				endpoint = c.WriteDiagram()
				data, err = modulec.BuildWriteDiagramPayload(*moduleWriteDiagramGoModFlag)
				if err == nil {
					data, err = modulec.BuildWriteDiagramStreamPayload(data, *moduleWriteDiagramStreamFlag)
				}
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// editorUsage displays the usage of the editor command and its subcommands.
func editorUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Editor service interface.
Usage:
    %[1]s [globalflags] editor COMMAND [flags]

COMMAND:
    upsert-system: Create or update a software system in the model
    upsert-person: Create or update a person in the model
    upsert-container: Create or update a container in the model
    upsert-component: Create or update a component in the model
    upsert-relationship: Create or update a relationship in the model
    delete-system: Delete an existing software system from the model
    delete-person: Delete an existing person from the model
    delete-container: Delete an existing container from the model
    delete-component: Delete an existing component from the model
    delete-relationship: Delete an existing relationship from the model

Additional help:
    %[1]s editor COMMAND --help
`, os.Args[0])
}
func editorUpsertSystemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] editor upsert-system -body JSON -go-mod STRING

Create or update a software system in the model
    -body JSON: 
    -go-mod STRING: 

Example:
    %[1]s editor upsert-system --body '{
      "Description": "System description",
      "Location": "External",
      "Name": "System",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "URL": "https://system.com"
   }' --go-mod "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func editorUpsertPersonUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] editor upsert-person -body JSON -go-mod STRING

Create or update a person in the model
    -body JSON: 
    -go-mod STRING: 

Example:
    %[1]s editor upsert-person --body '{
      "Description": "Person description",
      "Location": "Internal",
      "Name": "Person",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "URL": "https://person.com"
   }' --go-mod "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func editorUpsertContainerUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] editor upsert-container -body JSON -go-mod STRING

Create or update a container in the model
    -body JSON: 
    -go-mod STRING: 

Example:
    %[1]s editor upsert-container --body '{
      "Description": "Container description",
      "Name": "Container",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "SystemName": "My System",
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "Technology": "Technology",
      "URL": "https://container.com"
   }' --go-mod "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func editorUpsertComponentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] editor upsert-component -body JSON -go-mod STRING

Create or update a component in the model
    -body JSON: 
    -go-mod STRING: 

Example:
    %[1]s editor upsert-component --body '{
      "ContainerName": "My Container",
      "Description": "Component description",
      "Name": "Component",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "SystemName": "My System",
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "Technology": "Technology",
      "URL": "https://component.com"
   }' --go-mod "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func editorUpsertRelationshipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] editor upsert-relationship -body JSON -go-mod STRING

Create or update a relationship in the model
    -body JSON: 
    -go-mod STRING: 

Example:
    %[1]s editor upsert-relationship --body '{
      "Description": "Relationship description",
      "DestinationPath": "Software System/Container/Component",
      "InteractionStyle": "Synchronous",
      "SourcePath": "Software System/Container/Component",
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "Technology": "Technology",
      "URL": "https://relationship.com"
   }' --go-mod "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func editorDeleteSystemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] editor delete-system -name STRING -go-mod STRING

Delete an existing software system from the model
    -name STRING: Name of software system to delete
    -go-mod STRING: 

Example:
    %[1]s editor delete-system --name "Eligendi et enim eum." --go-mod "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func editorDeletePersonUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] editor delete-person -name STRING -go-mod STRING

Delete an existing person from the model
    -name STRING: Name of person to delete
    -go-mod STRING: 

Example:
    %[1]s editor delete-person --name "Omnis id dignissimos." --go-mod "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func editorDeleteContainerUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] editor delete-container -system-name STRING -name STRING -go-mod STRING

Delete an existing container from the model
    -system-name STRING: Name of container software system
    -name STRING: Name of container to delete
    -go-mod STRING: 

Example:
    %[1]s editor delete-container --system-name "Neque sed." --name "Corrupti sed." --go-mod "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func editorDeleteComponentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] editor delete-component -system-name STRING -container-name STRING -name STRING -go-mod STRING

Delete an existing component from the model
    -system-name STRING: Name of component software system
    -container-name STRING: Name of component software system
    -name STRING: Name of component to delete
    -go-mod STRING: 

Example:
    %[1]s editor delete-component --system-name "My System" --container-name "My Container" --name "My Component" --go-mod "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func editorDeleteRelationshipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] editor delete-relationship -source-path STRING -destination-path STRING -go-mod STRING

Delete an existing relationship from the model
    -source-path STRING: Path to source element consisting of <software system name>[/<container name>[/<component name>]]
    -destination-path STRING: Path to destination element, see SourcePath for details.
    -go-mod STRING: 

Example:
    %[1]s editor delete-relationship --source-path "Software System/Container/Component" --destination-path "Software System/Container/Component" --go-mod "goa.design/model/examples/basic/model"
`, os.Args[0])
}

// moduleUsage displays the usage of the module command and its subcommands.
func moduleUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Module service interface.
Usage:
    %[1]s [globalflags] module COMMAND [flags]

COMMAND:
    list-modules: List the model modules in the current Go workspace
    subscribe: WebSocket endpoint for subscribing to updates to the model
    get-model: Stream the model JSON, see https://pkg.go.dev/goa.design/model/model#Model
    compile: Stream the model DSL, save it, compile it and return the corresponding JSON
    get-layout: Stream the model layout JSON saved in the SVG
    write-diagram: Save the SVG streamed in the request body

Additional help:
    %[1]s module COMMAND --help
`, os.Args[0])
}
func moduleListModulesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] module list-modules

List the model modules in the current Go workspace

Example:
    %[1]s module list-modules
`, os.Args[0])
}

func moduleSubscribeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] module subscribe -go-mod STRING

WebSocket endpoint for subscribing to updates to the model
    -go-mod STRING: 

Example:
    %[1]s module subscribe --go-mod "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func moduleGetModelUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] module get-model -go-mod STRING

Stream the model JSON, see https://pkg.go.dev/goa.design/model/model#Model
    -go-mod STRING: 

Example:
    %[1]s module get-model --go-mod "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func moduleCompileUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] module compile -go-mod STRING -stream STRING

Stream the model DSL, save it, compile it and return the corresponding JSON
    -go-mod STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    %[1]s module compile --go-mod "goa.design/model/examples/basic/model" --stream "goa.png"
`, os.Args[0])
}

func moduleGetLayoutUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] module get-layout -go-mod STRING

Stream the model layout JSON saved in the SVG
    -go-mod STRING: 

Example:
    %[1]s module get-layout --go-mod "goa.design/model/examples/basic/model"
`, os.Args[0])
}

func moduleWriteDiagramUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] module write-diagram -go-mod STRING -stream STRING

Save the SVG streamed in the request body
    -go-mod STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    %[1]s module write-diagram --go-mod "goa.design/model/examples/basic/model" --stream "goa.png"
`, os.Args[0])
}
