// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Packages client
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package packages

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "Packages" service client.
type Client struct {
	ListPackagesEndpoint goa.Endpoint
	SubscribeEndpoint    goa.Endpoint
	UploadEndpoint       goa.Endpoint
	GetModelEndpoint     goa.Endpoint
}

// NewClient initializes a "Packages" service client given the endpoints.
func NewClient(listPackages, subscribe, upload, getModel goa.Endpoint) *Client {
	return &Client{
		ListPackagesEndpoint: listPackages,
		SubscribeEndpoint:    subscribe,
		UploadEndpoint:       upload,
		GetModelEndpoint:     getModel,
	}
}

// ListPackages calls the "ListPackages" endpoint of the "Packages" service.
func (c *Client) ListPackages(ctx context.Context) (res []*Package, err error) {
	var ires any
	ires, err = c.ListPackagesEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.([]*Package), nil
}

// Subscribe calls the "Subscribe" endpoint of the "Packages" service.
func (c *Client) Subscribe(ctx context.Context, p *Package) (res SubscribeClientStream, err error) {
	var ires any
	ires, err = c.SubscribeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(SubscribeClientStream), nil
}

// Upload calls the "Upload" endpoint of the "Packages" service.
// Upload may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): Compilation failed
//   - error: internal error
func (c *Client) Upload(ctx context.Context, p *Package, req io.ReadCloser) (res Model, err error) {
	var ires any
	ires, err = c.UploadEndpoint(ctx, &UploadRequestData{Payload: p, Body: req})
	if err != nil {
		return
	}
	return ires.(Model), nil
}

// GetModel calls the "GetModel" endpoint of the "Packages" service.
func (c *Client) GetModel(ctx context.Context, p *Package) (resp io.ReadCloser, err error) {
	var ires any
	ires, err = c.GetModelEndpoint(ctx, p)
	if err != nil {
		return
	}
	o := ires.(*GetModelResponseData)
	return o.Body, nil
}
