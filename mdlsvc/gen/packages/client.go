// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Packages client
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package packages

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	types "goa.design/model/mdlsvc/gen/types"
)

// Client is the "Packages" service client.
type Client struct {
	ListWorkspacesEndpoint   goa.Endpoint
	CreatePackageEndpoint    goa.Endpoint
	DeletePackageEndpoint    goa.Endpoint
	ListPackagesEndpoint     goa.Endpoint
	ReadPackageFilesEndpoint goa.Endpoint
	SubscribeEndpoint        goa.Endpoint
}

// NewClient initializes a "Packages" service client given the endpoints.
func NewClient(listWorkspaces, createPackage, deletePackage, listPackages, readPackageFiles, subscribe goa.Endpoint) *Client {
	return &Client{
		ListWorkspacesEndpoint:   listWorkspaces,
		CreatePackageEndpoint:    createPackage,
		DeletePackageEndpoint:    deletePackage,
		ListPackagesEndpoint:     listPackages,
		ReadPackageFilesEndpoint: readPackageFiles,
		SubscribeEndpoint:        subscribe,
	}
}

// ListWorkspaces calls the "ListWorkspaces" endpoint of the "Packages" service.
func (c *Client) ListWorkspaces(ctx context.Context) (res []*types.Workspace, err error) {
	var ires any
	ires, err = c.ListWorkspacesEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.([]*types.Workspace), nil
}

// CreatePackage calls the "CreatePackage" endpoint of the "Packages" service.
// CreatePackage may return the following errors:
//   - "already_exists" (type *goa.ServiceError): Package already exists
//   - error: internal error
func (c *Client) CreatePackage(ctx context.Context, p *CreatePackagePayload) (err error) {
	_, err = c.CreatePackageEndpoint(ctx, p)
	return
}

// DeletePackage calls the "DeletePackage" endpoint of the "Packages" service.
// DeletePackage may return the following errors:
//   - "not_found" (type *goa.ServiceError): Package not found
//   - error: internal error
func (c *Client) DeletePackage(ctx context.Context, p *types.PackageLocator) (err error) {
	_, err = c.DeletePackageEndpoint(ctx, p)
	return
}

// ListPackages calls the "ListPackages" endpoint of the "Packages" service.
func (c *Client) ListPackages(ctx context.Context, p *types.Workspace) (res []*types.Package, err error) {
	var ires any
	ires, err = c.ListPackagesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*types.Package), nil
}

// ReadPackageFiles calls the "ReadPackageFiles" endpoint of the "Packages"
// service.
func (c *Client) ReadPackageFiles(ctx context.Context, p *types.PackageLocator) (res []*types.PackageFile, err error) {
	var ires any
	ires, err = c.ReadPackageFilesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*types.PackageFile), nil
}

// Subscribe calls the "Subscribe" endpoint of the "Packages" service.
func (c *Client) Subscribe(ctx context.Context, p *types.PackageLocator) (res SubscribeClientStream, err error) {
	var ires any
	ires, err = c.SubscribeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(SubscribeClientStream), nil
}
