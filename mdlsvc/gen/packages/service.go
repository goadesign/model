// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Packages service
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package packages

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
)

// Service is the Packages service interface.
type Service interface {
	// List the model packages in the current Go workspace
	ListPackages(context.Context) (res []*Package, err error)
	// WebSocket endpoint for subscribing to updates to a package
	Subscribe(context.Context, *Package, SubscribeServerStream) (err error)
	// Upload the package content, compile it and return the corresponding JSON
	Upload(context.Context, *Package, io.ReadCloser) (res Model, err error)
	// Stream the model JSON for the given package, see
	// https://pkg.go.dev/goa.design/model/model#Model
	GetModel(context.Context, *Package) (body io.ReadCloser, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Packages"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"ListPackages", "Subscribe", "Upload", "GetModel"}

// SubscribeServerStream is the interface a "Subscribe" endpoint server stream
// must satisfy.
type SubscribeServerStream interface {
	// Send streams instances of "Model".
	Send(Model) error
	// Close closes the stream.
	Close() error
}

// SubscribeClientStream is the interface a "Subscribe" endpoint client stream
// must satisfy.
type SubscribeClientStream interface {
	// Recv reads instances of "Model" from the stream.
	Recv() (Model, error)
}

// Model is the result type of the Packages service Subscribe method.
type Model string

// Package is the payload type of the Packages service Subscribe method.
type Package struct {
	// Design Go package import path
	PackagePath string
}

// MakeCompilationFailed builds a goa.ServiceError from an error.
func MakeCompilationFailed(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "compilation_failed", false, false, false)
}
