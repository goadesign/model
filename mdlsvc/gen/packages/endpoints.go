// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Packages endpoints
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package packages

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	types "goa.design/model/mdlsvc/gen/types"
)

// Endpoints wraps the "Packages" service endpoints.
type Endpoints struct {
	ListWorkspaces   goa.Endpoint
	CreatePackage    goa.Endpoint
	DeletePackage    goa.Endpoint
	ListPackages     goa.Endpoint
	ReadPackageFiles goa.Endpoint
	Subscribe        goa.Endpoint
}

// SubscribeEndpointInput holds both the payload and the server stream of the
// "Subscribe" method.
type SubscribeEndpointInput struct {
	// Payload is the method payload.
	Payload *types.PackageLocator
	// Stream is the server stream used by the "Subscribe" method to send data.
	Stream SubscribeServerStream
}

// NewEndpoints wraps the methods of the "Packages" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		ListWorkspaces:   NewListWorkspacesEndpoint(s),
		CreatePackage:    NewCreatePackageEndpoint(s),
		DeletePackage:    NewDeletePackageEndpoint(s),
		ListPackages:     NewListPackagesEndpoint(s),
		ReadPackageFiles: NewReadPackageFilesEndpoint(s),
		Subscribe:        NewSubscribeEndpoint(s),
	}
}

// Use applies the given middleware to all the "Packages" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListWorkspaces = m(e.ListWorkspaces)
	e.CreatePackage = m(e.CreatePackage)
	e.DeletePackage = m(e.DeletePackage)
	e.ListPackages = m(e.ListPackages)
	e.ReadPackageFiles = m(e.ReadPackageFiles)
	e.Subscribe = m(e.Subscribe)
}

// NewListWorkspacesEndpoint returns an endpoint function that calls the method
// "ListWorkspaces" of service "Packages".
func NewListWorkspacesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.ListWorkspaces(ctx)
	}
}

// NewCreatePackageEndpoint returns an endpoint function that calls the method
// "CreatePackage" of service "Packages".
func NewCreatePackageEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreatePackagePayload)
		return nil, s.CreatePackage(ctx, p)
	}
}

// NewDeletePackageEndpoint returns an endpoint function that calls the method
// "DeletePackage" of service "Packages".
func NewDeletePackageEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*types.PackageLocator)
		return nil, s.DeletePackage(ctx, p)
	}
}

// NewListPackagesEndpoint returns an endpoint function that calls the method
// "ListPackages" of service "Packages".
func NewListPackagesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*types.Workspace)
		return s.ListPackages(ctx, p)
	}
}

// NewReadPackageFilesEndpoint returns an endpoint function that calls the
// method "ReadPackageFiles" of service "Packages".
func NewReadPackageFilesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*types.PackageLocator)
		return s.ReadPackageFiles(ctx, p)
	}
}

// NewSubscribeEndpoint returns an endpoint function that calls the method
// "Subscribe" of service "Packages".
func NewSubscribeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*SubscribeEndpointInput)
		return nil, s.Subscribe(ctx, ep.Payload, ep.Stream)
	}
}
