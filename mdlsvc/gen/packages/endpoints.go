// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Packages endpoints
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package packages

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
	types "goa.design/model/mdlsvc/gen/types"
)

// Endpoints wraps the "Packages" service endpoints.
type Endpoints struct {
	ListPackages     goa.Endpoint
	ListPackageFiles goa.Endpoint
	Subscribe        goa.Endpoint
	GetModelJSON     goa.Endpoint
	GetLayout        goa.Endpoint
}

// SubscribeEndpointInput holds both the payload and the server stream of the
// "Subscribe" method.
type SubscribeEndpointInput struct {
	// Payload is the method payload.
	Payload *types.PackageLocator
	// Stream is the server stream used by the "Subscribe" method to send data.
	Stream SubscribeServerStream
}

// GetModelJSONResponseData holds both the result and the HTTP response body
// reader of the "GetModelJSON" method.
type GetModelJSONResponseData struct {
	// Body streams the HTTP response body.
	Body io.ReadCloser
}

// GetLayoutResponseData holds both the result and the HTTP response body
// reader of the "GetLayout" method.
type GetLayoutResponseData struct {
	// Body streams the HTTP response body.
	Body io.ReadCloser
}

// NewEndpoints wraps the methods of the "Packages" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		ListPackages:     NewListPackagesEndpoint(s),
		ListPackageFiles: NewListPackageFilesEndpoint(s),
		Subscribe:        NewSubscribeEndpoint(s),
		GetModelJSON:     NewGetModelJSONEndpoint(s),
		GetLayout:        NewGetLayoutEndpoint(s),
	}
}

// Use applies the given middleware to all the "Packages" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListPackages = m(e.ListPackages)
	e.ListPackageFiles = m(e.ListPackageFiles)
	e.Subscribe = m(e.Subscribe)
	e.GetModelJSON = m(e.GetModelJSON)
	e.GetLayout = m(e.GetLayout)
}

// NewListPackagesEndpoint returns an endpoint function that calls the method
// "ListPackages" of service "Packages".
func NewListPackagesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*types.Workspace)
		return s.ListPackages(ctx, p)
	}
}

// NewListPackageFilesEndpoint returns an endpoint function that calls the
// method "ListPackageFiles" of service "Packages".
func NewListPackageFilesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*types.PackageLocator)
		return s.ListPackageFiles(ctx, p)
	}
}

// NewSubscribeEndpoint returns an endpoint function that calls the method
// "Subscribe" of service "Packages".
func NewSubscribeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*SubscribeEndpointInput)
		return nil, s.Subscribe(ctx, ep.Payload, ep.Stream)
	}
}

// NewGetModelJSONEndpoint returns an endpoint function that calls the method
// "GetModelJSON" of service "Packages".
func NewGetModelJSONEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*types.PackageLocator)
		body, err := s.GetModelJSON(ctx, p)
		if err != nil {
			return nil, err
		}
		return &GetModelJSONResponseData{Body: body}, nil
	}
}

// NewGetLayoutEndpoint returns an endpoint function that calls the method
// "GetLayout" of service "Packages".
func NewGetLayoutEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*types.PackageLocator)
		body, err := s.GetLayout(ctx, p)
		if err != nil {
			return nil, err
		}
		return &GetLayoutResponseData{Body: body}, nil
	}
}
