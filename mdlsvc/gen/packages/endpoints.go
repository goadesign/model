// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Packages endpoints
//
// Command:
// $ goa gen goa.design/model/mdlsvc/design -o mdlsvc/

package packages

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "Packages" service endpoints.
type Endpoints struct {
	ListPackages goa.Endpoint
	Subscribe    goa.Endpoint
	Upload       goa.Endpoint
	GetModel     goa.Endpoint
}

// SubscribeEndpointInput holds both the payload and the server stream of the
// "Subscribe" method.
type SubscribeEndpointInput struct {
	// Payload is the method payload.
	Payload *Package
	// Stream is the server stream used by the "Subscribe" method to send data.
	Stream SubscribeServerStream
}

// UploadRequestData holds both the payload and the HTTP request body reader of
// the "Upload" method.
type UploadRequestData struct {
	// Payload is the method payload.
	Payload *Package
	// Body streams the HTTP request body.
	Body io.ReadCloser
}

// GetModelResponseData holds both the result and the HTTP response body reader
// of the "GetModel" method.
type GetModelResponseData struct {
	// Body streams the HTTP response body.
	Body io.ReadCloser
}

// NewEndpoints wraps the methods of the "Packages" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		ListPackages: NewListPackagesEndpoint(s),
		Subscribe:    NewSubscribeEndpoint(s),
		Upload:       NewUploadEndpoint(s),
		GetModel:     NewGetModelEndpoint(s),
	}
}

// Use applies the given middleware to all the "Packages" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListPackages = m(e.ListPackages)
	e.Subscribe = m(e.Subscribe)
	e.Upload = m(e.Upload)
	e.GetModel = m(e.GetModel)
}

// NewListPackagesEndpoint returns an endpoint function that calls the method
// "ListPackages" of service "Packages".
func NewListPackagesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.ListPackages(ctx)
	}
}

// NewSubscribeEndpoint returns an endpoint function that calls the method
// "Subscribe" of service "Packages".
func NewSubscribeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*SubscribeEndpointInput)
		return nil, s.Subscribe(ctx, ep.Payload, ep.Stream)
	}
}

// NewUploadEndpoint returns an endpoint function that calls the method
// "Upload" of service "Packages".
func NewUploadEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*UploadRequestData)
		return s.Upload(ctx, ep.Payload, ep.Body)
	}
}

// NewGetModelEndpoint returns an endpoint function that calls the method
// "GetModel" of service "Packages".
func NewGetModelEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*Package)
		body, err := s.GetModel(ctx, p)
		if err != nil {
			return nil, err
		}
		return &GetModelResponseData{Body: body}, nil
	}
}
