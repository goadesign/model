// Code generated by goa v3.14.0, DO NOT EDIT.
//
// Repo endpoints
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package repo

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	types "goa.design/model/svc/gen/types"
)

// Endpoints wraps the "Repo" service endpoints.
type Endpoints struct {
	CreateDefaultPackage goa.Endpoint
	CreatePackage        goa.Endpoint
	DeletePackage        goa.Endpoint
	ListPackages         goa.Endpoint
	ReadPackage          goa.Endpoint
	GetModelJSON         goa.Endpoint
	Subscribe            goa.Endpoint
}

// SubscribeEndpointInput holds both the payload and the server stream of the
// "Subscribe" method.
type SubscribeEndpointInput struct {
	// Payload is the method payload.
	Payload *types.PackageLocator
	// Stream is the server stream used by the "Subscribe" method to send data.
	Stream SubscribeServerStream
}

// NewEndpoints wraps the methods of the "Repo" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		CreateDefaultPackage: NewCreateDefaultPackageEndpoint(s),
		CreatePackage:        NewCreatePackageEndpoint(s),
		DeletePackage:        NewDeletePackageEndpoint(s),
		ListPackages:         NewListPackagesEndpoint(s),
		ReadPackage:          NewReadPackageEndpoint(s),
		GetModelJSON:         NewGetModelJSONEndpoint(s),
		Subscribe:            NewSubscribeEndpoint(s),
	}
}

// Use applies the given middleware to all the "Repo" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CreateDefaultPackage = m(e.CreateDefaultPackage)
	e.CreatePackage = m(e.CreatePackage)
	e.DeletePackage = m(e.DeletePackage)
	e.ListPackages = m(e.ListPackages)
	e.ReadPackage = m(e.ReadPackage)
	e.GetModelJSON = m(e.GetModelJSON)
	e.Subscribe = m(e.Subscribe)
}

// NewCreateDefaultPackageEndpoint returns an endpoint function that calls the
// method "CreateDefaultPackage" of service "Repo".
func NewCreateDefaultPackageEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*types.FileLocator)
		return nil, s.CreateDefaultPackage(ctx, p)
	}
}

// NewCreatePackageEndpoint returns an endpoint function that calls the method
// "CreatePackage" of service "Repo".
func NewCreatePackageEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*types.PackageFile)
		return nil, s.CreatePackage(ctx, p)
	}
}

// NewDeletePackageEndpoint returns an endpoint function that calls the method
// "DeletePackage" of service "Repo".
func NewDeletePackageEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*types.PackageLocator)
		return nil, s.DeletePackage(ctx, p)
	}
}

// NewListPackagesEndpoint returns an endpoint function that calls the method
// "ListPackages" of service "Repo".
func NewListPackagesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*types.Repository)
		return s.ListPackages(ctx, p)
	}
}

// NewReadPackageEndpoint returns an endpoint function that calls the method
// "ReadPackage" of service "Repo".
func NewReadPackageEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*types.PackageLocator)
		return s.ReadPackage(ctx, p)
	}
}

// NewGetModelJSONEndpoint returns an endpoint function that calls the method
// "GetModelJSON" of service "Repo".
func NewGetModelJSONEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*types.PackageLocator)
		return s.GetModelJSON(ctx, p)
	}
}

// NewSubscribeEndpoint returns an endpoint function that calls the method
// "Subscribe" of service "Repo".
func NewSubscribeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*SubscribeEndpointInput)
		return nil, s.Subscribe(ctx, ep.Payload, ep.Stream)
	}
}
