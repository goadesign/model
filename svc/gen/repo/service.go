// Code generated by goa v3.14.0, DO NOT EDIT.
//
// Repo service
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package repo

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	types "goa.design/model/svc/gen/types"
)

// Service is the Repo service interface.
type Service interface {
	// Create a new model package with default content
	CreateDefaultPackage(context.Context, *types.FileLocator) (err error)
	// Create a new model package with given content
	CreatePackage(context.Context, *types.PackageFile) (err error)
	// Delete the given model package
	DeletePackage(context.Context, *types.PackageLocator) (err error)
	// List the model packages in the given workspace
	ListPackages(context.Context, *types.Repository) (res []*types.Package, err error)
	// Get the DSL files and their content for the given model package
	ReadPackage(context.Context, *types.PackageLocator) (res []*types.PackageFile, err error)
	// Compile the given model package and return the model JSON
	GetModelJSON(context.Context, *types.PackageLocator) (res types.ModelJSON, err error)
	// Send model JSON on initial subscription and when the model package changes
	Subscribe(context.Context, *types.PackageLocator, SubscribeServerStream) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Repo"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [7]string{"CreateDefaultPackage", "CreatePackage", "DeletePackage", "ListPackages", "ReadPackage", "GetModelJSON", "Subscribe"}

// SubscribeServerStream is the interface a "Subscribe" endpoint server stream
// must satisfy.
type SubscribeServerStream interface {
	// Send streams instances of "CompilationResults".
	Send(*types.CompilationResults) error
	// Close closes the stream.
	Close() error
}

// SubscribeClientStream is the interface a "Subscribe" endpoint client stream
// must satisfy.
type SubscribeClientStream interface {
	// Recv reads instances of "CompilationResults" from the stream.
	Recv() (*types.CompilationResults, error)
}

// MakeAlreadyExists builds a goa.ServiceError from an error.
func MakeAlreadyExists(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "already_exists", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeCompilationError builds a goa.ServiceError from an error.
func MakeCompilationError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "compilation_error", false, false, false)
}
