// Code generated by goa v3.14.0, DO NOT EDIT.
//
// model HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	dsleditorc "goa.design/model/svc/gen/http/dsl_editor/client"
	repoc "goa.design/model/svc/gen/http/repo/client"
	svgc "goa.design/model/svc/gen/http/svg/client"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `dsl-editor (update-dsl|upsert-system|upsert-person|upsert-container|upsert-component|upsert-relationship|upsert-landscape-view|upsert-system-context-view|upsert-container-view|upsert-component-view|upser-element-style|upsert-relationship-style|delete-system|delete-person|delete-container|delete-component|delete-relationship|delete-landscape-view|delete-system-context-view|delete-container-view|delete-component-view|delete-element-style|delete-relationship-style)
repo (create-package|delete-package|list-packages|read-package|get-model-json|subscribe)
svg (load|save)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` dsl-editor update-dsl --body '{
      "Content": "package model\n\nimport . \"goa.design/model/dsl\"\n\nvar _ = Design(func() {})",
      "Locator": {
         "Dir": "services/my-service/diagram",
         "Filename": "model.go",
         "Repository": "my-repo"
      }
   }'` + "\n" +
		os.Args[0] + ` repo create-package --body '{
      "Content": "package model\n\nimport . \"goa.design/model/dsl\"\n\nvar _ = Design(func() {})",
      "Locator": {
         "Dir": "services/my-service/diagram",
         "Filename": "model.go",
         "Repository": "my-repo"
      }
   }'` + "\n" +
		os.Args[0] + ` svg load --filename "model.go" --repository "my-repo" --dir "services/my-service/diagram"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	dialer goahttp.Dialer,
	repoConfigurer *repoc.ConnConfigurer,
) (goa.Endpoint, any, error) {
	var (
		dSLEditorFlags = flag.NewFlagSet("dsl-editor", flag.ContinueOnError)

		dSLEditorUpdateDSLFlags    = flag.NewFlagSet("update-dsl", flag.ExitOnError)
		dSLEditorUpdateDSLBodyFlag = dSLEditorUpdateDSLFlags.String("body", "REQUIRED", "")

		dSLEditorUpsertSystemFlags    = flag.NewFlagSet("upsert-system", flag.ExitOnError)
		dSLEditorUpsertSystemBodyFlag = dSLEditorUpsertSystemFlags.String("body", "REQUIRED", "")

		dSLEditorUpsertPersonFlags    = flag.NewFlagSet("upsert-person", flag.ExitOnError)
		dSLEditorUpsertPersonBodyFlag = dSLEditorUpsertPersonFlags.String("body", "REQUIRED", "")

		dSLEditorUpsertContainerFlags    = flag.NewFlagSet("upsert-container", flag.ExitOnError)
		dSLEditorUpsertContainerBodyFlag = dSLEditorUpsertContainerFlags.String("body", "REQUIRED", "")

		dSLEditorUpsertComponentFlags    = flag.NewFlagSet("upsert-component", flag.ExitOnError)
		dSLEditorUpsertComponentBodyFlag = dSLEditorUpsertComponentFlags.String("body", "REQUIRED", "")

		dSLEditorUpsertRelationshipFlags    = flag.NewFlagSet("upsert-relationship", flag.ExitOnError)
		dSLEditorUpsertRelationshipBodyFlag = dSLEditorUpsertRelationshipFlags.String("body", "REQUIRED", "")

		dSLEditorUpsertLandscapeViewFlags    = flag.NewFlagSet("upsert-landscape-view", flag.ExitOnError)
		dSLEditorUpsertLandscapeViewBodyFlag = dSLEditorUpsertLandscapeViewFlags.String("body", "REQUIRED", "")

		dSLEditorUpsertSystemContextViewFlags    = flag.NewFlagSet("upsert-system-context-view", flag.ExitOnError)
		dSLEditorUpsertSystemContextViewBodyFlag = dSLEditorUpsertSystemContextViewFlags.String("body", "REQUIRED", "")

		dSLEditorUpsertContainerViewFlags    = flag.NewFlagSet("upsert-container-view", flag.ExitOnError)
		dSLEditorUpsertContainerViewBodyFlag = dSLEditorUpsertContainerViewFlags.String("body", "REQUIRED", "")

		dSLEditorUpsertComponentViewFlags    = flag.NewFlagSet("upsert-component-view", flag.ExitOnError)
		dSLEditorUpsertComponentViewBodyFlag = dSLEditorUpsertComponentViewFlags.String("body", "REQUIRED", "")

		dSLEditorUpserElementStyleFlags    = flag.NewFlagSet("upser-element-style", flag.ExitOnError)
		dSLEditorUpserElementStyleBodyFlag = dSLEditorUpserElementStyleFlags.String("body", "REQUIRED", "")

		dSLEditorUpsertRelationshipStyleFlags    = flag.NewFlagSet("upsert-relationship-style", flag.ExitOnError)
		dSLEditorUpsertRelationshipStyleBodyFlag = dSLEditorUpsertRelationshipStyleFlags.String("body", "REQUIRED", "")

		dSLEditorDeleteSystemFlags          = flag.NewFlagSet("delete-system", flag.ExitOnError)
		dSLEditorDeleteSystemSystemNameFlag = dSLEditorDeleteSystemFlags.String("system-name", "REQUIRED", "Name of software system to delete")
		dSLEditorDeleteSystemRepositoryFlag = dSLEditorDeleteSystemFlags.String("repository", "REQUIRED", "")
		dSLEditorDeleteSystemDirFlag        = dSLEditorDeleteSystemFlags.String("dir", "REQUIRED", "")

		dSLEditorDeletePersonFlags          = flag.NewFlagSet("delete-person", flag.ExitOnError)
		dSLEditorDeletePersonPersonNameFlag = dSLEditorDeletePersonFlags.String("person-name", "REQUIRED", "Name of person to delete")
		dSLEditorDeletePersonRepositoryFlag = dSLEditorDeletePersonFlags.String("repository", "REQUIRED", "")
		dSLEditorDeletePersonDirFlag        = dSLEditorDeletePersonFlags.String("dir", "REQUIRED", "")

		dSLEditorDeleteContainerFlags             = flag.NewFlagSet("delete-container", flag.ExitOnError)
		dSLEditorDeleteContainerSystemNameFlag    = dSLEditorDeleteContainerFlags.String("system-name", "REQUIRED", "Name of container software system")
		dSLEditorDeleteContainerContainerNameFlag = dSLEditorDeleteContainerFlags.String("container-name", "REQUIRED", "Name of container to delete")
		dSLEditorDeleteContainerRepositoryFlag    = dSLEditorDeleteContainerFlags.String("repository", "REQUIRED", "")
		dSLEditorDeleteContainerDirFlag           = dSLEditorDeleteContainerFlags.String("dir", "REQUIRED", "")

		dSLEditorDeleteComponentFlags             = flag.NewFlagSet("delete-component", flag.ExitOnError)
		dSLEditorDeleteComponentSystemNameFlag    = dSLEditorDeleteComponentFlags.String("system-name", "REQUIRED", "Name of component software system")
		dSLEditorDeleteComponentContainerNameFlag = dSLEditorDeleteComponentFlags.String("container-name", "REQUIRED", "Name of component software system")
		dSLEditorDeleteComponentComponentNameFlag = dSLEditorDeleteComponentFlags.String("component-name", "REQUIRED", "Name of component to delete")
		dSLEditorDeleteComponentRepositoryFlag    = dSLEditorDeleteComponentFlags.String("repository", "REQUIRED", "")
		dSLEditorDeleteComponentDirFlag           = dSLEditorDeleteComponentFlags.String("dir", "REQUIRED", "")

		dSLEditorDeleteRelationshipFlags               = flag.NewFlagSet("delete-relationship", flag.ExitOnError)
		dSLEditorDeleteRelationshipSourceKindFlag      = dSLEditorDeleteRelationshipFlags.String("source-kind", "REQUIRED", "Kind of source element")
		dSLEditorDeleteRelationshipSourcePathFlag      = dSLEditorDeleteRelationshipFlags.String("source-path", "REQUIRED", "Path to source element consisting of <software system name>[/<container name>[/<component name>]]")
		dSLEditorDeleteRelationshipRepositoryFlag      = dSLEditorDeleteRelationshipFlags.String("repository", "REQUIRED", "")
		dSLEditorDeleteRelationshipDirFlag             = dSLEditorDeleteRelationshipFlags.String("dir", "REQUIRED", "")
		dSLEditorDeleteRelationshipDestinationPathFlag = dSLEditorDeleteRelationshipFlags.String("destination-path", "REQUIRED", "")

		dSLEditorDeleteLandscapeViewFlags          = flag.NewFlagSet("delete-landscape-view", flag.ExitOnError)
		dSLEditorDeleteLandscapeViewKeyFlag        = dSLEditorDeleteLandscapeViewFlags.String("key", "REQUIRED", "Key of landscape view to delete")
		dSLEditorDeleteLandscapeViewRepositoryFlag = dSLEditorDeleteLandscapeViewFlags.String("repository", "REQUIRED", "")
		dSLEditorDeleteLandscapeViewDirFlag        = dSLEditorDeleteLandscapeViewFlags.String("dir", "REQUIRED", "")

		dSLEditorDeleteSystemContextViewFlags          = flag.NewFlagSet("delete-system-context-view", flag.ExitOnError)
		dSLEditorDeleteSystemContextViewKeyFlag        = dSLEditorDeleteSystemContextViewFlags.String("key", "REQUIRED", "Key of system context view to delete")
		dSLEditorDeleteSystemContextViewRepositoryFlag = dSLEditorDeleteSystemContextViewFlags.String("repository", "REQUIRED", "")
		dSLEditorDeleteSystemContextViewDirFlag        = dSLEditorDeleteSystemContextViewFlags.String("dir", "REQUIRED", "")

		dSLEditorDeleteContainerViewFlags          = flag.NewFlagSet("delete-container-view", flag.ExitOnError)
		dSLEditorDeleteContainerViewKeyFlag        = dSLEditorDeleteContainerViewFlags.String("key", "REQUIRED", "Key of container view to delete")
		dSLEditorDeleteContainerViewRepositoryFlag = dSLEditorDeleteContainerViewFlags.String("repository", "REQUIRED", "")
		dSLEditorDeleteContainerViewDirFlag        = dSLEditorDeleteContainerViewFlags.String("dir", "REQUIRED", "")

		dSLEditorDeleteComponentViewFlags          = flag.NewFlagSet("delete-component-view", flag.ExitOnError)
		dSLEditorDeleteComponentViewKeyFlag        = dSLEditorDeleteComponentViewFlags.String("key", "REQUIRED", "Key of component view to delete")
		dSLEditorDeleteComponentViewRepositoryFlag = dSLEditorDeleteComponentViewFlags.String("repository", "REQUIRED", "")
		dSLEditorDeleteComponentViewDirFlag        = dSLEditorDeleteComponentViewFlags.String("dir", "REQUIRED", "")

		dSLEditorDeleteElementStyleFlags          = flag.NewFlagSet("delete-element-style", flag.ExitOnError)
		dSLEditorDeleteElementStyleTagFlag        = dSLEditorDeleteElementStyleFlags.String("tag", "REQUIRED", "Tag of element style to delete")
		dSLEditorDeleteElementStyleRepositoryFlag = dSLEditorDeleteElementStyleFlags.String("repository", "REQUIRED", "")
		dSLEditorDeleteElementStyleDirFlag        = dSLEditorDeleteElementStyleFlags.String("dir", "REQUIRED", "")

		dSLEditorDeleteRelationshipStyleFlags          = flag.NewFlagSet("delete-relationship-style", flag.ExitOnError)
		dSLEditorDeleteRelationshipStyleTagFlag        = dSLEditorDeleteRelationshipStyleFlags.String("tag", "REQUIRED", "Tag of relationship style to delete")
		dSLEditorDeleteRelationshipStyleRepositoryFlag = dSLEditorDeleteRelationshipStyleFlags.String("repository", "REQUIRED", "")
		dSLEditorDeleteRelationshipStyleDirFlag        = dSLEditorDeleteRelationshipStyleFlags.String("dir", "REQUIRED", "")

		repoFlags = flag.NewFlagSet("repo", flag.ContinueOnError)

		repoCreatePackageFlags    = flag.NewFlagSet("create-package", flag.ExitOnError)
		repoCreatePackageBodyFlag = repoCreatePackageFlags.String("body", "REQUIRED", "")

		repoDeletePackageFlags          = flag.NewFlagSet("delete-package", flag.ExitOnError)
		repoDeletePackageRepositoryFlag = repoDeletePackageFlags.String("repository", "REQUIRED", "")
		repoDeletePackageDirFlag        = repoDeletePackageFlags.String("dir", "REQUIRED", "")

		repoListPackagesFlags          = flag.NewFlagSet("list-packages", flag.ExitOnError)
		repoListPackagesRepositoryFlag = repoListPackagesFlags.String("repository", "REQUIRED", "")

		repoReadPackageFlags          = flag.NewFlagSet("read-package", flag.ExitOnError)
		repoReadPackageRepositoryFlag = repoReadPackageFlags.String("repository", "REQUIRED", "")
		repoReadPackageDirFlag        = repoReadPackageFlags.String("dir", "REQUIRED", "")

		repoGetModelJSONFlags          = flag.NewFlagSet("get-model-json", flag.ExitOnError)
		repoGetModelJSONRepositoryFlag = repoGetModelJSONFlags.String("repository", "REQUIRED", "")
		repoGetModelJSONDirFlag        = repoGetModelJSONFlags.String("dir", "REQUIRED", "")

		repoSubscribeFlags          = flag.NewFlagSet("subscribe", flag.ExitOnError)
		repoSubscribeRepositoryFlag = repoSubscribeFlags.String("repository", "REQUIRED", "")
		repoSubscribeDirFlag        = repoSubscribeFlags.String("dir", "REQUIRED", "")

		sVGFlags = flag.NewFlagSet("svg", flag.ContinueOnError)

		sVGLoadFlags          = flag.NewFlagSet("load", flag.ExitOnError)
		sVGLoadFilenameFlag   = sVGLoadFlags.String("filename", "REQUIRED", "")
		sVGLoadRepositoryFlag = sVGLoadFlags.String("repository", "REQUIRED", "")
		sVGLoadDirFlag        = sVGLoadFlags.String("dir", "REQUIRED", "")

		sVGSaveFlags    = flag.NewFlagSet("save", flag.ExitOnError)
		sVGSaveBodyFlag = sVGSaveFlags.String("body", "REQUIRED", "")
	)
	dSLEditorFlags.Usage = dSLEditorUsage
	dSLEditorUpdateDSLFlags.Usage = dSLEditorUpdateDSLUsage
	dSLEditorUpsertSystemFlags.Usage = dSLEditorUpsertSystemUsage
	dSLEditorUpsertPersonFlags.Usage = dSLEditorUpsertPersonUsage
	dSLEditorUpsertContainerFlags.Usage = dSLEditorUpsertContainerUsage
	dSLEditorUpsertComponentFlags.Usage = dSLEditorUpsertComponentUsage
	dSLEditorUpsertRelationshipFlags.Usage = dSLEditorUpsertRelationshipUsage
	dSLEditorUpsertLandscapeViewFlags.Usage = dSLEditorUpsertLandscapeViewUsage
	dSLEditorUpsertSystemContextViewFlags.Usage = dSLEditorUpsertSystemContextViewUsage
	dSLEditorUpsertContainerViewFlags.Usage = dSLEditorUpsertContainerViewUsage
	dSLEditorUpsertComponentViewFlags.Usage = dSLEditorUpsertComponentViewUsage
	dSLEditorUpserElementStyleFlags.Usage = dSLEditorUpserElementStyleUsage
	dSLEditorUpsertRelationshipStyleFlags.Usage = dSLEditorUpsertRelationshipStyleUsage
	dSLEditorDeleteSystemFlags.Usage = dSLEditorDeleteSystemUsage
	dSLEditorDeletePersonFlags.Usage = dSLEditorDeletePersonUsage
	dSLEditorDeleteContainerFlags.Usage = dSLEditorDeleteContainerUsage
	dSLEditorDeleteComponentFlags.Usage = dSLEditorDeleteComponentUsage
	dSLEditorDeleteRelationshipFlags.Usage = dSLEditorDeleteRelationshipUsage
	dSLEditorDeleteLandscapeViewFlags.Usage = dSLEditorDeleteLandscapeViewUsage
	dSLEditorDeleteSystemContextViewFlags.Usage = dSLEditorDeleteSystemContextViewUsage
	dSLEditorDeleteContainerViewFlags.Usage = dSLEditorDeleteContainerViewUsage
	dSLEditorDeleteComponentViewFlags.Usage = dSLEditorDeleteComponentViewUsage
	dSLEditorDeleteElementStyleFlags.Usage = dSLEditorDeleteElementStyleUsage
	dSLEditorDeleteRelationshipStyleFlags.Usage = dSLEditorDeleteRelationshipStyleUsage

	repoFlags.Usage = repoUsage
	repoCreatePackageFlags.Usage = repoCreatePackageUsage
	repoDeletePackageFlags.Usage = repoDeletePackageUsage
	repoListPackagesFlags.Usage = repoListPackagesUsage
	repoReadPackageFlags.Usage = repoReadPackageUsage
	repoGetModelJSONFlags.Usage = repoGetModelJSONUsage
	repoSubscribeFlags.Usage = repoSubscribeUsage

	sVGFlags.Usage = sVGUsage
	sVGLoadFlags.Usage = sVGLoadUsage
	sVGSaveFlags.Usage = sVGSaveUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "dsl-editor":
			svcf = dSLEditorFlags
		case "repo":
			svcf = repoFlags
		case "svg":
			svcf = sVGFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "dsl-editor":
			switch epn {
			case "update-dsl":
				epf = dSLEditorUpdateDSLFlags

			case "upsert-system":
				epf = dSLEditorUpsertSystemFlags

			case "upsert-person":
				epf = dSLEditorUpsertPersonFlags

			case "upsert-container":
				epf = dSLEditorUpsertContainerFlags

			case "upsert-component":
				epf = dSLEditorUpsertComponentFlags

			case "upsert-relationship":
				epf = dSLEditorUpsertRelationshipFlags

			case "upsert-landscape-view":
				epf = dSLEditorUpsertLandscapeViewFlags

			case "upsert-system-context-view":
				epf = dSLEditorUpsertSystemContextViewFlags

			case "upsert-container-view":
				epf = dSLEditorUpsertContainerViewFlags

			case "upsert-component-view":
				epf = dSLEditorUpsertComponentViewFlags

			case "upser-element-style":
				epf = dSLEditorUpserElementStyleFlags

			case "upsert-relationship-style":
				epf = dSLEditorUpsertRelationshipStyleFlags

			case "delete-system":
				epf = dSLEditorDeleteSystemFlags

			case "delete-person":
				epf = dSLEditorDeletePersonFlags

			case "delete-container":
				epf = dSLEditorDeleteContainerFlags

			case "delete-component":
				epf = dSLEditorDeleteComponentFlags

			case "delete-relationship":
				epf = dSLEditorDeleteRelationshipFlags

			case "delete-landscape-view":
				epf = dSLEditorDeleteLandscapeViewFlags

			case "delete-system-context-view":
				epf = dSLEditorDeleteSystemContextViewFlags

			case "delete-container-view":
				epf = dSLEditorDeleteContainerViewFlags

			case "delete-component-view":
				epf = dSLEditorDeleteComponentViewFlags

			case "delete-element-style":
				epf = dSLEditorDeleteElementStyleFlags

			case "delete-relationship-style":
				epf = dSLEditorDeleteRelationshipStyleFlags

			}

		case "repo":
			switch epn {
			case "create-package":
				epf = repoCreatePackageFlags

			case "delete-package":
				epf = repoDeletePackageFlags

			case "list-packages":
				epf = repoListPackagesFlags

			case "read-package":
				epf = repoReadPackageFlags

			case "get-model-json":
				epf = repoGetModelJSONFlags

			case "subscribe":
				epf = repoSubscribeFlags

			}

		case "svg":
			switch epn {
			case "load":
				epf = sVGLoadFlags

			case "save":
				epf = sVGSaveFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "dsl-editor":
			c := dsleditorc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "update-dsl":
				endpoint = c.UpdateDSL()
				data, err = dsleditorc.BuildUpdateDSLPayload(*dSLEditorUpdateDSLBodyFlag)
			case "upsert-system":
				endpoint = c.UpsertSystem()
				data, err = dsleditorc.BuildUpsertSystemPayload(*dSLEditorUpsertSystemBodyFlag)
			case "upsert-person":
				endpoint = c.UpsertPerson()
				data, err = dsleditorc.BuildUpsertPersonPayload(*dSLEditorUpsertPersonBodyFlag)
			case "upsert-container":
				endpoint = c.UpsertContainer()
				data, err = dsleditorc.BuildUpsertContainerPayload(*dSLEditorUpsertContainerBodyFlag)
			case "upsert-component":
				endpoint = c.UpsertComponent()
				data, err = dsleditorc.BuildUpsertComponentPayload(*dSLEditorUpsertComponentBodyFlag)
			case "upsert-relationship":
				endpoint = c.UpsertRelationship()
				data, err = dsleditorc.BuildUpsertRelationshipPayload(*dSLEditorUpsertRelationshipBodyFlag)
			case "upsert-landscape-view":
				endpoint = c.UpsertLandscapeView()
				data, err = dsleditorc.BuildUpsertLandscapeViewPayload(*dSLEditorUpsertLandscapeViewBodyFlag)
			case "upsert-system-context-view":
				endpoint = c.UpsertSystemContextView()
				data, err = dsleditorc.BuildUpsertSystemContextViewPayload(*dSLEditorUpsertSystemContextViewBodyFlag)
			case "upsert-container-view":
				endpoint = c.UpsertContainerView()
				data, err = dsleditorc.BuildUpsertContainerViewPayload(*dSLEditorUpsertContainerViewBodyFlag)
			case "upsert-component-view":
				endpoint = c.UpsertComponentView()
				data, err = dsleditorc.BuildUpsertComponentViewPayload(*dSLEditorUpsertComponentViewBodyFlag)
			case "upser-element-style":
				endpoint = c.UpserElementStyle()
				data, err = dsleditorc.BuildUpserElementStylePayload(*dSLEditorUpserElementStyleBodyFlag)
			case "upsert-relationship-style":
				endpoint = c.UpsertRelationshipStyle()
				data, err = dsleditorc.BuildUpsertRelationshipStylePayload(*dSLEditorUpsertRelationshipStyleBodyFlag)
			case "delete-system":
				endpoint = c.DeleteSystem()
				data, err = dsleditorc.BuildDeleteSystemPayload(*dSLEditorDeleteSystemSystemNameFlag, *dSLEditorDeleteSystemRepositoryFlag, *dSLEditorDeleteSystemDirFlag)
			case "delete-person":
				endpoint = c.DeletePerson()
				data, err = dsleditorc.BuildDeletePersonPayload(*dSLEditorDeletePersonPersonNameFlag, *dSLEditorDeletePersonRepositoryFlag, *dSLEditorDeletePersonDirFlag)
			case "delete-container":
				endpoint = c.DeleteContainer()
				data, err = dsleditorc.BuildDeleteContainerPayload(*dSLEditorDeleteContainerSystemNameFlag, *dSLEditorDeleteContainerContainerNameFlag, *dSLEditorDeleteContainerRepositoryFlag, *dSLEditorDeleteContainerDirFlag)
			case "delete-component":
				endpoint = c.DeleteComponent()
				data, err = dsleditorc.BuildDeleteComponentPayload(*dSLEditorDeleteComponentSystemNameFlag, *dSLEditorDeleteComponentContainerNameFlag, *dSLEditorDeleteComponentComponentNameFlag, *dSLEditorDeleteComponentRepositoryFlag, *dSLEditorDeleteComponentDirFlag)
			case "delete-relationship":
				endpoint = c.DeleteRelationship()
				data, err = dsleditorc.BuildDeleteRelationshipPayload(*dSLEditorDeleteRelationshipSourceKindFlag, *dSLEditorDeleteRelationshipSourcePathFlag, *dSLEditorDeleteRelationshipRepositoryFlag, *dSLEditorDeleteRelationshipDirFlag, *dSLEditorDeleteRelationshipDestinationPathFlag)
			case "delete-landscape-view":
				endpoint = c.DeleteLandscapeView()
				data, err = dsleditorc.BuildDeleteLandscapeViewPayload(*dSLEditorDeleteLandscapeViewKeyFlag, *dSLEditorDeleteLandscapeViewRepositoryFlag, *dSLEditorDeleteLandscapeViewDirFlag)
			case "delete-system-context-view":
				endpoint = c.DeleteSystemContextView()
				data, err = dsleditorc.BuildDeleteSystemContextViewPayload(*dSLEditorDeleteSystemContextViewKeyFlag, *dSLEditorDeleteSystemContextViewRepositoryFlag, *dSLEditorDeleteSystemContextViewDirFlag)
			case "delete-container-view":
				endpoint = c.DeleteContainerView()
				data, err = dsleditorc.BuildDeleteContainerViewPayload(*dSLEditorDeleteContainerViewKeyFlag, *dSLEditorDeleteContainerViewRepositoryFlag, *dSLEditorDeleteContainerViewDirFlag)
			case "delete-component-view":
				endpoint = c.DeleteComponentView()
				data, err = dsleditorc.BuildDeleteComponentViewPayload(*dSLEditorDeleteComponentViewKeyFlag, *dSLEditorDeleteComponentViewRepositoryFlag, *dSLEditorDeleteComponentViewDirFlag)
			case "delete-element-style":
				endpoint = c.DeleteElementStyle()
				data, err = dsleditorc.BuildDeleteElementStylePayload(*dSLEditorDeleteElementStyleTagFlag, *dSLEditorDeleteElementStyleRepositoryFlag, *dSLEditorDeleteElementStyleDirFlag)
			case "delete-relationship-style":
				endpoint = c.DeleteRelationshipStyle()
				data, err = dsleditorc.BuildDeleteRelationshipStylePayload(*dSLEditorDeleteRelationshipStyleTagFlag, *dSLEditorDeleteRelationshipStyleRepositoryFlag, *dSLEditorDeleteRelationshipStyleDirFlag)
			}
		case "repo":
			c := repoc.NewClient(scheme, host, doer, enc, dec, restore, dialer, repoConfigurer)
			switch epn {
			case "create-package":
				endpoint = c.CreatePackage()
				data, err = repoc.BuildCreatePackagePayload(*repoCreatePackageBodyFlag)
			case "delete-package":
				endpoint = c.DeletePackage()
				data, err = repoc.BuildDeletePackagePayload(*repoDeletePackageRepositoryFlag, *repoDeletePackageDirFlag)
			case "list-packages":
				endpoint = c.ListPackages()
				data, err = repoc.BuildListPackagesPayload(*repoListPackagesRepositoryFlag)
			case "read-package":
				endpoint = c.ReadPackage()
				data, err = repoc.BuildReadPackagePayload(*repoReadPackageRepositoryFlag, *repoReadPackageDirFlag)
			case "get-model-json":
				endpoint = c.GetModelJSON()
				data, err = repoc.BuildGetModelJSONPayload(*repoGetModelJSONRepositoryFlag, *repoGetModelJSONDirFlag)
			case "subscribe":
				endpoint = c.Subscribe()
				data, err = repoc.BuildSubscribePayload(*repoSubscribeRepositoryFlag, *repoSubscribeDirFlag)
			}
		case "svg":
			c := svgc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "load":
				endpoint = c.Load()
				data, err = svgc.BuildLoadPayload(*sVGLoadFilenameFlag, *sVGLoadRepositoryFlag, *sVGLoadDirFlag)
			case "save":
				endpoint = c.Save()
				data, err = svgc.BuildSavePayload(*sVGSaveBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// dsl-editorUsage displays the usage of the dsl-editor command and its
// subcommands.
func dSLEditorUsage() {
	fmt.Fprintf(os.Stderr, `Service is the DSLEditor service interface.
Usage:
    %[1]s [globalflags] dsl-editor COMMAND [flags]

COMMAND:
    update-dsl: Update the DSL for the given package, compile it and return the corresponding JSON if successful
    upsert-system: Create or update a software system in the model
    upsert-person: Create or update a person in the model
    upsert-container: Create or update a container in the model
    upsert-component: Create or update a component in the model
    upsert-relationship: Create or update a relationship in the model
    upsert-landscape-view: Create or update a landscape view in the model
    upsert-system-context-view: Create or update a system context view in the model
    upsert-container-view: Create or update a container view in the model
    upsert-component-view: Create or update a component view in the model
    upser-element-style: Create or update an element style in the model
    upsert-relationship-style: Create or update a relationship style in the model
    delete-system: Delete an existing software system from the model
    delete-person: Delete an existing person from the model
    delete-container: Delete an existing container from the model
    delete-component: Delete an existing component from the model
    delete-relationship: Delete an existing relationship from the model
    delete-landscape-view: Delete an existing landscape view from the model
    delete-system-context-view: Delete an existing system context view from the model
    delete-container-view: Delete an existing container view from the model
    delete-component-view: Delete an existing component view from the model
    delete-element-style: Delete an existing element style from the model
    delete-relationship-style: Delete an existing relationship style from the model

Additional help:
    %[1]s dsl-editor COMMAND --help
`, os.Args[0])
}
func dSLEditorUpdateDSLUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor update-dsl -body JSON

Update the DSL for the given package, compile it and return the corresponding JSON if successful
    -body JSON: 

Example:
    %[1]s dsl-editor update-dsl --body '{
      "Content": "package model\n\nimport . \"goa.design/model/dsl\"\n\nvar _ = Design(func() {})",
      "Locator": {
         "Dir": "services/my-service/diagram",
         "Filename": "model.go",
         "Repository": "my-repo"
      }
   }'
`, os.Args[0])
}

func dSLEditorUpsertSystemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-system -body JSON

Create or update a software system in the model
    -body JSON: 

Example:
    %[1]s dsl-editor upsert-system --body '{
      "Description": "System description",
      "Location": "Internal",
      "Locator": {
         "Dir": "services/my-service/diagram",
         "Filename": "model.go",
         "Repository": "my-repo"
      },
      "Name": "System",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "URL": "https://system.com"
   }'
`, os.Args[0])
}

func dSLEditorUpsertPersonUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-person -body JSON

Create or update a person in the model
    -body JSON: 

Example:
    %[1]s dsl-editor upsert-person --body '{
      "Description": "Person description",
      "Location": "External",
      "Locator": {
         "Dir": "services/my-service/diagram",
         "Filename": "model.go",
         "Repository": "my-repo"
      },
      "Name": "Person",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "URL": "https://person.com"
   }'
`, os.Args[0])
}

func dSLEditorUpsertContainerUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-container -body JSON

Create or update a container in the model
    -body JSON: 

Example:
    %[1]s dsl-editor upsert-container --body '{
      "Description": "Container description",
      "Locator": {
         "Dir": "services/my-service/diagram",
         "Filename": "model.go",
         "Repository": "my-repo"
      },
      "Name": "Container",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "SystemName": "My System",
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "Technology": "Technology",
      "URL": "https://container.com"
   }'
`, os.Args[0])
}

func dSLEditorUpsertComponentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-component -body JSON

Create or update a component in the model
    -body JSON: 

Example:
    %[1]s dsl-editor upsert-component --body '{
      "ContainerName": "My Container",
      "Description": "Component description",
      "Locator": {
         "Dir": "services/my-service/diagram",
         "Filename": "model.go",
         "Repository": "my-repo"
      },
      "Name": "Component",
      "Properties": {
         "key1": "value1",
         "key2": "value2"
      },
      "SystemName": "My System",
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "Technology": "Technology",
      "URL": "https://component.com"
   }'
`, os.Args[0])
}

func dSLEditorUpsertRelationshipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-relationship -body JSON

Create or update a relationship in the model
    -body JSON: 

Example:
    %[1]s dsl-editor upsert-relationship --body '{
      "Description": "Relationship description",
      "DestinationKind": "SoftwareSystem",
      "DestinationPath": "Component",
      "InteractionStyle": "Synchronous",
      "Locator": {
         "Dir": "services/my-service/diagram",
         "Filename": "model.go",
         "Repository": "my-repo"
      },
      "SourceKind": "Component",
      "SourcePath": "Software System/Container/Component",
      "Tags": [
         "Tag1",
         "Tag2"
      ],
      "Technology": "Technology",
      "URL": "https://relationship.com"
   }'
`, os.Args[0])
}

func dSLEditorUpsertLandscapeViewUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-landscape-view -body JSON

Create or update a landscape view in the model
    -body JSON: 

Example:
    %[1]s dsl-editor upsert-landscape-view --body '{
      "Description": "description",
      "ElementViews": [
         {
            "Element": "Software System/Container/Component"
         },
         {
            "Element": "Software System/Container/Component"
         },
         {
            "Element": "Software System/Container/Component"
         }
      ],
      "EnterpriseBoundaryVisible": false,
      "Key": "key",
      "Locator": {
         "Dir": "services/my-service/diagram",
         "Filename": "model.go",
         "Repository": "my-repo"
      },
      "PaperSize": "Legal_Landscape",
      "RelationshipViews": [
         {
            "Destination": "Software System/Container/Component",
            "Source": "Software System/Container/Component"
         },
         {
            "Destination": "Software System/Container/Component",
            "Source": "Software System/Container/Component"
         },
         {
            "Destination": "Software System/Container/Component",
            "Source": "Software System/Container/Component"
         },
         {
            "Destination": "Software System/Container/Component",
            "Source": "Software System/Container/Component"
         }
      ],
      "Title": "title"
   }'
`, os.Args[0])
}

func dSLEditorUpsertSystemContextViewUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-system-context-view -body JSON

Create or update a system context view in the model
    -body JSON: 

Example:
    %[1]s dsl-editor upsert-system-context-view --body '{
      "Description": "description",
      "ElementViews": [
         {
            "Element": "Software System/Container/Component"
         },
         {
            "Element": "Software System/Container/Component"
         },
         {
            "Element": "Software System/Container/Component"
         }
      ],
      "EnterpriseBoundaryVisible": false,
      "Key": "key",
      "Locator": {
         "Dir": "services/my-service/diagram",
         "Filename": "model.go",
         "Repository": "my-repo"
      },
      "PaperSize": "Legal_Landscape",
      "RelationshipViews": [
         {
            "Destination": "Software System/Container/Component",
            "Source": "Software System/Container/Component"
         },
         {
            "Destination": "Software System/Container/Component",
            "Source": "Software System/Container/Component"
         },
         {
            "Destination": "Software System/Container/Component",
            "Source": "Software System/Container/Component"
         },
         {
            "Destination": "Software System/Container/Component",
            "Source": "Software System/Container/Component"
         }
      ],
      "SoftwareSystemName": "Software System",
      "Title": "title"
   }'
`, os.Args[0])
}

func dSLEditorUpsertContainerViewUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-container-view -body JSON

Create or update a container view in the model
    -body JSON: 

Example:
    %[1]s dsl-editor upsert-container-view --body '{
      "Description": "description",
      "ElementViews": [
         {
            "Element": "Software System/Container/Component"
         },
         {
            "Element": "Software System/Container/Component"
         },
         {
            "Element": "Software System/Container/Component"
         }
      ],
      "Key": "key",
      "Locator": {
         "Dir": "services/my-service/diagram",
         "Filename": "model.go",
         "Repository": "my-repo"
      },
      "PaperSize": "A6_Landscape",
      "RelationshipViews": [
         {
            "Destination": "Software System/Container/Component",
            "Source": "Software System/Container/Component"
         },
         {
            "Destination": "Software System/Container/Component",
            "Source": "Software System/Container/Component"
         },
         {
            "Destination": "Software System/Container/Component",
            "Source": "Software System/Container/Component"
         }
      ],
      "SoftwareSystemName": "Software System",
      "SystemBoundariesVisible": true,
      "Title": "title"
   }'
`, os.Args[0])
}

func dSLEditorUpsertComponentViewUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-component-view -body JSON

Create or update a component view in the model
    -body JSON: 

Example:
    %[1]s dsl-editor upsert-component-view --body '{
      "ContainerBoundaryVisible": false,
      "ContainerName": "Container",
      "Description": "description",
      "ElementViews": [
         {
            "Element": "Software System/Container/Component"
         },
         {
            "Element": "Software System/Container/Component"
         }
      ],
      "Key": "key",
      "Locator": {
         "Dir": "services/my-service/diagram",
         "Filename": "model.go",
         "Repository": "my-repo"
      },
      "PaperSize": "A0_Landscape",
      "RelationshipViews": [
         {
            "Destination": "Software System/Container/Component",
            "Source": "Software System/Container/Component"
         },
         {
            "Destination": "Software System/Container/Component",
            "Source": "Software System/Container/Component"
         },
         {
            "Destination": "Software System/Container/Component",
            "Source": "Software System/Container/Component"
         }
      ],
      "SoftwareSystemName": "Software System",
      "Title": "title"
   }'
`, os.Args[0])
}

func dSLEditorUpserElementStyleUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upser-element-style -body JSON

Create or update an element style in the model
    -body JSON: 

Example:
    %[1]s dsl-editor upser-element-style --body '{
      "Background": "#Aa15AC",
      "Border": "BorderDotted",
      "Color": "#2C6e81",
      "Description": true,
      "FontSize": 20,
      "Height": 100,
      "Icon": "https://static.structurizr.com/images/icons/Person.png",
      "Locator": {
         "Dir": "services/my-service/diagram",
         "Filename": "model.go",
         "Repository": "my-repo"
      },
      "Metadata": false,
      "Opacity": 10,
      "Shape": "ShapePerson",
      "Stroke": "#E7c976",
      "Tag": "tag",
      "Width": 100
   }'
`, os.Args[0])
}

func dSLEditorUpsertRelationshipStyleUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor upsert-relationship-style -body JSON

Create or update a relationship style in the model
    -body JSON: 

Example:
    %[1]s dsl-editor upsert-relationship-style --body '{
      "Color": "#a5bEDd",
      "Dashed": false,
      "FontSize": 70,
      "Locator": {
         "Dir": "services/my-service/diagram",
         "Filename": "model.go",
         "Repository": "my-repo"
      },
      "Opacity": 93,
      "Position": 92,
      "Routing": "Direct",
      "Stroke": "#09bA4c",
      "Tag": "tag",
      "Thickness": 2,
      "Width": 6938
   }'
`, os.Args[0])
}

func dSLEditorDeleteSystemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-system -system-name STRING -repository STRING -dir STRING

Delete an existing software system from the model
    -system-name STRING: Name of software system to delete
    -repository STRING: 
    -dir STRING: 

Example:
    %[1]s dsl-editor delete-system --system-name "Facere dolores." --repository "my-repo" --dir "services/my-service/diagram"
`, os.Args[0])
}

func dSLEditorDeletePersonUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-person -person-name STRING -repository STRING -dir STRING

Delete an existing person from the model
    -person-name STRING: Name of person to delete
    -repository STRING: 
    -dir STRING: 

Example:
    %[1]s dsl-editor delete-person --person-name "Quae vero assumenda ab reprehenderit." --repository "my-repo" --dir "services/my-service/diagram"
`, os.Args[0])
}

func dSLEditorDeleteContainerUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-container -system-name STRING -container-name STRING -repository STRING -dir STRING

Delete an existing container from the model
    -system-name STRING: Name of container software system
    -container-name STRING: Name of container to delete
    -repository STRING: 
    -dir STRING: 

Example:
    %[1]s dsl-editor delete-container --system-name "Repellat ut." --container-name "Nisi iure explicabo velit et." --repository "my-repo" --dir "services/my-service/diagram"
`, os.Args[0])
}

func dSLEditorDeleteComponentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-component -system-name STRING -container-name STRING -component-name STRING -repository STRING -dir STRING

Delete an existing component from the model
    -system-name STRING: Name of component software system
    -container-name STRING: Name of component software system
    -component-name STRING: Name of component to delete
    -repository STRING: 
    -dir STRING: 

Example:
    %[1]s dsl-editor delete-component --system-name "My System" --container-name "My Container" --component-name "My Component" --repository "my-repo" --dir "services/my-service/diagram"
`, os.Args[0])
}

func dSLEditorDeleteRelationshipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-relationship -source-kind STRING -source-path STRING -repository STRING -dir STRING -destination-path STRING

Delete an existing relationship from the model
    -source-kind STRING: Kind of source element
    -source-path STRING: Path to source element consisting of <software system name>[/<container name>[/<component name>]]
    -repository STRING: 
    -dir STRING: 
    -destination-path STRING: 

Example:
    %[1]s dsl-editor delete-relationship --source-kind "Container" --source-path "Software System/Container/Component" --repository "my-repo" --dir "services/my-service/diagram" --destination-path "Software System/Container/Component"
`, os.Args[0])
}

func dSLEditorDeleteLandscapeViewUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-landscape-view -key STRING -repository STRING -dir STRING

Delete an existing landscape view from the model
    -key STRING: Key of landscape view to delete
    -repository STRING: 
    -dir STRING: 

Example:
    %[1]s dsl-editor delete-landscape-view --key "Quasi rerum non." --repository "my-repo" --dir "services/my-service/diagram"
`, os.Args[0])
}

func dSLEditorDeleteSystemContextViewUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-system-context-view -key STRING -repository STRING -dir STRING

Delete an existing system context view from the model
    -key STRING: Key of system context view to delete
    -repository STRING: 
    -dir STRING: 

Example:
    %[1]s dsl-editor delete-system-context-view --key "Et consectetur aut sit dolores." --repository "my-repo" --dir "services/my-service/diagram"
`, os.Args[0])
}

func dSLEditorDeleteContainerViewUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-container-view -key STRING -repository STRING -dir STRING

Delete an existing container view from the model
    -key STRING: Key of container view to delete
    -repository STRING: 
    -dir STRING: 

Example:
    %[1]s dsl-editor delete-container-view --key "Eum rerum laudantium quo." --repository "my-repo" --dir "services/my-service/diagram"
`, os.Args[0])
}

func dSLEditorDeleteComponentViewUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-component-view -key STRING -repository STRING -dir STRING

Delete an existing component view from the model
    -key STRING: Key of component view to delete
    -repository STRING: 
    -dir STRING: 

Example:
    %[1]s dsl-editor delete-component-view --key "Ea magni quisquam et quisquam architecto fugit." --repository "my-repo" --dir "services/my-service/diagram"
`, os.Args[0])
}

func dSLEditorDeleteElementStyleUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-element-style -tag STRING -repository STRING -dir STRING

Delete an existing element style from the model
    -tag STRING: Tag of element style to delete
    -repository STRING: 
    -dir STRING: 

Example:
    %[1]s dsl-editor delete-element-style --tag "Voluptatem modi quibusdam ut sed excepturi." --repository "my-repo" --dir "services/my-service/diagram"
`, os.Args[0])
}

func dSLEditorDeleteRelationshipStyleUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dsl-editor delete-relationship-style -tag STRING -repository STRING -dir STRING

Delete an existing relationship style from the model
    -tag STRING: Tag of relationship style to delete
    -repository STRING: 
    -dir STRING: 

Example:
    %[1]s dsl-editor delete-relationship-style --tag "Quisquam in quis." --repository "my-repo" --dir "services/my-service/diagram"
`, os.Args[0])
}

// repoUsage displays the usage of the repo command and its subcommands.
func repoUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Repo service interface.
Usage:
    %[1]s [globalflags] repo COMMAND [flags]

COMMAND:
    create-package: Create a new model package
    delete-package: Delete the given model package
    list-packages: List the model packages in the given workspace
    read-package: Get the DSL files and their content for the given model package
    get-model-json: Compile the given model package and return the model JSON
    subscribe: Send model JSON on initial subscription and when the model package changes

Additional help:
    %[1]s repo COMMAND --help
`, os.Args[0])
}
func repoCreatePackageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] repo create-package -body JSON

Create a new model package
    -body JSON: 

Example:
    %[1]s repo create-package --body '{
      "Content": "package model\n\nimport . \"goa.design/model/dsl\"\n\nvar _ = Design(func() {})",
      "Locator": {
         "Dir": "services/my-service/diagram",
         "Filename": "model.go",
         "Repository": "my-repo"
      }
   }'
`, os.Args[0])
}

func repoDeletePackageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] repo delete-package -repository STRING -dir STRING

Delete the given model package
    -repository STRING: 
    -dir STRING: 

Example:
    %[1]s repo delete-package --repository "my-repo" --dir "services/my-service/diagram"
`, os.Args[0])
}

func repoListPackagesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] repo list-packages -repository STRING

List the model packages in the given workspace
    -repository STRING: 

Example:
    %[1]s repo list-packages --repository "my-repo"
`, os.Args[0])
}

func repoReadPackageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] repo read-package -repository STRING -dir STRING

Get the DSL files and their content for the given model package
    -repository STRING: 
    -dir STRING: 

Example:
    %[1]s repo read-package --repository "my-repo" --dir "services/my-service/diagram"
`, os.Args[0])
}

func repoGetModelJSONUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] repo get-model-json -repository STRING -dir STRING

Compile the given model package and return the model JSON
    -repository STRING: 
    -dir STRING: 

Example:
    %[1]s repo get-model-json --repository "my-repo" --dir "services/my-service/diagram"
`, os.Args[0])
}

func repoSubscribeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] repo subscribe -repository STRING -dir STRING

Send model JSON on initial subscription and when the model package changes
    -repository STRING: 
    -dir STRING: 

Example:
    %[1]s repo subscribe --repository "my-repo" --dir "services/my-service/diagram"
`, os.Args[0])
}

// svgUsage displays the usage of the svg command and its subcommands.
func sVGUsage() {
	fmt.Fprintf(os.Stderr, `Service is the SVG service interface.
Usage:
    %[1]s [globalflags] svg COMMAND [flags]

COMMAND:
    load: Stream the SVG
    save: Save the SVG streamed in the request body

Additional help:
    %[1]s svg COMMAND --help
`, os.Args[0])
}
func sVGLoadUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svg load -filename STRING -repository STRING -dir STRING

Stream the SVG
    -filename STRING: 
    -repository STRING: 
    -dir STRING: 

Example:
    %[1]s svg load --filename "model.go" --repository "my-repo" --dir "services/my-service/diagram"
`, os.Args[0])
}

func sVGSaveUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svg save -body JSON

Save the SVG streamed in the request body
    -body JSON: 

Example:
    %[1]s svg save --body '{
      "Dir": "services/my-service/diagram",
      "Filename": "model.go",
      "Repository": "my-repo",
      "SVG": "\u003csvg���\u003c/svg\u003e"
   }'
`, os.Args[0])
}
