openapi: 3.0.3
info:
    title: Goa API
    version: "1.0"
servers:
    - url: http://localhost:80
      description: Default server for Assets
paths:
    /api/diagrams:
        get:
            tags:
                - SVG
            summary: Load SVG
            description: Stream the SVG
            operationId: SVG#Load
            parameters:
                - name: filename
                  in: query
                  description: Name of DSL file
                  allowEmptyValue: true
                  required: true
                  schema:
                    type: string
                    description: Name of DSL file
                    example: model.go
                    pattern: \.go$
                  example: model.go
                - name: repo
                  in: query
                  description: Path to repository root
                  allowEmptyValue: true
                  required: true
                  schema:
                    type: string
                    description: Path to repository root
                    example: my-repo
                    minLength: 1
                  example: my-repo
                - name: dir
                  in: query
                  description: Path to directory containing a model package
                  allowEmptyValue: true
                  required: true
                  schema:
                    type: string
                    description: Path to directory containing a model package
                    example: services/my-service/diagram
                    minLength: 1
                  example: services/my-service/diagram
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                type: string
                                example: <svg����</svg>
                                pattern: <svg.*</svg>$
                            example: <svg���</svg>
                "404":
                    description: 'NotFound: File not found'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
        post:
            tags:
                - SVG
            summary: Save SVG
            description: Save the SVG streamed in the request body
            operationId: SVG#Save
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SaveRequestBody'
                        example:
                            Dir: services/my-service/diagram
                            Filename: model.go
                            Repository: my-repo
                            SVG: <svg</svg>
            responses:
                "204":
                    description: No Content response.
    /api/dsl:
        post:
            tags:
                - DSLEditor
            summary: UpdateDSL DSLEditor
            description: Update the DSL for the given package, compile it and return the corresponding JSON if successful
            operationId: DSLEditor#UpdateDSL
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateDSLRequestBody'
                        example:
                            Content: |-
                                package model

                                import . "goa.design/model/dsl"

                                var _ = Design(func() {})
                            Locator:
                                Dir: services/my-service/diagram
                                Filename: model.go
                                Repository: my-repo
            responses:
                "200":
                    description: OK response.
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/model/component:
        put:
            tags:
                - DSLEditor
            summary: UpsertComponent DSLEditor
            description: Create or update a component in the model
            operationId: DSLEditor#UpsertComponent
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpsertComponentRequestBody'
                        example:
                            ContainerName: My Container
                            Description: Component description
                            Locator:
                                Dir: services/my-service/diagram
                                Filename: model.go
                                Repository: my-repo
                            Name: Component
                            Properties:
                                key1: value1
                                key2: value2
                            SystemName: My System
                            Tags:
                                - Tag1
                                - Tag2
                            Technology: Technology
                            URL: https://component.com
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/model/container:
        put:
            tags:
                - DSLEditor
            summary: UpsertContainer DSLEditor
            description: Create or update a container in the model
            operationId: DSLEditor#UpsertContainer
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpsertContainerRequestBody'
                        example:
                            Description: Container description
                            Locator:
                                Dir: services/my-service/diagram
                                Filename: model.go
                                Repository: my-repo
                            Name: Container
                            Properties:
                                key1: value1
                                key2: value2
                            SystemName: My System
                            Tags:
                                - Tag1
                                - Tag2
                            Technology: Technology
                            URL: https://container.com
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/model/person:
        put:
            tags:
                - DSLEditor
            summary: UpsertPerson DSLEditor
            description: Create or update a person in the model
            operationId: DSLEditor#UpsertPerson
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpsertSystemRequestBody'
                        example:
                            Description: Person description
                            Location: External
                            Locator:
                                Dir: services/my-service/diagram
                                Filename: model.go
                                Repository: my-repo
                            Name: Person
                            Properties:
                                key1: value1
                                key2: value2
                            Tags:
                                - Tag1
                                - Tag2
                            URL: https://person.com
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/model/person/{PersonName}:
        delete:
            tags:
                - DSLEditor
            summary: DeletePerson DSLEditor
            description: Delete an existing person from the model
            operationId: DSLEditor#DeletePerson
            parameters:
                - name: PersonName
                  in: path
                  description: Name of person to delete
                  required: true
                  schema:
                    type: string
                    description: Name of person to delete
                    example: Autem harum ut nesciunt aut et laudantium.
                  example: A vel tempore adipisci ex fugit reiciendis.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteSystemRequestBody'
                        example:
                            Dir: services/my-service/diagram
                            Repository: my-repo
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
                "404":
                    description: 'NotFound: Person not found'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/model/relationship:
        delete:
            tags:
                - DSLEditor
            summary: DeleteRelationship DSLEditor
            description: Delete an existing relationship from the model
            operationId: DSLEditor#DeleteRelationship
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteRelationshipRequestBody'
                        example:
                            DestinationPath: Software System/Container/Component
                            Dir: services/my-service/diagram
                            Repository: my-repo
                            SourcePath: Software System/Container/Component
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
                "404":
                    description: 'NotFound: Relationship not found'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
        put:
            tags:
                - DSLEditor
            summary: UpsertRelationship DSLEditor
            description: Create or update a relationship in the model
            operationId: DSLEditor#UpsertRelationship
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpsertRelationshipRequestBody'
                        example:
                            Description: Relationship description
                            DestinationKind: Component
                            DestinationPath: Component
                            InteractionStyle: Synchronous
                            Locator:
                                Dir: services/my-service/diagram
                                Filename: model.go
                                Repository: my-repo
                            SourceKind: SoftwareSystem
                            SourcePath: Software System/Container/Component
                            Tags:
                                - Tag1
                                - Tag2
                            Technology: Technology
                            URL: https://relationship.com
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/model/system:
        put:
            tags:
                - DSLEditor
            summary: UpsertSystem DSLEditor
            description: Create or update a software system in the model
            operationId: DSLEditor#UpsertSystem
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpsertSystemRequestBody'
                        example:
                            Description: System description
                            Location: Internal
                            Locator:
                                Dir: services/my-service/diagram
                                Filename: model.go
                                Repository: my-repo
                            Name: System
                            Properties:
                                key1: value1
                                key2: value2
                            Tags:
                                - Tag1
                                - Tag2
                            URL: https://system.com
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/model/system/{SystemName}:
        delete:
            tags:
                - DSLEditor
            summary: DeleteSystem DSLEditor
            description: Delete an existing software system from the model
            operationId: DSLEditor#DeleteSystem
            parameters:
                - name: SystemName
                  in: path
                  description: Name of software system to delete
                  required: true
                  schema:
                    type: string
                    description: Name of software system to delete
                    example: Iusto dolorum.
                  example: Omnis voluptatem officia quisquam.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteSystemRequestBody'
                        example:
                            Dir: services/my-service/diagram
                            Repository: my-repo
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
                "404":
                    description: 'NotFound: Software system not found'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/model/system/{SystemName}/container/{ContainerName}:
        delete:
            tags:
                - DSLEditor
            summary: DeleteContainer DSLEditor
            description: Delete an existing container from the model
            operationId: DSLEditor#DeleteContainer
            parameters:
                - name: SystemName
                  in: path
                  description: Name of container software system
                  required: true
                  schema:
                    type: string
                    description: Name of container software system
                    example: Eius laudantium esse.
                  example: Aspernatur fugit.
                - name: ContainerName
                  in: path
                  description: Name of container to delete
                  required: true
                  schema:
                    type: string
                    description: Name of container to delete
                    example: Hic laboriosam id sunt enim sit.
                  example: Cum eligendi voluptatum incidunt quos sunt.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteSystemRequestBody'
                        example:
                            Dir: services/my-service/diagram
                            Repository: my-repo
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
                "404":
                    description: 'NotFound: Container not found'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/model/system/{SystemName}/container/{ContainerName}/component/{ComponentName}:
        delete:
            tags:
                - DSLEditor
            summary: DeleteComponent DSLEditor
            description: Delete an existing component from the model
            operationId: DSLEditor#DeleteComponent
            parameters:
                - name: SystemName
                  in: path
                  description: Name of component software system
                  required: true
                  schema:
                    type: string
                    description: Name of component software system
                    example: My System
                  example: My System
                - name: ContainerName
                  in: path
                  description: Name of component software system
                  required: true
                  schema:
                    type: string
                    description: Name of component software system
                    example: My Container
                  example: My Container
                - name: ComponentName
                  in: path
                  description: Name of component to delete
                  required: true
                  schema:
                    type: string
                    description: Name of component to delete
                    example: My Component
                  example: My Component
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteSystemRequestBody'
                        example:
                            Dir: services/my-service/diagram
                            Repository: my-repo
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
                "404":
                    description: 'NotFound: Component not found'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/views/component:
        put:
            tags:
                - DSLEditor
            summary: UpsertComponentView DSLEditor
            description: Create or update a component view in the model
            operationId: DSLEditor#UpsertComponentView
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpsertComponentViewRequestBody'
                        example:
                            ContainerBoundaryVisible: true
                            ContainerName: Container
                            Description: description
                            ElementViews:
                                - Element: Software System/Container/Component
                                - Element: Software System/Container/Component
                                - Element: Software System/Container/Component
                            Key: key
                            Locator:
                                Dir: services/my-service/diagram
                                Filename: model.go
                                Repository: my-repo
                            PaperSize: A1_Portrait
                            RelationshipViews:
                                - Destination: Software System/Container/Component
                                  Source: Software System/Container/Component
                                - Destination: Software System/Container/Component
                                  Source: Software System/Container/Component
                                - Destination: Software System/Container/Component
                                  Source: Software System/Container/Component
                            SoftwareSystemName: Software System
                            Title: title
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/views/component/{Key}:
        delete:
            tags:
                - DSLEditor
            summary: DeleteComponentView DSLEditor
            description: Delete an existing component view from the model
            operationId: DSLEditor#DeleteComponentView
            parameters:
                - name: Key
                  in: path
                  description: Key of component view to delete
                  required: true
                  schema:
                    type: string
                    description: Key of component view to delete
                    example: Omnis id consequatur provident voluptatem aut eligendi.
                  example: Tempora quibusdam cumque amet similique deleniti aspernatur.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteSystemRequestBody'
                        example:
                            Dir: services/my-service/diagram
                            Repository: my-repo
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
                "404":
                    description: 'NotFound: Component view not found'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/views/container:
        put:
            tags:
                - DSLEditor
            summary: UpsertContainerView DSLEditor
            description: Create or update a container view in the model
            operationId: DSLEditor#UpsertContainerView
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpsertContainerViewRequestBody'
                        example:
                            Description: description
                            ElementViews:
                                - Element: Software System/Container/Component
                                - Element: Software System/Container/Component
                                - Element: Software System/Container/Component
                                - Element: Software System/Container/Component
                            Key: key
                            Locator:
                                Dir: services/my-service/diagram
                                Filename: model.go
                                Repository: my-repo
                            PaperSize: A3_Portrait
                            RelationshipViews:
                                - Destination: Software System/Container/Component
                                  Source: Software System/Container/Component
                                - Destination: Software System/Container/Component
                                  Source: Software System/Container/Component
                                - Destination: Software System/Container/Component
                                  Source: Software System/Container/Component
                            SoftwareSystemName: Software System
                            SystemBoundariesVisible: false
                            Title: title
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/views/container/{Key}:
        delete:
            tags:
                - DSLEditor
            summary: DeleteContainerView DSLEditor
            description: Delete an existing container view from the model
            operationId: DSLEditor#DeleteContainerView
            parameters:
                - name: Key
                  in: path
                  description: Key of container view to delete
                  required: true
                  schema:
                    type: string
                    description: Key of container view to delete
                    example: Libero qui consectetur.
                  example: Incidunt deserunt eum.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteSystemRequestBody'
                        example:
                            Dir: services/my-service/diagram
                            Repository: my-repo
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
                "404":
                    description: 'NotFound: Container view not found'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/views/elementstyle:
        put:
            tags:
                - DSLEditor
            summary: UpserElementStyle DSLEditor
            description: Create or update an element style in the model
            operationId: DSLEditor#UpserElementStyle
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpserElementStyleRequestBody'
                        example:
                            Background: '#1dF376'
                            Border: BorderDotted
                            Color: '#E1ccfa'
                            Description: false
                            FontSize: 20
                            Height: 100
                            Icon: https://static.structurizr.com/images/icons/Person.png
                            Locator:
                                Dir: services/my-service/diagram
                                Filename: model.go
                                Repository: my-repo
                            Metadata: true
                            Opacity: 45
                            Shape: ShapePipe
                            Stroke: '#9D0155'
                            Tag: tag
                            Width: 100
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/views/elementstyle/{Tag}:
        delete:
            tags:
                - DSLEditor
            summary: DeleteElementStyle DSLEditor
            description: Delete an existing element style from the model
            operationId: DSLEditor#DeleteElementStyle
            parameters:
                - name: Tag
                  in: path
                  description: Tag of element style to delete
                  required: true
                  schema:
                    type: string
                    description: Tag of element style to delete
                    example: Totam voluptates sit.
                  example: Beatae rem quibusdam dignissimos dolores illum iusto.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteSystemRequestBody'
                        example:
                            Dir: services/my-service/diagram
                            Repository: my-repo
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
                "404":
                    description: 'NotFound: Element style not found'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/views/landscape:
        put:
            tags:
                - DSLEditor
            summary: UpsertLandscapeView DSLEditor
            description: Create or update a landscape view in the model
            operationId: DSLEditor#UpsertLandscapeView
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpsertLandscapeViewRequestBody'
                        example:
                            Description: description
                            ElementViews:
                                - Element: Software System/Container/Component
                                - Element: Software System/Container/Component
                                - Element: Software System/Container/Component
                            EnterpriseBoundaryVisible: true
                            Key: key
                            Locator:
                                Dir: services/my-service/diagram
                                Filename: model.go
                                Repository: my-repo
                            PaperSize: A4_Landscape
                            RelationshipViews:
                                - Destination: Software System/Container/Component
                                  Source: Software System/Container/Component
                                - Destination: Software System/Container/Component
                                  Source: Software System/Container/Component
                            Title: title
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/views/landscape/{Key}:
        delete:
            tags:
                - DSLEditor
            summary: DeleteLandscapeView DSLEditor
            description: Delete an existing landscape view from the model
            operationId: DSLEditor#DeleteLandscapeView
            parameters:
                - name: Key
                  in: path
                  description: Key of landscape view to delete
                  required: true
                  schema:
                    type: string
                    description: Key of landscape view to delete
                    example: Aut et excepturi.
                  example: Animi necessitatibus.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteSystemRequestBody'
                        example:
                            Dir: services/my-service/diagram
                            Repository: my-repo
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
                "404":
                    description: 'NotFound: Landscape view not found'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/views/relationshipstyle:
        put:
            tags:
                - DSLEditor
            summary: UpsertRelationshipStyle DSLEditor
            description: Create or update a relationship style in the model
            operationId: DSLEditor#UpsertRelationshipStyle
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpsertRelationshipStyleRequestBody'
                        example:
                            Color: '#F77f19'
                            Dashed: true
                            FontSize: 10
                            Locator:
                                Dir: services/my-service/diagram
                                Filename: model.go
                                Repository: my-repo
                            Opacity: 35
                            Position: 25
                            Routing: Direct
                            Stroke: '#5EA24B'
                            Tag: tag
                            Thickness: 2
                            Width: 272
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/views/relationshipstyle/{Tag}:
        delete:
            tags:
                - DSLEditor
            summary: DeleteRelationshipStyle DSLEditor
            description: Delete an existing relationship style from the model
            operationId: DSLEditor#DeleteRelationshipStyle
            parameters:
                - name: Tag
                  in: path
                  description: Tag of relationship style to delete
                  required: true
                  schema:
                    type: string
                    description: Tag of relationship style to delete
                    example: Repudiandae enim modi voluptas natus.
                  example: Labore aut dignissimos consequuntur iure.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteSystemRequestBody'
                        example:
                            Dir: services/my-service/diagram
                            Repository: my-repo
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
                "404":
                    description: 'NotFound: Relationship style not found'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/views/systemcontext:
        put:
            tags:
                - DSLEditor
            summary: UpsertSystemContextView DSLEditor
            description: Create or update a system context view in the model
            operationId: DSLEditor#UpsertSystemContextView
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpsertSystemContextViewRequestBody'
                        example:
                            Description: description
                            ElementViews:
                                - Element: Software System/Container/Component
                                - Element: Software System/Container/Component
                            EnterpriseBoundaryVisible: true
                            Key: key
                            Locator:
                                Dir: services/my-service/diagram
                                Filename: model.go
                                Repository: my-repo
                            PaperSize: A4_Landscape
                            RelationshipViews:
                                - Destination: Software System/Container/Component
                                  Source: Software System/Container/Component
                                - Destination: Software System/Container/Component
                                  Source: Software System/Container/Component
                                - Destination: Software System/Container/Component
                                  Source: Software System/Container/Component
                            SoftwareSystemName: Software System
                            Title: title
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/dsl/views/systemcontext/{Key}:
        delete:
            tags:
                - DSLEditor
            summary: DeleteSystemContextView DSLEditor
            description: Delete an existing system context view from the model
            operationId: DSLEditor#DeleteSystemContextView
            parameters:
                - name: Key
                  in: path
                  description: Key of system context view to delete
                  required: true
                  schema:
                    type: string
                    description: Key of system context view to delete
                    example: Nesciunt ut atque dignissimos quis qui sit.
                  example: Earum animi rerum perspiciatis et aut iste.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteSystemRequestBody'
                        example:
                            Dir: services/my-service/diagram
                            Repository: my-repo
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDSLRequestBody'
                            example:
                                Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "400":
                    description: 'compilation_failed: Compilation failed'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
                "404":
                    description: 'NotFound: System context view not found'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/repo:
        delete:
            tags:
                - Repo
            summary: DeletePackage Repo
            description: Delete the given model package
            operationId: Repo#DeletePackage
            parameters:
                - name: repo
                  in: query
                  description: Path to repository root
                  allowEmptyValue: true
                  required: true
                  schema:
                    type: string
                    description: Path to repository root
                    example: my-repo
                    minLength: 1
                  example: my-repo
                - name: dir
                  in: query
                  description: Path to directory containing a model package
                  allowEmptyValue: true
                  required: true
                  schema:
                    type: string
                    description: Path to directory containing a model package
                    example: services/my-service/diagram
                    minLength: 1
                  example: services/my-service/diagram
            responses:
                "204":
                    description: No Content response.
                "404":
                    description: 'not_found: Package not found'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
        get:
            tags:
                - Repo
            summary: ListPackages Repo
            description: List the model packages in the given workspace
            operationId: Repo#ListPackages
            parameters:
                - name: repo
                  in: query
                  description: Path to repository root
                  allowEmptyValue: true
                  required: true
                  schema:
                    type: string
                    description: Path to repository root
                    example: my-repo
                    minLength: 1
                  example: my-repo
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Package'
                                example:
                                    - Dir: services/my-service/diagram
                                      ImportPath: goa.design/model/examples/basic/model
                                    - Dir: services/my-service/diagram
                                      ImportPath: goa.design/model/examples/basic/model
                                    - Dir: services/my-service/diagram
                                      ImportPath: goa.design/model/examples/basic/model
                            example:
                                - Dir: services/my-service/diagram
                                  ImportPath: goa.design/model/examples/basic/model
                                - Dir: services/my-service/diagram
                                  ImportPath: goa.design/model/examples/basic/model
                                - Dir: services/my-service/diagram
                                  ImportPath: goa.design/model/examples/basic/model
                "404":
                    description: 'not_found: Package not found'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
        post:
            tags:
                - Repo
            summary: CreatePackage Repo
            description: Create a new model package
            operationId: Repo#CreatePackage
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateDSLRequestBody'
                        example:
                            Content: |-
                                package model

                                import . "goa.design/model/dsl"

                                var _ = Design(func() {})
                            Locator:
                                Dir: services/my-service/diagram
                                Filename: model.go
                                Repository: my-repo
            responses:
                "201":
                    description: Created response.
                "409":
                    description: 'already_exists: Package or directory already exists'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/repo/files:
        get:
            tags:
                - Repo
            summary: ReadPackage Repo
            description: Get the DSL files and their content for the given model package
            operationId: Repo#ReadPackage
            parameters:
                - name: repo
                  in: query
                  description: Path to repository root
                  allowEmptyValue: true
                  required: true
                  schema:
                    type: string
                    description: Path to repository root
                    example: my-repo
                    minLength: 1
                  example: my-repo
                - name: dir
                  in: query
                  description: Path to directory containing a model package
                  allowEmptyValue: true
                  required: true
                  schema:
                    type: string
                    description: Path to directory containing a model package
                    example: services/my-service/diagram
                    minLength: 1
                  example: services/my-service/diagram
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/UpdateDSLRequestBody'
                                example:
                                    - Content: |-
                                        package model

                                        import . "goa.design/model/dsl"

                                        var _ = Design(func() {})
                                      Locator:
                                        Dir: services/my-service/diagram
                                        Filename: model.go
                                        Repository: my-repo
                                    - Content: |-
                                        package model

                                        import . "goa.design/model/dsl"

                                        var _ = Design(func() {})
                                      Locator:
                                        Dir: services/my-service/diagram
                                        Filename: model.go
                                        Repository: my-repo
                                    - Content: |-
                                        package model

                                        import . "goa.design/model/dsl"

                                        var _ = Design(func() {})
                                      Locator:
                                        Dir: services/my-service/diagram
                                        Filename: model.go
                                        Repository: my-repo
                            example:
                                - Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                  Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                                - Content: |-
                                    package model

                                    import . "goa.design/model/dsl"

                                    var _ = Design(func() {})
                                  Locator:
                                    Dir: services/my-service/diagram
                                    Filename: model.go
                                    Repository: my-repo
                "404":
                    description: 'not_found: Package not found'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/repo/json:
        get:
            tags:
                - Repo
            summary: GetModelJSON Repo
            description: Compile the given model package and return the model JSON
            operationId: Repo#GetModelJSON
            parameters:
                - name: repo
                  in: query
                  description: Path to repository root
                  allowEmptyValue: true
                  required: true
                  schema:
                    type: string
                    description: Path to repository root
                    example: my-repo
                    minLength: 1
                  example: my-repo
                - name: dir
                  in: query
                  description: Path to directory containing a model package
                  allowEmptyValue: true
                  required: true
                  schema:
                    type: string
                    description: Path to directory containing a model package
                    example: services/my-service/diagram
                    minLength: 1
                  example: services/my-service/diagram
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                type: string
                                example: '{"name":"example","email":"mail@example.com"}'
                                format: json
                            example: '{"name":"example","email":"mail@example.com"}'
                "404":
                    description: 'not_found: Package not found'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
                "422":
                    description: 'compilation_error: Compilation error'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/repo/subscribe:
        get:
            tags:
                - Repo
            summary: Subscribe Repo
            description: Send model JSON on initial subscription and when the model package changes
            operationId: Repo#Subscribe
            parameters:
                - name: repo
                  in: query
                  description: Path to repository root
                  allowEmptyValue: true
                  required: true
                  schema:
                    type: string
                    description: Path to repository root
                    example: my-repo
                    minLength: 1
                  example: my-repo
                - name: dir
                  in: query
                  description: Path to directory containing a model package
                  allowEmptyValue: true
                  required: true
                  schema:
                    type: string
                    description: Path to directory containing a model package
                    example: services/my-service/diagram
                    minLength: 1
                  example: services/my-service/diagram
            responses:
                "101":
                    description: Switching Protocols response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CompilationResults'
                            example:
                                Error: Dicta eos hic ipsum.
                                Model: '{"name":"example","email":"mail@example.com"}'
                "404":
                    description: 'not_found: Package not found'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /assets:
        get:
            tags:
                - Assets
            summary: Download assets
            description: Serve the diagram editor UI
            operationId: Assets#/assets
            responses:
                "200":
                    description: File downloaded
components:
    schemas:
        CompilationResults:
            type: object
            properties:
                Error:
                    type: string
                    description: Compilation error if any
                    example: Dolorem maiores et labore.
                Model:
                    type: string
                    description: Model JSON if compilation succeeded
                    example: '{"name":"example","email":"mail@example.com"}'
                    format: json
            example:
                Error: Ad fugiat facilis.
                Model: '{"name":"example","email":"mail@example.com"}'
        DeleteRelationshipRequestBody:
            type: object
            properties:
                DestinationPath:
                    type: string
                    description: Path to destination element, see SourcePath for details.
                    example: Software System/Container/Component
                Dir:
                    type: string
                    description: Path to directory containing a model package
                    example: services/my-service/diagram
                    minLength: 1
                Repository:
                    type: string
                    description: Path to repository root
                    example: my-repo
                    minLength: 1
                SourcePath:
                    type: string
                    description: Path to source element consisting of <software system name>[/<container name>[/<component name>]]
                    example: Software System/Container/Component
            example:
                DestinationPath: Software System/Container/Component
                Dir: services/my-service/diagram
                Repository: my-repo
                SourcePath: Software System/Container/Component
            required:
                - SourcePath
                - DestinationPath
                - Repository
                - Dir
        DeleteSystemRequestBody:
            type: object
            properties:
                Dir:
                    type: string
                    description: Path to directory containing a model package
                    example: services/my-service/diagram
                    minLength: 1
                Repository:
                    type: string
                    description: Path to repository root
                    example: my-repo
                    minLength: 1
            example:
                Dir: services/my-service/diagram
                Repository: my-repo
            required:
                - Repository
                - Dir
        ElementView:
            type: object
            properties:
                Element:
                    type: string
                    description: Path to element consisting of <software system name>[/<container name>[/<component name>]]
                    example: Software System/Container/Component
            description: ElementView defines an element in a view
            example:
                Element: Software System/Container/Component
        Error:
            type: object
            properties:
                fault:
                    type: boolean
                    description: Is the error a server-side fault?
                    example: true
                id:
                    type: string
                    description: ID is a unique identifier for this particular occurrence of the problem.
                    example: 123abc
                message:
                    type: string
                    description: Message is a human-readable explanation specific to this occurrence of the problem.
                    example: parameter 'p' must be an integer
                name:
                    type: string
                    description: Name is the name of this class of errors.
                    example: bad_request
                temporary:
                    type: boolean
                    description: Is the error temporary?
                    example: true
                timeout:
                    type: boolean
                    description: Is the error a timeout?
                    example: false
            description: Compilation failed
            example:
                fault: false
                id: 123abc
                message: parameter 'p' must be an integer
                name: bad_request
                temporary: false
                timeout: false
            required:
                - name
                - id
                - message
                - temporary
                - timeout
                - fault
        FileLocator:
            type: object
            properties:
                Dir:
                    type: string
                    description: Path to directory containing a model package
                    example: services/my-service/diagram
                    minLength: 1
                Filename:
                    type: string
                    description: Name of DSL file
                    example: model.go
                    pattern: \.go$
                Repository:
                    type: string
                    description: Path to repository root
                    example: my-repo
                    minLength: 1
            description: FileLocator is the location of a DSL file in a model package
            example:
                Dir: services/my-service/diagram
                Filename: model.go
                Repository: my-repo
            required:
                - Filename
                - Repository
                - Dir
        Package:
            type: object
            properties:
                Dir:
                    type: string
                    description: Path to directory containing a model package
                    example: services/my-service/diagram
                    minLength: 1
                ImportPath:
                    type: string
                    description: Design Go package import path
                    example: goa.design/model/examples/basic/model
                    pattern: ^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\-]+/(/([a-zA-Z0-9_\-]+))*$
            example:
                Dir: services/my-service/diagram
                ImportPath: goa.design/model/examples/basic/model
            required:
                - ImportPath
                - Dir
        RelationshipView:
            type: object
            properties:
                Destination:
                    type: string
                    description: Path to destination element, see SourcePath for details.
                    example: Software System/Container/Component
                Source:
                    type: string
                    description: Path to source element consisting of <software system name>[/<container name>[/<component name>]]
                    example: Software System/Container/Component
            description: RelationshipView defines a relationship in a view
            example:
                Destination: Software System/Container/Component
                Source: Software System/Container/Component
        SaveRequestBody:
            type: object
            properties:
                Dir:
                    type: string
                    description: Path to directory containing a model package
                    example: services/my-service/diagram
                    minLength: 1
                Filename:
                    type: string
                    description: Name of DSL file
                    example: model.go
                    pattern: \.go$
                Repository:
                    type: string
                    description: Path to repository root
                    example: my-repo
                    minLength: 1
                SVG:
                    type: string
                    description: Diagram SVG
                    example: <svg���</svg>
                    pattern: <svg.*</svg>$
            example:
                Dir: services/my-service/diagram
                Filename: model.go
                Repository: my-repo
                SVG: <svg������</svg>
            required:
                - Filename
                - SVG
                - Repository
                - Dir
        UpdateDSLRequestBody:
            type: object
            properties:
                Content:
                    type: string
                    description: DSL code
                    example: |-
                        package model

                        import . "goa.design/model/dsl"

                        var _ = Design(func() {})
                    pattern: import . "goa.design/model/dsl"
                    minLength: 58
                Locator:
                    $ref: '#/components/schemas/FileLocator'
            example:
                Content: |-
                    package model

                    import . "goa.design/model/dsl"

                    var _ = Design(func() {})
                Locator:
                    Dir: services/my-service/diagram
                    Filename: model.go
                    Repository: my-repo
            required:
                - Locator
                - Content
        UpserElementStyleRequestBody:
            type: object
            properties:
                Background:
                    type: string
                    description: Background color of element
                    example: '#A6bb02'
                    pattern: ^#[0-9a-fA-F]{6}$
                Border:
                    type: string
                    description: Type of border to apply to elements
                    default: BorderSolid
                    example: BorderDashed
                    enum:
                        - BorderSolid
                        - BorderDashed
                        - BorderDotted
                Color:
                    type: string
                    description: Text color of element
                    example: '#E9D8b7'
                    pattern: ^#[0-9a-fA-F]{6}$
                Description:
                    type: boolean
                    description: Indicates whether the element description should be visible on the resulting diagram
                    default: true
                    example: true
                FontSize:
                    type: integer
                    description: Font size of element
                    example: 20
                    format: int64
                Height:
                    type: integer
                    description: Height of element
                    example: 100
                    format: int64
                Icon:
                    type: string
                    description: URL to icon of element
                    example: https://static.structurizr.com/images/icons/Person.png
                    format: uri
                Locator:
                    $ref: '#/components/schemas/FileLocator'
                Metadata:
                    type: boolean
                    description: Indicates whether the element metadata should be visible on the resulting diagram
                    example: false
                Opacity:
                    type: integer
                    description: Opacity of element as a percentage
                    example: 16
                    minimum: 0
                    maximum: 100
                Shape:
                    type: string
                    description: Shape of element
                    default: ShapeBox
                    example: ShapeRoundedBox
                    enum:
                        - ShapeBox
                        - ShapeCircle
                        - ShapeCylinder
                        - ShapeEllipse
                        - ShapeHexagon
                        - ShapeRoundedBox
                        - ShapeComponent
                        - ShapeFolder
                        - ShapeMobileDeviceLandscape
                        - ShapeMobileDevicePortrait
                        - ShapePerson
                        - ShapePipe
                        - ShapeRobot
                        - ShapeWebBrowser
                Stroke:
                    type: string
                    description: Stroke color of element
                    example: '#86F4be'
                    pattern: ^#[0-9a-fA-F]{6}$
                Tag:
                    type: string
                    description: Tag of elements to apply style onto
                    example: tag
                Width:
                    type: integer
                    description: Width of element
                    example: 100
                    format: int64
            example:
                Background: '#3C8e1A'
                Border: BorderSolid
                Color: '#0e59aF'
                Description: true
                FontSize: 20
                Height: 100
                Icon: https://static.structurizr.com/images/icons/Person.png
                Locator:
                    Dir: services/my-service/diagram
                    Filename: model.go
                    Repository: my-repo
                Metadata: true
                Opacity: 13
                Shape: ShapeRoundedBox
                Stroke: '#5c789a'
                Tag: tag
                Width: 100
            required:
                - Locator
                - Tag
        UpsertComponentRequestBody:
            type: object
            properties:
                ContainerName:
                    type: string
                    description: Name of parent container
                    example: My Container
                Description:
                    type: string
                    description: Description of component
                    example: Component description
                Locator:
                    $ref: '#/components/schemas/FileLocator'
                Name:
                    type: string
                    description: Name of component
                    example: Component
                Properties:
                    type: object
                    description: Set of arbitrary name-value properties (shown in diagram tooltips)
                    example:
                        key1: value1
                        key2: value2
                    additionalProperties:
                        type: string
                        example: Nulla sit veniam recusandae at.
                SystemName:
                    type: string
                    description: Name of parent software system
                    example: My System
                Tags:
                    type: array
                    items:
                        type: string
                        example: Maiores magni autem iste earum dolores.
                    description: Attached tags
                    example:
                        - Tag1
                        - Tag2
                Technology:
                    type: string
                    description: Technology used by component
                    example: Technology
                URL:
                    type: string
                    description: Documentation URL
                    example: https://component.com
            example:
                ContainerName: My Container
                Description: Component description
                Locator:
                    Dir: services/my-service/diagram
                    Filename: model.go
                    Repository: my-repo
                Name: Component
                Properties:
                    key1: value1
                    key2: value2
                SystemName: My System
                Tags:
                    - Tag1
                    - Tag2
                Technology: Technology
                URL: https://component.com
            required:
                - SystemName
                - ContainerName
                - Name
        UpsertComponentViewRequestBody:
            type: object
            properties:
                ContainerBoundaryVisible:
                    type: boolean
                    description: Indicates whether the container boundaries are visible on the resulting diagram
                    default: true
                    example: true
                ContainerName:
                    type: string
                    description: Name of container to create view for
                    example: Container
                Description:
                    type: string
                    description: Description of view
                    example: description
                ElementViews:
                    type: array
                    items:
                        $ref: '#/components/schemas/ElementView'
                    description: Elements in view
                    example:
                        - Element: Software System/Container/Component
                        - Element: Software System/Container/Component
                        - Element: Software System/Container/Component
                Key:
                    type: string
                    description: Key of view
                    example: key
                Locator:
                    $ref: '#/components/schemas/FileLocator'
                PaperSize:
                    type: string
                    description: Paper size of view
                    example: A2_Portrait
                    enum:
                        - A0_Landscape
                        - A0_Portrait
                        - A1_Landscape
                        - A1_Portrait
                        - A2_Landscape
                        - A2_Portrait
                        - A3_Landscape
                        - A3_Portrait
                        - A4_Landscape
                        - A4_Portrait
                        - A5_Landscape
                        - A5_Portrait
                        - A6_Landscape
                        - A6_Portrait
                        - Legal_Landscape
                        - Legal_Portrait
                        - Letter_Landscape
                        - Letter_Portrait
                        - Slide_16x10
                        - Slide_16x9
                        - Slide_4x3
                RelationshipViews:
                    type: array
                    items:
                        $ref: '#/components/schemas/RelationshipView'
                    description: Relationships in view
                    example:
                        - Destination: Software System/Container/Component
                          Source: Software System/Container/Component
                        - Destination: Software System/Container/Component
                          Source: Software System/Container/Component
                        - Destination: Software System/Container/Component
                          Source: Software System/Container/Component
                        - Destination: Software System/Container/Component
                          Source: Software System/Container/Component
                SoftwareSystemName:
                    type: string
                    description: Name of software system to create view for
                    example: Software System
                Title:
                    type: string
                    description: Title of view
                    example: title
            example:
                ContainerBoundaryVisible: true
                ContainerName: Container
                Description: description
                ElementViews:
                    - Element: Software System/Container/Component
                    - Element: Software System/Container/Component
                    - Element: Software System/Container/Component
                Key: key
                Locator:
                    Dir: services/my-service/diagram
                    Filename: model.go
                    Repository: my-repo
                PaperSize: A0_Landscape
                RelationshipViews:
                    - Destination: Software System/Container/Component
                      Source: Software System/Container/Component
                    - Destination: Software System/Container/Component
                      Source: Software System/Container/Component
                    - Destination: Software System/Container/Component
                      Source: Software System/Container/Component
                    - Destination: Software System/Container/Component
                      Source: Software System/Container/Component
                SoftwareSystemName: Software System
                Title: title
            required:
                - SoftwareSystemName
                - ContainerName
                - Key
                - Title
        UpsertContainerRequestBody:
            type: object
            properties:
                Description:
                    type: string
                    description: Description of container
                    example: Container description
                Locator:
                    $ref: '#/components/schemas/FileLocator'
                Name:
                    type: string
                    description: Name of container
                    example: Container
                Properties:
                    type: object
                    description: Set of arbitrary name-value properties (shown in diagram tooltips)
                    example:
                        key1: value1
                        key2: value2
                    additionalProperties:
                        type: string
                        example: Perferendis et doloremque sit qui qui quia.
                SystemName:
                    type: string
                    description: Name of parent software system
                    example: My System
                Tags:
                    type: array
                    items:
                        type: string
                        example: Totam totam et deleniti excepturi occaecati voluptatem.
                    description: Attached tags
                    example:
                        - Tag1
                        - Tag2
                Technology:
                    type: string
                    description: Technology used by container
                    example: Technology
                URL:
                    type: string
                    description: Documentation URL
                    example: https://container.com
            example:
                Description: Container description
                Locator:
                    Dir: services/my-service/diagram
                    Filename: model.go
                    Repository: my-repo
                Name: Container
                Properties:
                    key1: value1
                    key2: value2
                SystemName: My System
                Tags:
                    - Tag1
                    - Tag2
                Technology: Technology
                URL: https://container.com
            required:
                - SystemName
                - Name
        UpsertContainerViewRequestBody:
            type: object
            properties:
                Description:
                    type: string
                    description: Description of view
                    example: description
                ElementViews:
                    type: array
                    items:
                        $ref: '#/components/schemas/ElementView'
                    description: Elements in view
                    example:
                        - Element: Software System/Container/Component
                        - Element: Software System/Container/Component
                        - Element: Software System/Container/Component
                Key:
                    type: string
                    description: Key of view
                    example: key
                Locator:
                    $ref: '#/components/schemas/FileLocator'
                PaperSize:
                    type: string
                    description: Paper size of view
                    example: A0_Portrait
                    enum:
                        - A0_Landscape
                        - A0_Portrait
                        - A1_Landscape
                        - A1_Portrait
                        - A2_Landscape
                        - A2_Portrait
                        - A3_Landscape
                        - A3_Portrait
                        - A4_Landscape
                        - A4_Portrait
                        - A5_Landscape
                        - A5_Portrait
                        - A6_Landscape
                        - A6_Portrait
                        - Legal_Landscape
                        - Legal_Portrait
                        - Letter_Landscape
                        - Letter_Portrait
                        - Slide_16x10
                        - Slide_16x9
                        - Slide_4x3
                RelationshipViews:
                    type: array
                    items:
                        $ref: '#/components/schemas/RelationshipView'
                    description: Relationships in view
                    example:
                        - Destination: Software System/Container/Component
                          Source: Software System/Container/Component
                        - Destination: Software System/Container/Component
                          Source: Software System/Container/Component
                        - Destination: Software System/Container/Component
                          Source: Software System/Container/Component
                        - Destination: Software System/Container/Component
                          Source: Software System/Container/Component
                SoftwareSystemName:
                    type: string
                    description: Name of software system to create view for
                    example: Software System
                SystemBoundariesVisible:
                    type: boolean
                    description: Indicates whether the system boundaries are visible on the resulting diagram
                    default: true
                    example: true
                Title:
                    type: string
                    description: Title of view
                    example: title
            example:
                Description: description
                ElementViews:
                    - Element: Software System/Container/Component
                    - Element: Software System/Container/Component
                Key: key
                Locator:
                    Dir: services/my-service/diagram
                    Filename: model.go
                    Repository: my-repo
                PaperSize: A2_Portrait
                RelationshipViews:
                    - Destination: Software System/Container/Component
                      Source: Software System/Container/Component
                    - Destination: Software System/Container/Component
                      Source: Software System/Container/Component
                    - Destination: Software System/Container/Component
                      Source: Software System/Container/Component
                SoftwareSystemName: Software System
                SystemBoundariesVisible: true
                Title: title
            required:
                - Key
                - Title
        UpsertLandscapeViewRequestBody:
            type: object
            properties:
                Description:
                    type: string
                    description: Description of view
                    example: description
                ElementViews:
                    type: array
                    items:
                        $ref: '#/components/schemas/ElementView'
                    description: Elements in view
                    example:
                        - Element: Software System/Container/Component
                        - Element: Software System/Container/Component
                        - Element: Software System/Container/Component
                EnterpriseBoundaryVisible:
                    type: boolean
                    description: Indicates whether the enterprise boundary is visible on the resulting diagram
                    default: true
                    example: true
                Key:
                    type: string
                    description: Key of view
                    example: key
                Locator:
                    $ref: '#/components/schemas/FileLocator'
                PaperSize:
                    type: string
                    description: Paper size of view
                    example: A1_Landscape
                    enum:
                        - A0_Landscape
                        - A0_Portrait
                        - A1_Landscape
                        - A1_Portrait
                        - A2_Landscape
                        - A2_Portrait
                        - A3_Landscape
                        - A3_Portrait
                        - A4_Landscape
                        - A4_Portrait
                        - A5_Landscape
                        - A5_Portrait
                        - A6_Landscape
                        - A6_Portrait
                        - Legal_Landscape
                        - Legal_Portrait
                        - Letter_Landscape
                        - Letter_Portrait
                        - Slide_16x10
                        - Slide_16x9
                        - Slide_4x3
                RelationshipViews:
                    type: array
                    items:
                        $ref: '#/components/schemas/RelationshipView'
                    description: Relationships in view
                    example:
                        - Destination: Software System/Container/Component
                          Source: Software System/Container/Component
                        - Destination: Software System/Container/Component
                          Source: Software System/Container/Component
                        - Destination: Software System/Container/Component
                          Source: Software System/Container/Component
                Title:
                    type: string
                    description: Title of view
                    example: title
            example:
                Description: description
                ElementViews:
                    - Element: Software System/Container/Component
                    - Element: Software System/Container/Component
                EnterpriseBoundaryVisible: true
                Key: key
                Locator:
                    Dir: services/my-service/diagram
                    Filename: model.go
                    Repository: my-repo
                PaperSize: Letter_Landscape
                RelationshipViews:
                    - Destination: Software System/Container/Component
                      Source: Software System/Container/Component
                    - Destination: Software System/Container/Component
                      Source: Software System/Container/Component
                    - Destination: Software System/Container/Component
                      Source: Software System/Container/Component
                Title: title
            required:
                - Key
                - Title
        UpsertRelationshipRequestBody:
            type: object
            properties:
                Description:
                    type: string
                    description: Description of relationship
                    example: Relationship description
                DestinationKind:
                    type: string
                    description: Kind of destination element
                    example: Component
                    enum:
                        - SoftwareSystem
                        - Person
                        - Container
                        - Component
                DestinationPath:
                    type: string
                    description: Relative path to destination element, see SourcePath for details.
                    example: Component
                InteractionStyle:
                    type: string
                    description: Indicates whether the relationship is synchronous or asynchronous
                    default: Synchronous
                    example: Asynchronous
                    enum:
                        - Synchronous
                        - Asynchronous
                Locator:
                    $ref: '#/components/schemas/FileLocator'
                SourceKind:
                    type: string
                    description: Kind of source element
                    example: Person
                    enum:
                        - SoftwareSystem
                        - Person
                        - Container
                        - Component
                SourcePath:
                    type: string
                    description: Path to source element consisting of <software system name>[/<container name>[/<component name>]]
                    example: Software System/Container/Component
                Tags:
                    type: array
                    items:
                        type: string
                        example: Corrupti excepturi.
                    description: Attached tags
                    example:
                        - Tag1
                        - Tag2
                Technology:
                    type: string
                    description: Technology used by relationship
                    example: Technology
                URL:
                    type: string
                    description: Documentation URL
                    example: https://relationship.com
                    format: uri
            example:
                Description: Relationship description
                DestinationKind: Person
                DestinationPath: Component
                InteractionStyle: Asynchronous
                Locator:
                    Dir: services/my-service/diagram
                    Filename: model.go
                    Repository: my-repo
                SourceKind: Component
                SourcePath: Software System/Container/Component
                Tags:
                    - Tag1
                    - Tag2
                Technology: Technology
                URL: https://relationship.com
            required:
                - SourcePath
                - SourceKind
                - DestinationPath
                - DestinationKind
        UpsertRelationshipStyleRequestBody:
            type: object
            properties:
                Color:
                    type: string
                    description: Color of label
                    example: '#eDB061'
                    pattern: ^#[0-9a-fA-F]{6}$
                Dashed:
                    type: boolean
                    description: Indicates whether the relationship is dashed
                    default: true
                    example: true
                FontSize:
                    type: integer
                    description: Font size of label on relationship
                    example: 68
                    minimum: 1
                    maximum: 100
                Locator:
                    $ref: '#/components/schemas/FileLocator'
                Opacity:
                    type: integer
                    description: Opacity of relationship as a percentage
                    example: 16
                    minimum: 0
                    maximum: 100
                Position:
                    type: integer
                    description: Position of label on relationship as a percentage (0 is next to source, 100 next to destination)
                    example: 35
                    minimum: 0
                    maximum: 100
                Routing:
                    type: string
                    description: Routing of relationship
                    default: Direct
                    example: Direct
                    enum:
                        - Direct
                        - Orthogonal
                        - Curved
                Stroke:
                    type: string
                    description: Stroke color of relationship
                    example: '#f30AeB'
                    pattern: ^#[0-9a-fA-F]{6}$
                Tag:
                    type: string
                    description: Tag of relationships to apply style onto
                    example: tag
                Thickness:
                    type: integer
                    description: Thickness of relationship in pixels
                    example: 2
                    minimum: 0
                    maximum: 1000
                Width:
                    type: integer
                    description: Width of label on relationship
                    example: 6270
                    minimum: 1
                    maximum: 10000
            example:
                Color: '#Eb446f'
                Dashed: true
                FontSize: 57
                Locator:
                    Dir: services/my-service/diagram
                    Filename: model.go
                    Repository: my-repo
                Opacity: 15
                Position: 93
                Routing: Orthogonal
                Stroke: '#2BbaCF'
                Tag: tag
                Thickness: 2
                Width: 1379
            required:
                - Locator
                - Tag
        UpsertSystemContextViewRequestBody:
            type: object
            properties:
                Description:
                    type: string
                    description: Description of view
                    example: description
                ElementViews:
                    type: array
                    items:
                        $ref: '#/components/schemas/ElementView'
                    description: Elements in view
                    example:
                        - Element: Software System/Container/Component
                        - Element: Software System/Container/Component
                        - Element: Software System/Container/Component
                EnterpriseBoundaryVisible:
                    type: boolean
                    description: Indicates whether the enterprise boundary is visible on the resulting diagram
                    default: true
                    example: true
                Key:
                    type: string
                    description: Key of view
                    example: key
                Locator:
                    $ref: '#/components/schemas/FileLocator'
                PaperSize:
                    type: string
                    description: Paper size of view
                    example: A2_Landscape
                    enum:
                        - A0_Landscape
                        - A0_Portrait
                        - A1_Landscape
                        - A1_Portrait
                        - A2_Landscape
                        - A2_Portrait
                        - A3_Landscape
                        - A3_Portrait
                        - A4_Landscape
                        - A4_Portrait
                        - A5_Landscape
                        - A5_Portrait
                        - A6_Landscape
                        - A6_Portrait
                        - Legal_Landscape
                        - Legal_Portrait
                        - Letter_Landscape
                        - Letter_Portrait
                        - Slide_16x10
                        - Slide_16x9
                        - Slide_4x3
                RelationshipViews:
                    type: array
                    items:
                        $ref: '#/components/schemas/RelationshipView'
                    description: Relationships in view
                    example:
                        - Destination: Software System/Container/Component
                          Source: Software System/Container/Component
                        - Destination: Software System/Container/Component
                          Source: Software System/Container/Component
                        - Destination: Software System/Container/Component
                          Source: Software System/Container/Component
                SoftwareSystemName:
                    type: string
                    description: Name of software system to create view for
                    example: Software System
                Title:
                    type: string
                    description: Title of view
                    example: title
            example:
                Description: description
                ElementViews:
                    - Element: Software System/Container/Component
                    - Element: Software System/Container/Component
                    - Element: Software System/Container/Component
                    - Element: Software System/Container/Component
                EnterpriseBoundaryVisible: false
                Key: key
                Locator:
                    Dir: services/my-service/diagram
                    Filename: model.go
                    Repository: my-repo
                PaperSize: A1_Portrait
                RelationshipViews:
                    - Destination: Software System/Container/Component
                      Source: Software System/Container/Component
                    - Destination: Software System/Container/Component
                      Source: Software System/Container/Component
                    - Destination: Software System/Container/Component
                      Source: Software System/Container/Component
                SoftwareSystemName: Software System
                Title: title
            required:
                - SoftwareSystemName
                - Key
                - Title
        UpsertSystemRequestBody:
            type: object
            properties:
                Description:
                    type: string
                    description: Description of system
                    example: System description
                Location:
                    type: string
                    description: Indicates whether the system is in-house (Internal) or hosted by a third party (External)
                    default: Internal
                    example: Internal
                    enum:
                        - Internal
                        - External
                Locator:
                    $ref: '#/components/schemas/FileLocator'
                Name:
                    type: string
                    description: Name of software system
                    example: System
                Properties:
                    type: object
                    description: Set of arbitrary name-value properties (shown in diagram tooltips)
                    example:
                        key1: value1
                        key2: value2
                    additionalProperties:
                        type: string
                        example: Aperiam molestiae ipsum cumque fugiat eos.
                Tags:
                    type: array
                    items:
                        type: string
                        example: Doloribus aut molestiae.
                    description: Attached tags
                    example:
                        - Tag1
                        - Tag2
                URL:
                    type: string
                    description: Documentation URL
                    example: https://system.com
            example:
                Description: System description
                Location: External
                Locator:
                    Dir: services/my-service/diagram
                    Filename: model.go
                    Repository: my-repo
                Name: System
                Properties:
                    key1: value1
                    key2: value2
                Tags:
                    - Tag1
                    - Tag2
                URL: https://system.com
            required:
                - Name
tags:
    - name: Assets
    - name: DSLEditor
    - name: Repo
    - name: SVG
