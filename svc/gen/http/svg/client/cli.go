// Code generated by goa v3.13.2, DO NOT EDIT.
//
// SVG HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package client

import (
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"
	svg "goa.design/model/svc/gen/svg"
)

// BuildLoadPayload builds the payload for the SVG Load endpoint from CLI flags.
func BuildLoadPayload(sVGLoadFilename string) (*svg.Filename, error) {
	var err error
	var filename string
	{
		filename = sVGLoadFilename
		err = goa.MergeErrors(err, goa.ValidatePattern("Filename", filename, ".*\\.svg"))
		if err != nil {
			return nil, err
		}
	}
	v := &svg.Filename{}
	v.Filename = filename

	return v, nil
}

// BuildSavePayload builds the payload for the SVG Save endpoint from CLI flags.
func BuildSavePayload(sVGSaveBody string, sVGSaveFilename string) (*svg.SavePayload, error) {
	var err error
	var body SaveRequestBody
	{
		err = json.Unmarshal([]byte(sVGSaveBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"SVG\": \"\\u003csvg����\\u003c/svg\\u003e\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.SVG", body.SVG, "<svg.*</svg>$"))
		if err != nil {
			return nil, err
		}
	}
	var filename string
	{
		filename = sVGSaveFilename
		err = goa.MergeErrors(err, goa.ValidatePattern("Filename", filename, ".*\\.svg"))
		if err != nil {
			return nil, err
		}
	}
	v := &svg.SavePayload{
		SVG: svg.SVG(body.SVG),
	}
	v.Filename = filename

	return v, nil
}
