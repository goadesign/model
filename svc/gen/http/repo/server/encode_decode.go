// Code generated by goa v3.14.0, DO NOT EDIT.
//
// Repo HTTP server encoders and decoders
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"unicode/utf8"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	types "goa.design/model/svc/gen/types"
)

// EncodeCreateDefaultPackageResponse returns an encoder for responses returned
// by the Repo CreateDefaultPackage endpoint.
func EncodeCreateDefaultPackageResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusCreated)
		return nil
	}
}

// DecodeCreateDefaultPackageRequest returns a decoder for requests sent to the
// Repo CreateDefaultPackage endpoint.
func DecodeCreateDefaultPackageRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateDefaultPackageRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateDefaultPackageRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateDefaultPackageFileLocator(&body)

		return payload, nil
	}
}

// EncodeCreateDefaultPackageError returns an encoder for errors returned by
// the CreateDefaultPackage Repo endpoint.
func EncodeCreateDefaultPackageError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "already_exists":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateDefaultPackageAlreadyExistsResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreatePackageResponse returns an encoder for responses returned by the
// Repo CreatePackage endpoint.
func EncodeCreatePackageResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusCreated)
		return nil
	}
}

// DecodeCreatePackageRequest returns a decoder for requests sent to the Repo
// CreatePackage endpoint.
func DecodeCreatePackageRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreatePackageRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreatePackageRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreatePackagePackageFile(&body)

		return payload, nil
	}
}

// EncodeCreatePackageError returns an encoder for errors returned by the
// CreatePackage Repo endpoint.
func EncodeCreatePackageError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "already_exists":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreatePackageAlreadyExistsResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeletePackageResponse returns an encoder for responses returned by the
// Repo DeletePackage endpoint.
func EncodeDeletePackageResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeletePackageRequest returns a decoder for requests sent to the Repo
// DeletePackage endpoint.
func DecodeDeletePackageRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			repository string
			dir        string
			err        error
		)
		repository = r.URL.Query().Get("repo")
		if repository == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Repository", "query string"))
		}
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeletePackagePackageLocator(repository, dir)

		return payload, nil
	}
}

// EncodeDeletePackageError returns an encoder for errors returned by the
// DeletePackage Repo endpoint.
func EncodeDeletePackageError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeletePackageNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListPackagesResponse returns an encoder for responses returned by the
// Repo ListPackages endpoint.
func EncodeListPackagesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*types.Package)
		enc := encoder(ctx, w)
		body := NewListPackagesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListPackagesRequest returns a decoder for requests sent to the Repo
// ListPackages endpoint.
func DecodeListPackagesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			repository string
			err        error
		)
		repository = r.URL.Query().Get("repo")
		if repository == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Repository", "query string"))
		}
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewListPackagesRepository(repository)

		return payload, nil
	}
}

// EncodeListPackagesError returns an encoder for errors returned by the
// ListPackages Repo endpoint.
func EncodeListPackagesError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListPackagesNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeReadPackageResponse returns an encoder for responses returned by the
// Repo ReadPackage endpoint.
func EncodeReadPackageResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewReadPackageResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeReadPackageRequest returns a decoder for requests sent to the Repo
// ReadPackage endpoint.
func DecodeReadPackageRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			repository string
			dir        string
			err        error
		)
		repository = r.URL.Query().Get("repo")
		if repository == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Repository", "query string"))
		}
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewReadPackagePackageLocator(repository, dir)

		return payload, nil
	}
}

// EncodeReadPackageError returns an encoder for errors returned by the
// ReadPackage Repo endpoint.
func EncodeReadPackageError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewReadPackageNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetModelJSONResponse returns an encoder for responses returned by the
// Repo GetModelJSON endpoint.
func EncodeGetModelJSONResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(types.ModelJSON)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetModelJSONRequest returns a decoder for requests sent to the Repo
// GetModelJSON endpoint.
func DecodeGetModelJSONRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			repository string
			dir        string
			err        error
		)
		repository = r.URL.Query().Get("repo")
		if repository == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Repository", "query string"))
		}
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetModelJSONPackageLocator(repository, dir)

		return payload, nil
	}
}

// EncodeGetModelJSONError returns an encoder for errors returned by the
// GetModelJSON Repo endpoint.
func EncodeGetModelJSONError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetModelJSONNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "compilation_error":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetModelJSONCompilationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnprocessableEntity)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// DecodeSubscribeRequest returns a decoder for requests sent to the Repo
// Subscribe endpoint.
func DecodeSubscribeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			repository string
			dir        string
			err        error
		)
		repository = r.URL.Query().Get("repo")
		if repository == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Repository", "query string"))
		}
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewSubscribePackageLocator(repository, dir)

		return payload, nil
	}
}

// EncodeSubscribeError returns an encoder for errors returned by the Subscribe
// Repo endpoint.
func EncodeSubscribeError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewSubscribeNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// unmarshalFileLocatorRequestBodyToTypesFileLocator builds a value of type
// *types.FileLocator from a value of type *FileLocatorRequestBody.
func unmarshalFileLocatorRequestBodyToTypesFileLocator(v *FileLocatorRequestBody) *types.FileLocator {
	res := &types.FileLocator{
		Filename:   *v.Filename,
		Repository: *v.Repository,
		Dir:        *v.Dir,
	}

	return res
}

// marshalTypesPackageToPackageResponse builds a value of type *PackageResponse
// from a value of type *types.Package.
func marshalTypesPackageToPackageResponse(v *types.Package) *PackageResponse {
	res := &PackageResponse{
		ImportPath: v.ImportPath,
		Dir:        v.Dir,
	}

	return res
}

// marshalTypesPackageFileToPackageFileResponse builds a value of type
// *PackageFileResponse from a value of type *types.PackageFile.
func marshalTypesPackageFileToPackageFileResponse(v *types.PackageFile) *PackageFileResponse {
	res := &PackageFileResponse{
		Content: v.Content,
	}
	if v.Locator != nil {
		res.Locator = marshalTypesFileLocatorToFileLocatorResponse(v.Locator)
	}

	return res
}

// marshalTypesFileLocatorToFileLocatorResponse builds a value of type
// *FileLocatorResponse from a value of type *types.FileLocator.
func marshalTypesFileLocatorToFileLocatorResponse(v *types.FileLocator) *FileLocatorResponse {
	res := &FileLocatorResponse{
		Filename:   v.Filename,
		Repository: v.Repository,
		Dir:        v.Dir,
	}

	return res
}
