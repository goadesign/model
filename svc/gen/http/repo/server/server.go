// Code generated by goa v3.14.0, DO NOT EDIT.
//
// Repo HTTP server
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package server

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	repo "goa.design/model/svc/gen/repo"
	types "goa.design/model/svc/gen/types"
)

// Server lists the Repo service endpoint HTTP handlers.
type Server struct {
	Mounts               []*MountPoint
	CreateDefaultPackage http.Handler
	CreatePackage        http.Handler
	DeletePackage        http.Handler
	ListPackages         http.Handler
	ReadPackage          http.Handler
	GetModelJSON         http.Handler
	Subscribe            http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the Repo service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *repo.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer *ConnConfigurer,
) *Server {
	if configurer == nil {
		configurer = &ConnConfigurer{}
	}
	return &Server{
		Mounts: []*MountPoint{
			{"CreateDefaultPackage", "POST", "/api/repo/default"},
			{"CreatePackage", "POST", "/api/repo"},
			{"DeletePackage", "DELETE", "/api/repo"},
			{"ListPackages", "GET", "/api/repo"},
			{"ReadPackage", "GET", "/api/repo/files"},
			{"GetModelJSON", "GET", "/api/repo/json"},
			{"Subscribe", "GET", "/api/repo/subscribe"},
		},
		CreateDefaultPackage: NewCreateDefaultPackageHandler(e.CreateDefaultPackage, mux, decoder, encoder, errhandler, formatter),
		CreatePackage:        NewCreatePackageHandler(e.CreatePackage, mux, decoder, encoder, errhandler, formatter),
		DeletePackage:        NewDeletePackageHandler(e.DeletePackage, mux, decoder, encoder, errhandler, formatter),
		ListPackages:         NewListPackagesHandler(e.ListPackages, mux, decoder, encoder, errhandler, formatter),
		ReadPackage:          NewReadPackageHandler(e.ReadPackage, mux, decoder, encoder, errhandler, formatter),
		GetModelJSON:         NewGetModelJSONHandler(e.GetModelJSON, mux, decoder, encoder, errhandler, formatter),
		Subscribe:            NewSubscribeHandler(e.Subscribe, mux, decoder, encoder, errhandler, formatter, upgrader, configurer.SubscribeFn),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "Repo" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreateDefaultPackage = m(s.CreateDefaultPackage)
	s.CreatePackage = m(s.CreatePackage)
	s.DeletePackage = m(s.DeletePackage)
	s.ListPackages = m(s.ListPackages)
	s.ReadPackage = m(s.ReadPackage)
	s.GetModelJSON = m(s.GetModelJSON)
	s.Subscribe = m(s.Subscribe)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return repo.MethodNames[:] }

// Mount configures the mux to serve the Repo endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreateDefaultPackageHandler(mux, h.CreateDefaultPackage)
	MountCreatePackageHandler(mux, h.CreatePackage)
	MountDeletePackageHandler(mux, h.DeletePackage)
	MountListPackagesHandler(mux, h.ListPackages)
	MountReadPackageHandler(mux, h.ReadPackage)
	MountGetModelJSONHandler(mux, h.GetModelJSON)
	MountSubscribeHandler(mux, h.Subscribe)
}

// Mount configures the mux to serve the Repo endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreateDefaultPackageHandler configures the mux to serve the "Repo"
// service "CreateDefaultPackage" endpoint.
func MountCreateDefaultPackageHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/repo/default", f)
}

// NewCreateDefaultPackageHandler creates a HTTP handler which loads the HTTP
// request and calls the "Repo" service "CreateDefaultPackage" endpoint.
func NewCreateDefaultPackageHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateDefaultPackageRequest(mux, decoder)
		encodeResponse = EncodeCreateDefaultPackageResponse(encoder)
		encodeError    = EncodeCreateDefaultPackageError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateDefaultPackage")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Repo")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreatePackageHandler configures the mux to serve the "Repo" service
// "CreatePackage" endpoint.
func MountCreatePackageHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/repo", f)
}

// NewCreatePackageHandler creates a HTTP handler which loads the HTTP request
// and calls the "Repo" service "CreatePackage" endpoint.
func NewCreatePackageHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreatePackageRequest(mux, decoder)
		encodeResponse = EncodeCreatePackageResponse(encoder)
		encodeError    = EncodeCreatePackageError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreatePackage")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Repo")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeletePackageHandler configures the mux to serve the "Repo" service
// "DeletePackage" endpoint.
func MountDeletePackageHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/repo", f)
}

// NewDeletePackageHandler creates a HTTP handler which loads the HTTP request
// and calls the "Repo" service "DeletePackage" endpoint.
func NewDeletePackageHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeletePackageRequest(mux, decoder)
		encodeResponse = EncodeDeletePackageResponse(encoder)
		encodeError    = EncodeDeletePackageError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeletePackage")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Repo")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListPackagesHandler configures the mux to serve the "Repo" service
// "ListPackages" endpoint.
func MountListPackagesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/repo", f)
}

// NewListPackagesHandler creates a HTTP handler which loads the HTTP request
// and calls the "Repo" service "ListPackages" endpoint.
func NewListPackagesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListPackagesRequest(mux, decoder)
		encodeResponse = EncodeListPackagesResponse(encoder)
		encodeError    = EncodeListPackagesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "ListPackages")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Repo")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountReadPackageHandler configures the mux to serve the "Repo" service
// "ReadPackage" endpoint.
func MountReadPackageHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/repo/files", f)
}

// NewReadPackageHandler creates a HTTP handler which loads the HTTP request
// and calls the "Repo" service "ReadPackage" endpoint.
func NewReadPackageHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeReadPackageRequest(mux, decoder)
		encodeResponse = EncodeReadPackageResponse(encoder)
		encodeError    = EncodeReadPackageError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "ReadPackage")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Repo")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetModelJSONHandler configures the mux to serve the "Repo" service
// "GetModelJSON" endpoint.
func MountGetModelJSONHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/repo/json", f)
}

// NewGetModelJSONHandler creates a HTTP handler which loads the HTTP request
// and calls the "Repo" service "GetModelJSON" endpoint.
func NewGetModelJSONHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetModelJSONRequest(mux, decoder)
		encodeResponse = EncodeGetModelJSONResponse(encoder)
		encodeError    = EncodeGetModelJSONError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetModelJSON")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Repo")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSubscribeHandler configures the mux to serve the "Repo" service
// "Subscribe" endpoint.
func MountSubscribeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/repo/subscribe", f)
}

// NewSubscribeHandler creates a HTTP handler which loads the HTTP request and
// calls the "Repo" service "Subscribe" endpoint.
func NewSubscribeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer goahttp.ConnConfigureFunc,
) http.Handler {
	var (
		decodeRequest = DecodeSubscribeRequest(mux, decoder)
		encodeError   = EncodeSubscribeError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Subscribe")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Repo")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		v := &repo.SubscribeEndpointInput{
			Stream: &SubscribeServerStream{
				upgrader:   upgrader,
				configurer: configurer,
				cancel:     cancel,
				w:          w,
				r:          r,
			},
			Payload: payload.(*types.PackageLocator),
		}
		_, err = endpoint(ctx, v)
		if err != nil {
			if v.Stream.(*SubscribeServerStream).conn != nil {
				// Response writer has been hijacked, do not encode the error
				errhandler(ctx, w, err)
				return
			}
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
	})
}
