// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Repo HTTP server types
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package server

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	types "goa.design/model/svc/gen/types"
)

// CreatePackageRequestBody is the type of the "Repo" service "CreatePackage"
// endpoint HTTP request body.
type CreatePackageRequestBody struct {
	// Path to file containing DSL code
	Locator *FileLocatorRequestBody `form:"Locator,omitempty" json:"Locator,omitempty" xml:"Locator,omitempty"`
	// DSL code
	Content *string `form:"Content,omitempty" json:"Content,omitempty" xml:"Content,omitempty"`
}

// ListPackagesResponseBody is the type of the "Repo" service "ListPackages"
// endpoint HTTP response body.
type ListPackagesResponseBody []*PackageResponse

// ReadPackageResponseBody is the type of the "Repo" service "ReadPackage"
// endpoint HTTP response body.
type ReadPackageResponseBody []*PackageFileResponse

// SubscribeResponseBody is the type of the "Repo" service "Subscribe" endpoint
// HTTP response body.
type SubscribeResponseBody struct {
	// Model JSON if compilation succeeded
	Model *string `form:"Model,omitempty" json:"Model,omitempty" xml:"Model,omitempty"`
	// Compilation error if any
	Error *string `form:"Error,omitempty" json:"Error,omitempty" xml:"Error,omitempty"`
}

// CreatePackageAlreadyExistsResponseBody is the type of the "Repo" service
// "CreatePackage" endpoint HTTP response body for the "already_exists" error.
type CreatePackageAlreadyExistsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeletePackageNotFoundResponseBody is the type of the "Repo" service
// "DeletePackage" endpoint HTTP response body for the "not_found" error.
type DeletePackageNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListPackagesNotFoundResponseBody is the type of the "Repo" service
// "ListPackages" endpoint HTTP response body for the "not_found" error.
type ListPackagesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ReadPackageNotFoundResponseBody is the type of the "Repo" service
// "ReadPackage" endpoint HTTP response body for the "not_found" error.
type ReadPackageNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetModelJSONNotFoundResponseBody is the type of the "Repo" service
// "GetModelJSON" endpoint HTTP response body for the "not_found" error.
type GetModelJSONNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetModelJSONCompilationErrorResponseBody is the type of the "Repo" service
// "GetModelJSON" endpoint HTTP response body for the "compilation_error" error.
type GetModelJSONCompilationErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SubscribeNotFoundResponseBody is the type of the "Repo" service "Subscribe"
// endpoint HTTP response body for the "not_found" error.
type SubscribeNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PackageResponse is used to define fields on response body types.
type PackageResponse struct {
	// Design Go package import path
	ImportPath string `form:"ImportPath" json:"ImportPath" xml:"ImportPath"`
	// Path to directory containing a model package
	Dir string `form:"Dir" json:"Dir" xml:"Dir"`
}

// PackageFileResponse is used to define fields on response body types.
type PackageFileResponse struct {
	// Path to file containing DSL code
	Locator *FileLocatorResponse `form:"Locator" json:"Locator" xml:"Locator"`
	// DSL code
	Content string `form:"Content" json:"Content" xml:"Content"`
}

// FileLocatorResponse is used to define fields on response body types.
type FileLocatorResponse struct {
	// Name of DSL file
	Filename string `form:"Filename" json:"Filename" xml:"Filename"`
	// Path to repository root
	Repository string `form:"Repository" json:"Repository" xml:"Repository"`
	// Path to directory containing a model package
	Dir string `form:"Dir" json:"Dir" xml:"Dir"`
}

// FileLocatorRequestBody is used to define fields on request body types.
type FileLocatorRequestBody struct {
	// Name of DSL file
	Filename *string `form:"Filename,omitempty" json:"Filename,omitempty" xml:"Filename,omitempty"`
	// Path to repository root
	Repository *string `form:"Repository,omitempty" json:"Repository,omitempty" xml:"Repository,omitempty"`
	// Path to directory containing a model package
	Dir *string `form:"Dir,omitempty" json:"Dir,omitempty" xml:"Dir,omitempty"`
}

// NewListPackagesResponseBody builds the HTTP response body from the result of
// the "ListPackages" endpoint of the "Repo" service.
func NewListPackagesResponseBody(res []*types.Package) ListPackagesResponseBody {
	body := make([]*PackageResponse, len(res))
	for i, val := range res {
		body[i] = marshalTypesPackageToPackageResponse(val)
	}
	return body
}

// NewReadPackageResponseBody builds the HTTP response body from the result of
// the "ReadPackage" endpoint of the "Repo" service.
func NewReadPackageResponseBody(res []*types.PackageFile) ReadPackageResponseBody {
	body := make([]*PackageFileResponse, len(res))
	for i, val := range res {
		body[i] = marshalTypesPackageFileToPackageFileResponse(val)
	}
	return body
}

// NewSubscribeResponseBody builds the HTTP response body from the result of
// the "Subscribe" endpoint of the "Repo" service.
func NewSubscribeResponseBody(res *types.CompilationResults) *SubscribeResponseBody {
	body := &SubscribeResponseBody{
		Error: res.Error,
	}
	if res.Model != nil {
		model := string(*res.Model)
		body.Model = &model
	}
	return body
}

// NewCreatePackageAlreadyExistsResponseBody builds the HTTP response body from
// the result of the "CreatePackage" endpoint of the "Repo" service.
func NewCreatePackageAlreadyExistsResponseBody(res *goa.ServiceError) *CreatePackageAlreadyExistsResponseBody {
	body := &CreatePackageAlreadyExistsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeletePackageNotFoundResponseBody builds the HTTP response body from the
// result of the "DeletePackage" endpoint of the "Repo" service.
func NewDeletePackageNotFoundResponseBody(res *goa.ServiceError) *DeletePackageNotFoundResponseBody {
	body := &DeletePackageNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPackagesNotFoundResponseBody builds the HTTP response body from the
// result of the "ListPackages" endpoint of the "Repo" service.
func NewListPackagesNotFoundResponseBody(res *goa.ServiceError) *ListPackagesNotFoundResponseBody {
	body := &ListPackagesNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewReadPackageNotFoundResponseBody builds the HTTP response body from the
// result of the "ReadPackage" endpoint of the "Repo" service.
func NewReadPackageNotFoundResponseBody(res *goa.ServiceError) *ReadPackageNotFoundResponseBody {
	body := &ReadPackageNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetModelJSONNotFoundResponseBody builds the HTTP response body from the
// result of the "GetModelJSON" endpoint of the "Repo" service.
func NewGetModelJSONNotFoundResponseBody(res *goa.ServiceError) *GetModelJSONNotFoundResponseBody {
	body := &GetModelJSONNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetModelJSONCompilationErrorResponseBody builds the HTTP response body
// from the result of the "GetModelJSON" endpoint of the "Repo" service.
func NewGetModelJSONCompilationErrorResponseBody(res *goa.ServiceError) *GetModelJSONCompilationErrorResponseBody {
	body := &GetModelJSONCompilationErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSubscribeNotFoundResponseBody builds the HTTP response body from the
// result of the "Subscribe" endpoint of the "Repo" service.
func NewSubscribeNotFoundResponseBody(res *goa.ServiceError) *SubscribeNotFoundResponseBody {
	body := &SubscribeNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePackagePackageFile builds a Repo service CreatePackage endpoint
// payload.
func NewCreatePackagePackageFile(body *CreatePackageRequestBody) *types.PackageFile {
	v := &types.PackageFile{
		Content: *body.Content,
	}
	v.Locator = unmarshalFileLocatorRequestBodyToTypesFileLocator(body.Locator)

	return v
}

// NewDeletePackagePackageLocator builds a Repo service DeletePackage endpoint
// payload.
func NewDeletePackagePackageLocator(repository string, dir string) *types.PackageLocator {
	v := &types.PackageLocator{}
	v.Repository = repository
	v.Dir = dir

	return v
}

// NewListPackagesRepository builds a Repo service ListPackages endpoint
// payload.
func NewListPackagesRepository(repository string) *types.Repository {
	v := &types.Repository{}
	v.Repository = repository

	return v
}

// NewReadPackagePackageLocator builds a Repo service ReadPackage endpoint
// payload.
func NewReadPackagePackageLocator(repository string, dir string) *types.PackageLocator {
	v := &types.PackageLocator{}
	v.Repository = repository
	v.Dir = dir

	return v
}

// NewGetModelJSONPackageLocator builds a Repo service GetModelJSON endpoint
// payload.
func NewGetModelJSONPackageLocator(repository string, dir string) *types.PackageLocator {
	v := &types.PackageLocator{}
	v.Repository = repository
	v.Dir = dir

	return v
}

// NewSubscribePackageLocator builds a Repo service Subscribe endpoint payload.
func NewSubscribePackageLocator(repository string, dir string) *types.PackageLocator {
	v := &types.PackageLocator{}
	v.Repository = repository
	v.Dir = dir

	return v
}

// ValidateCreatePackageRequestBody runs the validations defined on
// CreatePackageRequestBody
func ValidateCreatePackageRequestBody(body *CreatePackageRequestBody) (err error) {
	if body.Locator == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Locator", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Content", "body"))
	}
	if body.Locator != nil {
		if err2 := ValidateFileLocatorRequestBody(body.Locator); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Content != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.Content", *body.Content, "import . \"goa.design/model/dsl\""))
	}
	if body.Content != nil {
		if utf8.RuneCountInString(*body.Content) < 58 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Content", *body.Content, utf8.RuneCountInString(*body.Content), 58, true))
		}
	}
	return
}

// ValidateFileLocatorRequestBody runs the validations defined on
// FileLocatorRequestBody
func ValidateFileLocatorRequestBody(body *FileLocatorRequestBody) (err error) {
	if body.Filename == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Filename", "body"))
	}
	if body.Repository == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Repository", "body"))
	}
	if body.Dir == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "body"))
	}
	if body.Filename != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.Filename", *body.Filename, "\\.go$"))
	}
	if body.Repository != nil {
		if utf8.RuneCountInString(*body.Repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Repository", *body.Repository, utf8.RuneCountInString(*body.Repository), 1, true))
		}
	}
	if body.Dir != nil {
		if utf8.RuneCountInString(*body.Dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Dir", *body.Dir, utf8.RuneCountInString(*body.Dir), 1, true))
		}
	}
	return
}
