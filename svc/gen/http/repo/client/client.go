// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Repo client HTTP transport
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package client

import (
	"context"
	"net/http"
	"time"

	"github.com/gorilla/websocket"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the Repo service endpoint HTTP clients.
type Client struct {
	// CreatePackage Doer is the HTTP client used to make requests to the
	// CreatePackage endpoint.
	CreatePackageDoer goahttp.Doer

	// DeletePackage Doer is the HTTP client used to make requests to the
	// DeletePackage endpoint.
	DeletePackageDoer goahttp.Doer

	// ListPackages Doer is the HTTP client used to make requests to the
	// ListPackages endpoint.
	ListPackagesDoer goahttp.Doer

	// ReadPackage Doer is the HTTP client used to make requests to the ReadPackage
	// endpoint.
	ReadPackageDoer goahttp.Doer

	// GetModelJSON Doer is the HTTP client used to make requests to the
	// GetModelJSON endpoint.
	GetModelJSONDoer goahttp.Doer

	// Subscribe Doer is the HTTP client used to make requests to the Subscribe
	// endpoint.
	SubscribeDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme     string
	host       string
	encoder    func(*http.Request) goahttp.Encoder
	decoder    func(*http.Response) goahttp.Decoder
	dialer     goahttp.Dialer
	configurer *ConnConfigurer
}

// NewClient instantiates HTTP clients for all the Repo service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
	dialer goahttp.Dialer,
	cfn *ConnConfigurer,
) *Client {
	if cfn == nil {
		cfn = &ConnConfigurer{}
	}
	return &Client{
		CreatePackageDoer:   doer,
		DeletePackageDoer:   doer,
		ListPackagesDoer:    doer,
		ReadPackageDoer:     doer,
		GetModelJSONDoer:    doer,
		SubscribeDoer:       doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
		dialer:              dialer,
		configurer:          cfn,
	}
}

// CreatePackage returns an endpoint that makes HTTP requests to the Repo
// service CreatePackage server.
func (c *Client) CreatePackage() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreatePackageRequest(c.encoder)
		decodeResponse = DecodeCreatePackageResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreatePackageRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreatePackageDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Repo", "CreatePackage", err)
		}
		return decodeResponse(resp)
	}
}

// DeletePackage returns an endpoint that makes HTTP requests to the Repo
// service DeletePackage server.
func (c *Client) DeletePackage() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeletePackageRequest(c.encoder)
		decodeResponse = DecodeDeletePackageResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeletePackageRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeletePackageDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Repo", "DeletePackage", err)
		}
		return decodeResponse(resp)
	}
}

// ListPackages returns an endpoint that makes HTTP requests to the Repo
// service ListPackages server.
func (c *Client) ListPackages() goa.Endpoint {
	var (
		encodeRequest  = EncodeListPackagesRequest(c.encoder)
		decodeResponse = DecodeListPackagesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListPackagesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListPackagesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Repo", "ListPackages", err)
		}
		return decodeResponse(resp)
	}
}

// ReadPackage returns an endpoint that makes HTTP requests to the Repo service
// ReadPackage server.
func (c *Client) ReadPackage() goa.Endpoint {
	var (
		encodeRequest  = EncodeReadPackageRequest(c.encoder)
		decodeResponse = DecodeReadPackageResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildReadPackageRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ReadPackageDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Repo", "ReadPackage", err)
		}
		return decodeResponse(resp)
	}
}

// GetModelJSON returns an endpoint that makes HTTP requests to the Repo
// service GetModelJSON server.
func (c *Client) GetModelJSON() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetModelJSONRequest(c.encoder)
		decodeResponse = DecodeGetModelJSONResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetModelJSONRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetModelJSONDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Repo", "GetModelJSON", err)
		}
		return decodeResponse(resp)
	}
}

// Subscribe returns an endpoint that makes HTTP requests to the Repo service
// Subscribe server.
func (c *Client) Subscribe() goa.Endpoint {
	var (
		encodeRequest  = EncodeSubscribeRequest(c.encoder)
		decodeResponse = DecodeSubscribeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSubscribeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("Repo", "Subscribe", err)
		}
		if c.configurer.SubscribeFn != nil {
			var cancel context.CancelFunc
			ctx, cancel = context.WithCancel(ctx)
			conn = c.configurer.SubscribeFn(conn, cancel)
		}
		go func() {
			<-ctx.Done()
			conn.WriteControl(
				websocket.CloseMessage,
				websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing connection"),
				time.Now().Add(time.Second),
			)
			conn.Close()
		}()
		stream := &SubscribeClientStream{conn: conn}
		return stream, nil
	}
}
