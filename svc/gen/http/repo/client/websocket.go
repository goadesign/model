// Code generated by goa v3.14.0, DO NOT EDIT.
//
// Repo WebSocket client streaming
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package client

import (
	"io"

	"github.com/gorilla/websocket"
	goahttp "goa.design/goa/v3/http"
	types "goa.design/model/svc/gen/types"
)

// ConnConfigurer holds the websocket connection configurer functions for the
// streaming endpoints in "Repo" service.
type ConnConfigurer struct {
	SubscribeFn goahttp.ConnConfigureFunc
}

// SubscribeClientStream implements the repo.SubscribeClientStream interface.
type SubscribeClientStream struct {
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// NewConnConfigurer initializes the websocket connection configurer function
// with fn for all the streaming endpoints in "Repo" service.
func NewConnConfigurer(fn goahttp.ConnConfigureFunc) *ConnConfigurer {
	return &ConnConfigurer{
		SubscribeFn: fn,
	}
}

// Recv reads instances of "types.CompilationResults" from the "Subscribe"
// endpoint websocket connection.
func (s *SubscribeClientStream) Recv() (*types.CompilationResults, error) {
	var (
		rv   *types.CompilationResults
		body SubscribeResponseBody
		err  error
	)
	err = s.conn.ReadJSON(&body)
	if websocket.IsCloseError(err, websocket.CloseNormalClosure) {
		s.conn.Close()
		return rv, io.EOF
	}
	if err != nil {
		return rv, err
	}
	err = ValidateSubscribeResponseBody(&body)
	if err != nil {
		return rv, err
	}
	res := NewSubscribeCompilationResultsSwitchingProtocols(&body)
	return res, nil
}
