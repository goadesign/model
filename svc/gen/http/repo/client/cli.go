// Code generated by goa v3.14.0, DO NOT EDIT.
//
// Repo HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	types "goa.design/model/svc/gen/types"
)

// BuildCreatePackagePayload builds the payload for the Repo CreatePackage
// endpoint from CLI flags.
func BuildCreatePackagePayload(repoCreatePackageBody string) (*types.PackageFile, error) {
	var err error
	var body CreatePackageRequestBody
	{
		err = json.Unmarshal([]byte(repoCreatePackageBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"Content\": \"package model\\n\\nimport . \\\"goa.design/model/dsl\\\"\\n\\nvar _ = Design(func() {})\",\n      \"Locator\": {\n         \"Dir\": \"services/my-service/diagram\",\n         \"Filename\": \"model.go\",\n         \"Repository\": \"my-repo\"\n      }\n   }'")
		}
		if body.Locator == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Locator", "body"))
		}
		if body.Locator != nil {
			if err2 := ValidateFileLocatorRequestBody(body.Locator); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.Content", body.Content, "import . \"goa.design/model/dsl\""))
		if utf8.RuneCountInString(body.Content) < 58 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Content", body.Content, utf8.RuneCountInString(body.Content), 58, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &types.PackageFile{
		Content: body.Content,
	}
	if body.Locator != nil {
		v.Locator = marshalFileLocatorRequestBodyToTypesFileLocator(body.Locator)
	}

	return v, nil
}

// BuildDeletePackagePayload builds the payload for the Repo DeletePackage
// endpoint from CLI flags.
func BuildDeletePackagePayload(repoDeletePackageRepository string, repoDeletePackageDir string) (*types.PackageLocator, error) {
	var err error
	var repository string
	{
		repository = repoDeletePackageRepository
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var dir string
	{
		dir = repoDeletePackageDir
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &types.PackageLocator{}
	v.Repository = repository
	v.Dir = dir

	return v, nil
}

// BuildListPackagesPayload builds the payload for the Repo ListPackages
// endpoint from CLI flags.
func BuildListPackagesPayload(repoListPackagesRepository string) (*types.Repository, error) {
	var err error
	var repository string
	{
		repository = repoListPackagesRepository
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &types.Repository{}
	v.Repository = repository

	return v, nil
}

// BuildReadPackagePayload builds the payload for the Repo ReadPackage endpoint
// from CLI flags.
func BuildReadPackagePayload(repoReadPackageRepository string, repoReadPackageDir string) (*types.PackageLocator, error) {
	var err error
	var repository string
	{
		repository = repoReadPackageRepository
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var dir string
	{
		dir = repoReadPackageDir
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &types.PackageLocator{}
	v.Repository = repository
	v.Dir = dir

	return v, nil
}

// BuildGetModelJSONPayload builds the payload for the Repo GetModelJSON
// endpoint from CLI flags.
func BuildGetModelJSONPayload(repoGetModelJSONRepository string, repoGetModelJSONDir string) (*types.PackageLocator, error) {
	var err error
	var repository string
	{
		repository = repoGetModelJSONRepository
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var dir string
	{
		dir = repoGetModelJSONDir
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &types.PackageLocator{}
	v.Repository = repository
	v.Dir = dir

	return v, nil
}

// BuildSubscribePayload builds the payload for the Repo Subscribe endpoint
// from CLI flags.
func BuildSubscribePayload(repoSubscribeRepository string, repoSubscribeDir string) (*types.PackageLocator, error) {
	var err error
	var repository string
	{
		repository = repoSubscribeRepository
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var dir string
	{
		dir = repoSubscribeDir
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &types.PackageLocator{}
	v.Repository = repository
	v.Dir = dir

	return v, nil
}
