// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Packages HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	packages "goa.design/model/svc/gen/packages"
	types "goa.design/model/svc/gen/types"
)

// BuildCreatePackagePayload builds the payload for the Packages CreatePackage
// endpoint from CLI flags.
func BuildCreatePackagePayload(packagesCreatePackageBody string, packagesCreatePackageWorkspace string, packagesCreatePackageDir string) (*packages.CreatePackagePayload, error) {
	var err error
	var body CreatePackageRequestBody
	{
		err = json.Unmarshal([]byte(packagesCreatePackageBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"Content\": \"import . \\\"goa.design/model/dsl\\\"\\n\\nvar _ = Design(\\\"System Design\\\", func() {\\n\\n})\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.Content", body.Content, "import . \"goa.design/model/dsl\""))
		if utf8.RuneCountInString(body.Content) < 58 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Content", body.Content, utf8.RuneCountInString(body.Content), 58, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var workspace string
	{
		workspace = packagesCreatePackageWorkspace
		if utf8.RuneCountInString(workspace) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Workspace", workspace, utf8.RuneCountInString(workspace), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var dir string
	{
		dir = packagesCreatePackageDir
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &packages.CreatePackagePayload{
		Content: body.Content,
	}
	v.Workspace = workspace
	v.Dir = dir

	return v, nil
}

// BuildDeletePackagePayload builds the payload for the Packages DeletePackage
// endpoint from CLI flags.
func BuildDeletePackagePayload(packagesDeletePackageWorkspace string, packagesDeletePackageDir string) (*types.PackageLocator, error) {
	var err error
	var workspace string
	{
		workspace = packagesDeletePackageWorkspace
		if utf8.RuneCountInString(workspace) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Workspace", workspace, utf8.RuneCountInString(workspace), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var dir string
	{
		dir = packagesDeletePackageDir
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &types.PackageLocator{}
	v.Workspace = workspace
	v.Dir = dir

	return v, nil
}

// BuildListPackagesPayload builds the payload for the Packages ListPackages
// endpoint from CLI flags.
func BuildListPackagesPayload(packagesListPackagesWorkspace string) (*types.Workspace, error) {
	var err error
	var workspace string
	{
		workspace = packagesListPackagesWorkspace
		if utf8.RuneCountInString(workspace) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Workspace", workspace, utf8.RuneCountInString(workspace), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &types.Workspace{}
	v.Workspace = workspace

	return v, nil
}

// BuildReadPackageFilesPayload builds the payload for the Packages
// ReadPackageFiles endpoint from CLI flags.
func BuildReadPackageFilesPayload(packagesReadPackageFilesWorkspace string, packagesReadPackageFilesDir string) (*types.PackageLocator, error) {
	var err error
	var workspace string
	{
		workspace = packagesReadPackageFilesWorkspace
		if utf8.RuneCountInString(workspace) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Workspace", workspace, utf8.RuneCountInString(workspace), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var dir string
	{
		dir = packagesReadPackageFilesDir
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &types.PackageLocator{}
	v.Workspace = workspace
	v.Dir = dir

	return v, nil
}

// BuildSubscribePayload builds the payload for the Packages Subscribe endpoint
// from CLI flags.
func BuildSubscribePayload(packagesSubscribeWorkspace string, packagesSubscribeDir string) (*types.PackageLocator, error) {
	var err error
	var workspace string
	{
		workspace = packagesSubscribeWorkspace
		if utf8.RuneCountInString(workspace) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Workspace", workspace, utf8.RuneCountInString(workspace), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var dir string
	{
		dir = packagesSubscribeDir
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &types.PackageLocator{}
	v.Workspace = workspace
	v.Dir = dir

	return v, nil
}
