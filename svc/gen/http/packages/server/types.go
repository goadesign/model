// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Packages HTTP server types
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package server

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	packages "goa.design/model/svc/gen/packages"
	types "goa.design/model/svc/gen/types"
)

// CreatePackageRequestBody is the type of the "Packages" service
// "CreatePackage" endpoint HTTP request body.
type CreatePackageRequestBody struct {
	// DSL code
	Content *string `form:"Content,omitempty" json:"Content,omitempty" xml:"Content,omitempty"`
}

// ListWorkspacesResponseBody is the type of the "Packages" service
// "ListWorkspaces" endpoint HTTP response body.
type ListWorkspacesResponseBody []*WorkspaceResponse

// ListPackagesResponseBody is the type of the "Packages" service
// "ListPackages" endpoint HTTP response body.
type ListPackagesResponseBody []*PackageResponse

// ReadPackageFilesResponseBody is the type of the "Packages" service
// "ReadPackageFiles" endpoint HTTP response body.
type ReadPackageFilesResponseBody []*PackageFileResponse

// CreatePackageAlreadyExistsResponseBody is the type of the "Packages" service
// "CreatePackage" endpoint HTTP response body for the "already_exists" error.
type CreatePackageAlreadyExistsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeletePackageNotFoundResponseBody is the type of the "Packages" service
// "DeletePackage" endpoint HTTP response body for the "not_found" error.
type DeletePackageNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// WorkspaceResponse is used to define fields on response body types.
type WorkspaceResponse struct {
	// Workspace identifier
	Workspace string `form:"Workspace" json:"Workspace" xml:"Workspace"`
}

// PackageResponse is used to define fields on response body types.
type PackageResponse struct {
	// Design Go package import path
	ImportPath string `form:"ImportPath" json:"ImportPath" xml:"ImportPath"`
	// Path to directory containing a model package
	Dir string `form:"Dir" json:"Dir" xml:"Dir"`
}

// PackageFileResponse is used to define fields on response body types.
type PackageFileResponse struct {
	// Path to file containing DSL code
	Locator *FileLocatorResponse `form:"Locator" json:"Locator" xml:"Locator"`
	// DSL code
	Content string `form:"Content" json:"Content" xml:"Content"`
}

// FileLocatorResponse is used to define fields on response body types.
type FileLocatorResponse struct {
	// Name of DSL file
	Filename string `form:"Filename" json:"Filename" xml:"Filename"`
	// Workspace identifier
	Workspace string `form:"Workspace" json:"Workspace" xml:"Workspace"`
	// Path to directory containing a model package
	Dir string `form:"Dir" json:"Dir" xml:"Dir"`
}

// NewListWorkspacesResponseBody builds the HTTP response body from the result
// of the "ListWorkspaces" endpoint of the "Packages" service.
func NewListWorkspacesResponseBody(res []*types.Workspace) ListWorkspacesResponseBody {
	body := make([]*WorkspaceResponse, len(res))
	for i, val := range res {
		body[i] = marshalTypesWorkspaceToWorkspaceResponse(val)
	}
	return body
}

// NewListPackagesResponseBody builds the HTTP response body from the result of
// the "ListPackages" endpoint of the "Packages" service.
func NewListPackagesResponseBody(res []*types.Package) ListPackagesResponseBody {
	body := make([]*PackageResponse, len(res))
	for i, val := range res {
		body[i] = marshalTypesPackageToPackageResponse(val)
	}
	return body
}

// NewReadPackageFilesResponseBody builds the HTTP response body from the
// result of the "ReadPackageFiles" endpoint of the "Packages" service.
func NewReadPackageFilesResponseBody(res []*types.PackageFile) ReadPackageFilesResponseBody {
	body := make([]*PackageFileResponse, len(res))
	for i, val := range res {
		body[i] = marshalTypesPackageFileToPackageFileResponse(val)
	}
	return body
}

// NewCreatePackageAlreadyExistsResponseBody builds the HTTP response body from
// the result of the "CreatePackage" endpoint of the "Packages" service.
func NewCreatePackageAlreadyExistsResponseBody(res *goa.ServiceError) *CreatePackageAlreadyExistsResponseBody {
	body := &CreatePackageAlreadyExistsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeletePackageNotFoundResponseBody builds the HTTP response body from the
// result of the "DeletePackage" endpoint of the "Packages" service.
func NewDeletePackageNotFoundResponseBody(res *goa.ServiceError) *DeletePackageNotFoundResponseBody {
	body := &DeletePackageNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePackagePayload builds a Packages service CreatePackage endpoint
// payload.
func NewCreatePackagePayload(body *CreatePackageRequestBody, workspace string, dir string) *packages.CreatePackagePayload {
	v := &packages.CreatePackagePayload{
		Content: *body.Content,
	}
	v.Workspace = workspace
	v.Dir = dir

	return v
}

// NewDeletePackagePackageLocator builds a Packages service DeletePackage
// endpoint payload.
func NewDeletePackagePackageLocator(workspace string, dir string) *types.PackageLocator {
	v := &types.PackageLocator{}
	v.Workspace = workspace
	v.Dir = dir

	return v
}

// NewListPackagesWorkspace builds a Packages service ListPackages endpoint
// payload.
func NewListPackagesWorkspace(workspace string) *types.Workspace {
	v := &types.Workspace{}
	v.Workspace = workspace

	return v
}

// NewReadPackageFilesPackageLocator builds a Packages service ReadPackageFiles
// endpoint payload.
func NewReadPackageFilesPackageLocator(workspace string, dir string) *types.PackageLocator {
	v := &types.PackageLocator{}
	v.Workspace = workspace
	v.Dir = dir

	return v
}

// NewSubscribePackageLocator builds a Packages service Subscribe endpoint
// payload.
func NewSubscribePackageLocator(workspace string, dir string) *types.PackageLocator {
	v := &types.PackageLocator{}
	v.Workspace = workspace
	v.Dir = dir

	return v
}

// ValidateCreatePackageRequestBody runs the validations defined on
// CreatePackageRequestBody
func ValidateCreatePackageRequestBody(body *CreatePackageRequestBody) (err error) {
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Content", "body"))
	}
	if body.Content != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.Content", *body.Content, "import . \"goa.design/model/dsl\""))
	}
	if body.Content != nil {
		if utf8.RuneCountInString(*body.Content) < 58 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Content", *body.Content, utf8.RuneCountInString(*body.Content), 58, true))
		}
	}
	return
}
