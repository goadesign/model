// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Packages HTTP server encoders and decoders
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"unicode/utf8"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	types "goa.design/model/svc/gen/types"
)

// EncodeListWorkspacesResponse returns an encoder for responses returned by
// the Packages ListWorkspaces endpoint.
func EncodeListWorkspacesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*types.Workspace)
		enc := encoder(ctx, w)
		body := NewListWorkspacesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeCreatePackageResponse returns an encoder for responses returned by the
// Packages CreatePackage endpoint.
func EncodeCreatePackageResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusCreated)
		return nil
	}
}

// DecodeCreatePackageRequest returns a decoder for requests sent to the
// Packages CreatePackage endpoint.
func DecodeCreatePackageRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreatePackageRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreatePackageRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			workspace string
			dir       string
		)
		workspace = r.URL.Query().Get("work")
		if workspace == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Workspace", "query string"))
		}
		if utf8.RuneCountInString(workspace) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Workspace", workspace, utf8.RuneCountInString(workspace), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreatePackagePayload(&body, workspace, dir)

		return payload, nil
	}
}

// EncodeCreatePackageError returns an encoder for errors returned by the
// CreatePackage Packages endpoint.
func EncodeCreatePackageError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "already_exists":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreatePackageAlreadyExistsResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeletePackageResponse returns an encoder for responses returned by the
// Packages DeletePackage endpoint.
func EncodeDeletePackageResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeletePackageRequest returns a decoder for requests sent to the
// Packages DeletePackage endpoint.
func DecodeDeletePackageRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			workspace string
			dir       string
			err       error
		)
		workspace = r.URL.Query().Get("work")
		if workspace == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Workspace", "query string"))
		}
		if utf8.RuneCountInString(workspace) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Workspace", workspace, utf8.RuneCountInString(workspace), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeletePackagePackageLocator(workspace, dir)

		return payload, nil
	}
}

// EncodeDeletePackageError returns an encoder for errors returned by the
// DeletePackage Packages endpoint.
func EncodeDeletePackageError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeletePackageNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListPackagesResponse returns an encoder for responses returned by the
// Packages ListPackages endpoint.
func EncodeListPackagesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*types.Package)
		enc := encoder(ctx, w)
		body := NewListPackagesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListPackagesRequest returns a decoder for requests sent to the
// Packages ListPackages endpoint.
func DecodeListPackagesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			workspace string
			err       error
		)
		workspace = r.URL.Query().Get("work")
		if workspace == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Workspace", "query string"))
		}
		if utf8.RuneCountInString(workspace) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Workspace", workspace, utf8.RuneCountInString(workspace), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewListPackagesWorkspace(workspace)

		return payload, nil
	}
}

// EncodeReadPackageFilesResponse returns an encoder for responses returned by
// the Packages ReadPackageFiles endpoint.
func EncodeReadPackageFilesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewReadPackageFilesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeReadPackageFilesRequest returns a decoder for requests sent to the
// Packages ReadPackageFiles endpoint.
func DecodeReadPackageFilesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			workspace string
			dir       string
			err       error
		)
		workspace = r.URL.Query().Get("work")
		if workspace == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Workspace", "query string"))
		}
		if utf8.RuneCountInString(workspace) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Workspace", workspace, utf8.RuneCountInString(workspace), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewReadPackageFilesPackageLocator(workspace, dir)

		return payload, nil
	}
}

// DecodeSubscribeRequest returns a decoder for requests sent to the Packages
// Subscribe endpoint.
func DecodeSubscribeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			workspace string
			dir       string
			err       error
		)
		workspace = r.URL.Query().Get("work")
		if workspace == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Workspace", "query string"))
		}
		if utf8.RuneCountInString(workspace) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Workspace", workspace, utf8.RuneCountInString(workspace), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewSubscribePackageLocator(workspace, dir)

		return payload, nil
	}
}

// marshalTypesWorkspaceToWorkspaceResponse builds a value of type
// *WorkspaceResponse from a value of type *types.Workspace.
func marshalTypesWorkspaceToWorkspaceResponse(v *types.Workspace) *WorkspaceResponse {
	res := &WorkspaceResponse{
		Workspace: v.Workspace,
	}

	return res
}

// marshalTypesPackageToPackageResponse builds a value of type *PackageResponse
// from a value of type *types.Package.
func marshalTypesPackageToPackageResponse(v *types.Package) *PackageResponse {
	res := &PackageResponse{
		ImportPath: v.ImportPath,
		Dir:        v.Dir,
	}

	return res
}

// marshalTypesPackageFileToPackageFileResponse builds a value of type
// *PackageFileResponse from a value of type *types.PackageFile.
func marshalTypesPackageFileToPackageFileResponse(v *types.PackageFile) *PackageFileResponse {
	res := &PackageFileResponse{
		Content: v.Content,
	}
	if v.Locator != nil {
		res.Locator = marshalTypesFileLocatorToFileLocatorResponse(v.Locator)
	}

	return res
}

// marshalTypesFileLocatorToFileLocatorResponse builds a value of type
// *FileLocatorResponse from a value of type *types.FileLocator.
func marshalTypesFileLocatorToFileLocatorResponse(v *types.FileLocator) *FileLocatorResponse {
	res := &FileLocatorResponse{
		Filename:  v.Filename,
		Workspace: v.Workspace,
		Dir:       v.Dir,
	}

	return res
}
