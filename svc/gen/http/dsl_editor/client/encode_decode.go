// Code generated by goa v3.13.2, DO NOT EDIT.
//
// DSLEditor HTTP client encoders and decoders
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	dsleditor "goa.design/model/svc/gen/dsl_editor"
	types "goa.design/model/svc/gen/types"
)

// BuildUpdateDSLRequest instantiates a HTTP request object with method and
// path set to call the "DSLEditor" service "UpdateDSL" endpoint
func (c *Client) BuildUpdateDSLRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateDSLDSLEditorPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpdateDSL", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateDSLRequest returns an encoder for requests sent to the DSLEditor
// UpdateDSL server.
func EncodeUpdateDSLRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*types.PackageFile)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpdateDSL", "*types.PackageFile", v)
		}
		body := NewUpdateDSLRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpdateDSL", err)
		}
		return nil
	}
}

// DecodeUpdateDSLResponse returns a decoder for responses returned by the
// DSLEditor UpdateDSL endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateDSLResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpdateDSLResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body UpdateDSLCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpdateDSL", err)
			}
			err = ValidateUpdateDSLCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpdateDSL", err)
			}
			return nil, NewUpdateDSLCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpdateDSL", resp.StatusCode, string(body))
		}
	}
}

// BuildUpsertSystemRequest instantiates a HTTP request object with method and
// path set to call the "DSLEditor" service "UpsertSystem" endpoint
func (c *Client) BuildUpsertSystemRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpsertSystemDSLEditorPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpsertSystem", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpsertSystemRequest returns an encoder for requests sent to the
// DSLEditor UpsertSystem server.
func EncodeUpsertSystemRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.System)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpsertSystem", "*dsleditor.System", v)
		}
		body := NewUpsertSystemRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpsertSystem", err)
		}
		return nil
	}
}

// DecodeUpsertSystemResponse returns a decoder for responses returned by the
// DSLEditor UpsertSystem endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpsertSystemResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpsertSystemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body UpsertSystemCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertSystem", err)
			}
			err = ValidateUpsertSystemCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertSystem", err)
			}
			return nil, NewUpsertSystemCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpsertSystem", resp.StatusCode, string(body))
		}
	}
}

// BuildUpsertPersonRequest instantiates a HTTP request object with method and
// path set to call the "DSLEditor" service "UpsertPerson" endpoint
func (c *Client) BuildUpsertPersonRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpsertPersonDSLEditorPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpsertPerson", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpsertPersonRequest returns an encoder for requests sent to the
// DSLEditor UpsertPerson server.
func EncodeUpsertPersonRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.Person)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpsertPerson", "*dsleditor.Person", v)
		}
		body := NewUpsertPersonRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpsertPerson", err)
		}
		return nil
	}
}

// DecodeUpsertPersonResponse returns a decoder for responses returned by the
// DSLEditor UpsertPerson endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpsertPersonResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpsertPersonResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body UpsertPersonCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertPerson", err)
			}
			err = ValidateUpsertPersonCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertPerson", err)
			}
			return nil, NewUpsertPersonCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpsertPerson", resp.StatusCode, string(body))
		}
	}
}

// BuildUpsertContainerRequest instantiates a HTTP request object with method
// and path set to call the "DSLEditor" service "UpsertContainer" endpoint
func (c *Client) BuildUpsertContainerRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpsertContainerDSLEditorPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpsertContainer", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpsertContainerRequest returns an encoder for requests sent to the
// DSLEditor UpsertContainer server.
func EncodeUpsertContainerRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.Container)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpsertContainer", "*dsleditor.Container", v)
		}
		body := NewUpsertContainerRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpsertContainer", err)
		}
		return nil
	}
}

// DecodeUpsertContainerResponse returns a decoder for responses returned by
// the DSLEditor UpsertContainer endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpsertContainerResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpsertContainerResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body UpsertContainerCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertContainer", err)
			}
			err = ValidateUpsertContainerCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertContainer", err)
			}
			return nil, NewUpsertContainerCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpsertContainer", resp.StatusCode, string(body))
		}
	}
}

// BuildUpsertComponentRequest instantiates a HTTP request object with method
// and path set to call the "DSLEditor" service "UpsertComponent" endpoint
func (c *Client) BuildUpsertComponentRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpsertComponentDSLEditorPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpsertComponent", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpsertComponentRequest returns an encoder for requests sent to the
// DSLEditor UpsertComponent server.
func EncodeUpsertComponentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.Component)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpsertComponent", "*dsleditor.Component", v)
		}
		body := NewUpsertComponentRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpsertComponent", err)
		}
		return nil
	}
}

// DecodeUpsertComponentResponse returns a decoder for responses returned by
// the DSLEditor UpsertComponent endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpsertComponentResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpsertComponentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body UpsertComponentCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertComponent", err)
			}
			err = ValidateUpsertComponentCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertComponent", err)
			}
			return nil, NewUpsertComponentCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpsertComponent", resp.StatusCode, string(body))
		}
	}
}

// BuildUpsertRelationshipRequest instantiates a HTTP request object with
// method and path set to call the "DSLEditor" service "UpsertRelationship"
// endpoint
func (c *Client) BuildUpsertRelationshipRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpsertRelationshipDSLEditorPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpsertRelationship", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpsertRelationshipRequest returns an encoder for requests sent to the
// DSLEditor UpsertRelationship server.
func EncodeUpsertRelationshipRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.Relationship)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpsertRelationship", "*dsleditor.Relationship", v)
		}
		body := NewUpsertRelationshipRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpsertRelationship", err)
		}
		return nil
	}
}

// DecodeUpsertRelationshipResponse returns a decoder for responses returned by
// the DSLEditor UpsertRelationship endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpsertRelationshipResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpsertRelationshipResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body UpsertRelationshipCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertRelationship", err)
			}
			err = ValidateUpsertRelationshipCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertRelationship", err)
			}
			return nil, NewUpsertRelationshipCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpsertRelationship", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteSystemRequest instantiates a HTTP request object with method and
// path set to call the "DSLEditor" service "DeleteSystem" endpoint
func (c *Client) BuildDeleteSystemRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		systemName string
	)
	{
		p, ok := v.(*dsleditor.DeleteSystemPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("DSLEditor", "DeleteSystem", "*dsleditor.DeleteSystemPayload", v)
		}
		systemName = p.SystemName
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteSystemDSLEditorPath(systemName)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "DeleteSystem", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteSystemRequest returns an encoder for requests sent to the
// DSLEditor DeleteSystem server.
func EncodeDeleteSystemRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.DeleteSystemPayload)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "DeleteSystem", "*dsleditor.DeleteSystemPayload", v)
		}
		body := NewDeleteSystemRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "DeleteSystem", err)
		}
		return nil
	}
}

// DecodeDeleteSystemResponse returns a decoder for responses returned by the
// DSLEditor DeleteSystem endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteSystemResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteSystemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteSystemNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteSystem", err)
			}
			err = ValidateDeleteSystemNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteSystem", err)
			}
			return nil, NewDeleteSystemNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteSystemCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteSystem", err)
			}
			err = ValidateDeleteSystemCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteSystem", err)
			}
			return nil, NewDeleteSystemCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "DeleteSystem", resp.StatusCode, string(body))
		}
	}
}

// BuildDeletePersonRequest instantiates a HTTP request object with method and
// path set to call the "DSLEditor" service "DeletePerson" endpoint
func (c *Client) BuildDeletePersonRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		personName string
	)
	{
		p, ok := v.(*dsleditor.DeletePersonPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("DSLEditor", "DeletePerson", "*dsleditor.DeletePersonPayload", v)
		}
		personName = p.PersonName
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeletePersonDSLEditorPath(personName)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "DeletePerson", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeletePersonRequest returns an encoder for requests sent to the
// DSLEditor DeletePerson server.
func EncodeDeletePersonRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.DeletePersonPayload)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "DeletePerson", "*dsleditor.DeletePersonPayload", v)
		}
		body := NewDeletePersonRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "DeletePerson", err)
		}
		return nil
	}
}

// DecodeDeletePersonResponse returns a decoder for responses returned by the
// DSLEditor DeletePerson endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeletePersonResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeletePersonResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeletePersonNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeletePerson", err)
			}
			err = ValidateDeletePersonNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeletePerson", err)
			}
			return nil, NewDeletePersonNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeletePersonCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeletePerson", err)
			}
			err = ValidateDeletePersonCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeletePerson", err)
			}
			return nil, NewDeletePersonCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "DeletePerson", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteContainerRequest instantiates a HTTP request object with method
// and path set to call the "DSLEditor" service "DeleteContainer" endpoint
func (c *Client) BuildDeleteContainerRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		systemName    string
		containerName string
	)
	{
		p, ok := v.(*dsleditor.DeleteContainerPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("DSLEditor", "DeleteContainer", "*dsleditor.DeleteContainerPayload", v)
		}
		if p.SystemName != nil {
			systemName = *p.SystemName
		}
		containerName = p.ContainerName
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteContainerDSLEditorPath(systemName, containerName)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "DeleteContainer", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteContainerRequest returns an encoder for requests sent to the
// DSLEditor DeleteContainer server.
func EncodeDeleteContainerRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.DeleteContainerPayload)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "DeleteContainer", "*dsleditor.DeleteContainerPayload", v)
		}
		body := NewDeleteContainerRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "DeleteContainer", err)
		}
		return nil
	}
}

// DecodeDeleteContainerResponse returns a decoder for responses returned by
// the DSLEditor DeleteContainer endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteContainerResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteContainerResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteContainerNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteContainer", err)
			}
			err = ValidateDeleteContainerNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteContainer", err)
			}
			return nil, NewDeleteContainerNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteContainerCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteContainer", err)
			}
			err = ValidateDeleteContainerCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteContainer", err)
			}
			return nil, NewDeleteContainerCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "DeleteContainer", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteComponentRequest instantiates a HTTP request object with method
// and path set to call the "DSLEditor" service "DeleteComponent" endpoint
func (c *Client) BuildDeleteComponentRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		systemName    string
		containerName string
		componentName string
	)
	{
		p, ok := v.(*dsleditor.DeleteComponentPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("DSLEditor", "DeleteComponent", "*dsleditor.DeleteComponentPayload", v)
		}
		systemName = p.SystemName
		containerName = p.ContainerName
		componentName = p.ComponentName
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteComponentDSLEditorPath(systemName, containerName, componentName)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "DeleteComponent", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteComponentRequest returns an encoder for requests sent to the
// DSLEditor DeleteComponent server.
func EncodeDeleteComponentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.DeleteComponentPayload)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "DeleteComponent", "*dsleditor.DeleteComponentPayload", v)
		}
		body := NewDeleteComponentRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "DeleteComponent", err)
		}
		return nil
	}
}

// DecodeDeleteComponentResponse returns a decoder for responses returned by
// the DSLEditor DeleteComponent endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteComponentResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteComponentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteComponentNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteComponent", err)
			}
			err = ValidateDeleteComponentNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteComponent", err)
			}
			return nil, NewDeleteComponentNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteComponentCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteComponent", err)
			}
			err = ValidateDeleteComponentCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteComponent", err)
			}
			return nil, NewDeleteComponentCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "DeleteComponent", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRelationshipRequest instantiates a HTTP request object with
// method and path set to call the "DSLEditor" service "DeleteRelationship"
// endpoint
func (c *Client) BuildDeleteRelationshipRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteRelationshipDSLEditorPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "DeleteRelationship", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRelationshipRequest returns an encoder for requests sent to the
// DSLEditor DeleteRelationship server.
func EncodeDeleteRelationshipRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.DeleteRelationshipPayload)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "DeleteRelationship", "*dsleditor.DeleteRelationshipPayload", v)
		}
		body := NewDeleteRelationshipRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "DeleteRelationship", err)
		}
		return nil
	}
}

// DecodeDeleteRelationshipResponse returns a decoder for responses returned by
// the DSLEditor DeleteRelationship endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteRelationshipResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteRelationshipResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteRelationshipNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteRelationship", err)
			}
			err = ValidateDeleteRelationshipNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteRelationship", err)
			}
			return nil, NewDeleteRelationshipNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteRelationshipCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteRelationship", err)
			}
			err = ValidateDeleteRelationshipCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteRelationship", err)
			}
			return nil, NewDeleteRelationshipCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "DeleteRelationship", resp.StatusCode, string(body))
		}
	}
}

// marshalTypesFileLocatorToFileLocatorRequestBody builds a value of type
// *FileLocatorRequestBody from a value of type *types.FileLocator.
func marshalTypesFileLocatorToFileLocatorRequestBody(v *types.FileLocator) *FileLocatorRequestBody {
	res := &FileLocatorRequestBody{
		Filename:  v.Filename,
		Workspace: v.Workspace,
		Dir:       v.Dir,
	}

	return res
}

// marshalFileLocatorRequestBodyToTypesFileLocator builds a value of type
// *types.FileLocator from a value of type *FileLocatorRequestBody.
func marshalFileLocatorRequestBodyToTypesFileLocator(v *FileLocatorRequestBody) *types.FileLocator {
	res := &types.FileLocator{
		Filename:  v.Filename,
		Workspace: v.Workspace,
		Dir:       v.Dir,
	}

	return res
}
