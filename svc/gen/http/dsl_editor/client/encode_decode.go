// Code generated by goa v3.13.2, DO NOT EDIT.
//
// DSLEditor HTTP client encoders and decoders
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	dsleditor "goa.design/model/svc/gen/dsl_editor"
	types "goa.design/model/svc/gen/types"
)

// BuildUpdateDSLRequest instantiates a HTTP request object with method and
// path set to call the "DSLEditor" service "UpdateDSL" endpoint
func (c *Client) BuildUpdateDSLRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateDSLDSLEditorPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpdateDSL", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateDSLRequest returns an encoder for requests sent to the DSLEditor
// UpdateDSL server.
func EncodeUpdateDSLRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*types.PackageFile)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpdateDSL", "*types.PackageFile", v)
		}
		body := NewUpdateDSLRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpdateDSL", err)
		}
		return nil
	}
}

// DecodeUpdateDSLResponse returns a decoder for responses returned by the
// DSLEditor UpdateDSL endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateDSLResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpdateDSLResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body UpdateDSLCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpdateDSL", err)
			}
			err = ValidateUpdateDSLCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpdateDSL", err)
			}
			return nil, NewUpdateDSLCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpdateDSL", resp.StatusCode, string(body))
		}
	}
}

// BuildUpsertSystemRequest instantiates a HTTP request object with method and
// path set to call the "DSLEditor" service "UpsertSystem" endpoint
func (c *Client) BuildUpsertSystemRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpsertSystemDSLEditorPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpsertSystem", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpsertSystemRequest returns an encoder for requests sent to the
// DSLEditor UpsertSystem server.
func EncodeUpsertSystemRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.System)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpsertSystem", "*dsleditor.System", v)
		}
		body := NewUpsertSystemRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpsertSystem", err)
		}
		return nil
	}
}

// DecodeUpsertSystemResponse returns a decoder for responses returned by the
// DSLEditor UpsertSystem endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpsertSystemResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpsertSystemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpsertSystemResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertSystem", err)
			}
			err = ValidateUpsertSystemResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertSystem", err)
			}
			res := NewUpsertSystemPackageFileOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpsertSystemCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertSystem", err)
			}
			err = ValidateUpsertSystemCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertSystem", err)
			}
			return nil, NewUpsertSystemCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpsertSystem", resp.StatusCode, string(body))
		}
	}
}

// BuildUpsertPersonRequest instantiates a HTTP request object with method and
// path set to call the "DSLEditor" service "UpsertPerson" endpoint
func (c *Client) BuildUpsertPersonRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpsertPersonDSLEditorPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpsertPerson", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpsertPersonRequest returns an encoder for requests sent to the
// DSLEditor UpsertPerson server.
func EncodeUpsertPersonRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.Person)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpsertPerson", "*dsleditor.Person", v)
		}
		body := NewUpsertPersonRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpsertPerson", err)
		}
		return nil
	}
}

// DecodeUpsertPersonResponse returns a decoder for responses returned by the
// DSLEditor UpsertPerson endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpsertPersonResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpsertPersonResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpsertPersonResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertPerson", err)
			}
			err = ValidateUpsertPersonResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertPerson", err)
			}
			res := NewUpsertPersonPackageFileOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpsertPersonCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertPerson", err)
			}
			err = ValidateUpsertPersonCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertPerson", err)
			}
			return nil, NewUpsertPersonCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpsertPerson", resp.StatusCode, string(body))
		}
	}
}

// BuildUpsertContainerRequest instantiates a HTTP request object with method
// and path set to call the "DSLEditor" service "UpsertContainer" endpoint
func (c *Client) BuildUpsertContainerRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpsertContainerDSLEditorPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpsertContainer", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpsertContainerRequest returns an encoder for requests sent to the
// DSLEditor UpsertContainer server.
func EncodeUpsertContainerRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.Container)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpsertContainer", "*dsleditor.Container", v)
		}
		body := NewUpsertContainerRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpsertContainer", err)
		}
		return nil
	}
}

// DecodeUpsertContainerResponse returns a decoder for responses returned by
// the DSLEditor UpsertContainer endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpsertContainerResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpsertContainerResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpsertContainerResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertContainer", err)
			}
			err = ValidateUpsertContainerResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertContainer", err)
			}
			res := NewUpsertContainerPackageFileOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpsertContainerCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertContainer", err)
			}
			err = ValidateUpsertContainerCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertContainer", err)
			}
			return nil, NewUpsertContainerCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpsertContainer", resp.StatusCode, string(body))
		}
	}
}

// BuildUpsertComponentRequest instantiates a HTTP request object with method
// and path set to call the "DSLEditor" service "UpsertComponent" endpoint
func (c *Client) BuildUpsertComponentRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpsertComponentDSLEditorPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpsertComponent", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpsertComponentRequest returns an encoder for requests sent to the
// DSLEditor UpsertComponent server.
func EncodeUpsertComponentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.Component)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpsertComponent", "*dsleditor.Component", v)
		}
		body := NewUpsertComponentRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpsertComponent", err)
		}
		return nil
	}
}

// DecodeUpsertComponentResponse returns a decoder for responses returned by
// the DSLEditor UpsertComponent endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpsertComponentResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpsertComponentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpsertComponentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertComponent", err)
			}
			err = ValidateUpsertComponentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertComponent", err)
			}
			res := NewUpsertComponentPackageFileOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpsertComponentCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertComponent", err)
			}
			err = ValidateUpsertComponentCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertComponent", err)
			}
			return nil, NewUpsertComponentCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpsertComponent", resp.StatusCode, string(body))
		}
	}
}

// BuildUpsertRelationshipRequest instantiates a HTTP request object with
// method and path set to call the "DSLEditor" service "UpsertRelationship"
// endpoint
func (c *Client) BuildUpsertRelationshipRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpsertRelationshipDSLEditorPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpsertRelationship", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpsertRelationshipRequest returns an encoder for requests sent to the
// DSLEditor UpsertRelationship server.
func EncodeUpsertRelationshipRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.Relationship)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpsertRelationship", "*dsleditor.Relationship", v)
		}
		body := NewUpsertRelationshipRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpsertRelationship", err)
		}
		return nil
	}
}

// DecodeUpsertRelationshipResponse returns a decoder for responses returned by
// the DSLEditor UpsertRelationship endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpsertRelationshipResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpsertRelationshipResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpsertRelationshipResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertRelationship", err)
			}
			err = ValidateUpsertRelationshipResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertRelationship", err)
			}
			res := NewUpsertRelationshipPackageFileOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpsertRelationshipCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertRelationship", err)
			}
			err = ValidateUpsertRelationshipCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertRelationship", err)
			}
			return nil, NewUpsertRelationshipCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpsertRelationship", resp.StatusCode, string(body))
		}
	}
}

// BuildUpsertLandscapeViewRequest instantiates a HTTP request object with
// method and path set to call the "DSLEditor" service "UpsertLandscapeView"
// endpoint
func (c *Client) BuildUpsertLandscapeViewRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpsertLandscapeViewDSLEditorPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpsertLandscapeView", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpsertLandscapeViewRequest returns an encoder for requests sent to the
// DSLEditor UpsertLandscapeView server.
func EncodeUpsertLandscapeViewRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.LandscapeView)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpsertLandscapeView", "*dsleditor.LandscapeView", v)
		}
		body := NewUpsertLandscapeViewRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpsertLandscapeView", err)
		}
		return nil
	}
}

// DecodeUpsertLandscapeViewResponse returns a decoder for responses returned
// by the DSLEditor UpsertLandscapeView endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeUpsertLandscapeViewResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpsertLandscapeViewResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpsertLandscapeViewResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertLandscapeView", err)
			}
			err = ValidateUpsertLandscapeViewResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertLandscapeView", err)
			}
			res := NewUpsertLandscapeViewPackageFileOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpsertLandscapeViewCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertLandscapeView", err)
			}
			err = ValidateUpsertLandscapeViewCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertLandscapeView", err)
			}
			return nil, NewUpsertLandscapeViewCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpsertLandscapeView", resp.StatusCode, string(body))
		}
	}
}

// BuildUpsertSystemContextViewRequest instantiates a HTTP request object with
// method and path set to call the "DSLEditor" service
// "UpsertSystemContextView" endpoint
func (c *Client) BuildUpsertSystemContextViewRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpsertSystemContextViewDSLEditorPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpsertSystemContextView", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpsertSystemContextViewRequest returns an encoder for requests sent to
// the DSLEditor UpsertSystemContextView server.
func EncodeUpsertSystemContextViewRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.SystemContextView)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpsertSystemContextView", "*dsleditor.SystemContextView", v)
		}
		body := NewUpsertSystemContextViewRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpsertSystemContextView", err)
		}
		return nil
	}
}

// DecodeUpsertSystemContextViewResponse returns a decoder for responses
// returned by the DSLEditor UpsertSystemContextView endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeUpsertSystemContextViewResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpsertSystemContextViewResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpsertSystemContextViewResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertSystemContextView", err)
			}
			err = ValidateUpsertSystemContextViewResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertSystemContextView", err)
			}
			res := NewUpsertSystemContextViewPackageFileOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpsertSystemContextViewCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertSystemContextView", err)
			}
			err = ValidateUpsertSystemContextViewCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertSystemContextView", err)
			}
			return nil, NewUpsertSystemContextViewCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpsertSystemContextView", resp.StatusCode, string(body))
		}
	}
}

// BuildUpsertContainerViewRequest instantiates a HTTP request object with
// method and path set to call the "DSLEditor" service "UpsertContainerView"
// endpoint
func (c *Client) BuildUpsertContainerViewRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpsertContainerViewDSLEditorPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpsertContainerView", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpsertContainerViewRequest returns an encoder for requests sent to the
// DSLEditor UpsertContainerView server.
func EncodeUpsertContainerViewRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.ContainerView)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpsertContainerView", "*dsleditor.ContainerView", v)
		}
		body := NewUpsertContainerViewRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpsertContainerView", err)
		}
		return nil
	}
}

// DecodeUpsertContainerViewResponse returns a decoder for responses returned
// by the DSLEditor UpsertContainerView endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeUpsertContainerViewResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpsertContainerViewResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpsertContainerViewResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertContainerView", err)
			}
			err = ValidateUpsertContainerViewResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertContainerView", err)
			}
			res := NewUpsertContainerViewPackageFileOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpsertContainerViewCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertContainerView", err)
			}
			err = ValidateUpsertContainerViewCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertContainerView", err)
			}
			return nil, NewUpsertContainerViewCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpsertContainerView", resp.StatusCode, string(body))
		}
	}
}

// BuildUpsertComponentViewRequest instantiates a HTTP request object with
// method and path set to call the "DSLEditor" service "UpsertComponentView"
// endpoint
func (c *Client) BuildUpsertComponentViewRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpsertComponentViewDSLEditorPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpsertComponentView", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpsertComponentViewRequest returns an encoder for requests sent to the
// DSLEditor UpsertComponentView server.
func EncodeUpsertComponentViewRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.ComponentView)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpsertComponentView", "*dsleditor.ComponentView", v)
		}
		body := NewUpsertComponentViewRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpsertComponentView", err)
		}
		return nil
	}
}

// DecodeUpsertComponentViewResponse returns a decoder for responses returned
// by the DSLEditor UpsertComponentView endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeUpsertComponentViewResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpsertComponentViewResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpsertComponentViewResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertComponentView", err)
			}
			err = ValidateUpsertComponentViewResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertComponentView", err)
			}
			res := NewUpsertComponentViewPackageFileOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpsertComponentViewCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertComponentView", err)
			}
			err = ValidateUpsertComponentViewCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertComponentView", err)
			}
			return nil, NewUpsertComponentViewCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpsertComponentView", resp.StatusCode, string(body))
		}
	}
}

// BuildUpserElementStyleRequest instantiates a HTTP request object with method
// and path set to call the "DSLEditor" service "UpserElementStyle" endpoint
func (c *Client) BuildUpserElementStyleRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpserElementStyleDSLEditorPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpserElementStyle", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpserElementStyleRequest returns an encoder for requests sent to the
// DSLEditor UpserElementStyle server.
func EncodeUpserElementStyleRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.ElementStyle)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpserElementStyle", "*dsleditor.ElementStyle", v)
		}
		body := NewUpserElementStyleRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpserElementStyle", err)
		}
		return nil
	}
}

// DecodeUpserElementStyleResponse returns a decoder for responses returned by
// the DSLEditor UpserElementStyle endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpserElementStyleResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpserElementStyleResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpserElementStyleResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpserElementStyle", err)
			}
			err = ValidateUpserElementStyleResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpserElementStyle", err)
			}
			res := NewUpserElementStylePackageFileOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpserElementStyleCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpserElementStyle", err)
			}
			err = ValidateUpserElementStyleCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpserElementStyle", err)
			}
			return nil, NewUpserElementStyleCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpserElementStyle", resp.StatusCode, string(body))
		}
	}
}

// BuildUpsertRelationshipStyleRequest instantiates a HTTP request object with
// method and path set to call the "DSLEditor" service
// "UpsertRelationshipStyle" endpoint
func (c *Client) BuildUpsertRelationshipStyleRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpsertRelationshipStyleDSLEditorPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "UpsertRelationshipStyle", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpsertRelationshipStyleRequest returns an encoder for requests sent to
// the DSLEditor UpsertRelationshipStyle server.
func EncodeUpsertRelationshipStyleRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.RelationshipStyle)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "UpsertRelationshipStyle", "*dsleditor.RelationshipStyle", v)
		}
		body := NewUpsertRelationshipStyleRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "UpsertRelationshipStyle", err)
		}
		return nil
	}
}

// DecodeUpsertRelationshipStyleResponse returns a decoder for responses
// returned by the DSLEditor UpsertRelationshipStyle endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeUpsertRelationshipStyleResponse may return the following errors:
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpsertRelationshipStyleResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpsertRelationshipStyleResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertRelationshipStyle", err)
			}
			err = ValidateUpsertRelationshipStyleResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertRelationshipStyle", err)
			}
			res := NewUpsertRelationshipStylePackageFileOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpsertRelationshipStyleCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "UpsertRelationshipStyle", err)
			}
			err = ValidateUpsertRelationshipStyleCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "UpsertRelationshipStyle", err)
			}
			return nil, NewUpsertRelationshipStyleCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "UpsertRelationshipStyle", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteSystemRequest instantiates a HTTP request object with method and
// path set to call the "DSLEditor" service "DeleteSystem" endpoint
func (c *Client) BuildDeleteSystemRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		systemName string
	)
	{
		p, ok := v.(*dsleditor.DeleteSystemPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("DSLEditor", "DeleteSystem", "*dsleditor.DeleteSystemPayload", v)
		}
		systemName = p.SystemName
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteSystemDSLEditorPath(systemName)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "DeleteSystem", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteSystemRequest returns an encoder for requests sent to the
// DSLEditor DeleteSystem server.
func EncodeDeleteSystemRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.DeleteSystemPayload)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "DeleteSystem", "*dsleditor.DeleteSystemPayload", v)
		}
		body := NewDeleteSystemRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "DeleteSystem", err)
		}
		return nil
	}
}

// DecodeDeleteSystemResponse returns a decoder for responses returned by the
// DSLEditor DeleteSystem endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteSystemResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteSystemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteSystemResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteSystem", err)
			}
			err = ValidateDeleteSystemResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteSystem", err)
			}
			res := NewDeleteSystemPackageFileOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body DeleteSystemNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteSystem", err)
			}
			err = ValidateDeleteSystemNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteSystem", err)
			}
			return nil, NewDeleteSystemNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteSystemCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteSystem", err)
			}
			err = ValidateDeleteSystemCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteSystem", err)
			}
			return nil, NewDeleteSystemCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "DeleteSystem", resp.StatusCode, string(body))
		}
	}
}

// BuildDeletePersonRequest instantiates a HTTP request object with method and
// path set to call the "DSLEditor" service "DeletePerson" endpoint
func (c *Client) BuildDeletePersonRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		personName string
	)
	{
		p, ok := v.(*dsleditor.DeletePersonPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("DSLEditor", "DeletePerson", "*dsleditor.DeletePersonPayload", v)
		}
		personName = p.PersonName
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeletePersonDSLEditorPath(personName)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "DeletePerson", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeletePersonRequest returns an encoder for requests sent to the
// DSLEditor DeletePerson server.
func EncodeDeletePersonRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.DeletePersonPayload)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "DeletePerson", "*dsleditor.DeletePersonPayload", v)
		}
		body := NewDeletePersonRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "DeletePerson", err)
		}
		return nil
	}
}

// DecodeDeletePersonResponse returns a decoder for responses returned by the
// DSLEditor DeletePerson endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeletePersonResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeletePersonResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeletePersonResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeletePerson", err)
			}
			err = ValidateDeletePersonResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeletePerson", err)
			}
			res := NewDeletePersonPackageFileOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body DeletePersonNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeletePerson", err)
			}
			err = ValidateDeletePersonNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeletePerson", err)
			}
			return nil, NewDeletePersonNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeletePersonCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeletePerson", err)
			}
			err = ValidateDeletePersonCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeletePerson", err)
			}
			return nil, NewDeletePersonCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "DeletePerson", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteContainerRequest instantiates a HTTP request object with method
// and path set to call the "DSLEditor" service "DeleteContainer" endpoint
func (c *Client) BuildDeleteContainerRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		systemName    string
		containerName string
	)
	{
		p, ok := v.(*dsleditor.DeleteContainerPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("DSLEditor", "DeleteContainer", "*dsleditor.DeleteContainerPayload", v)
		}
		systemName = p.SystemName
		containerName = p.ContainerName
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteContainerDSLEditorPath(systemName, containerName)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "DeleteContainer", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteContainerRequest returns an encoder for requests sent to the
// DSLEditor DeleteContainer server.
func EncodeDeleteContainerRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.DeleteContainerPayload)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "DeleteContainer", "*dsleditor.DeleteContainerPayload", v)
		}
		body := NewDeleteContainerRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "DeleteContainer", err)
		}
		return nil
	}
}

// DecodeDeleteContainerResponse returns a decoder for responses returned by
// the DSLEditor DeleteContainer endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteContainerResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteContainerResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteContainerResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteContainer", err)
			}
			err = ValidateDeleteContainerResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteContainer", err)
			}
			res := NewDeleteContainerPackageFileOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body DeleteContainerNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteContainer", err)
			}
			err = ValidateDeleteContainerNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteContainer", err)
			}
			return nil, NewDeleteContainerNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteContainerCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteContainer", err)
			}
			err = ValidateDeleteContainerCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteContainer", err)
			}
			return nil, NewDeleteContainerCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "DeleteContainer", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteComponentRequest instantiates a HTTP request object with method
// and path set to call the "DSLEditor" service "DeleteComponent" endpoint
func (c *Client) BuildDeleteComponentRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		systemName    string
		containerName string
		componentName string
	)
	{
		p, ok := v.(*dsleditor.DeleteComponentPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("DSLEditor", "DeleteComponent", "*dsleditor.DeleteComponentPayload", v)
		}
		systemName = p.SystemName
		containerName = p.ContainerName
		componentName = p.ComponentName
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteComponentDSLEditorPath(systemName, containerName, componentName)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "DeleteComponent", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteComponentRequest returns an encoder for requests sent to the
// DSLEditor DeleteComponent server.
func EncodeDeleteComponentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.DeleteComponentPayload)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "DeleteComponent", "*dsleditor.DeleteComponentPayload", v)
		}
		body := NewDeleteComponentRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "DeleteComponent", err)
		}
		return nil
	}
}

// DecodeDeleteComponentResponse returns a decoder for responses returned by
// the DSLEditor DeleteComponent endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteComponentResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteComponentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteComponentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteComponent", err)
			}
			err = ValidateDeleteComponentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteComponent", err)
			}
			res := NewDeleteComponentPackageFileOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body DeleteComponentNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteComponent", err)
			}
			err = ValidateDeleteComponentNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteComponent", err)
			}
			return nil, NewDeleteComponentNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteComponentCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteComponent", err)
			}
			err = ValidateDeleteComponentCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteComponent", err)
			}
			return nil, NewDeleteComponentCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "DeleteComponent", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRelationshipRequest instantiates a HTTP request object with
// method and path set to call the "DSLEditor" service "DeleteRelationship"
// endpoint
func (c *Client) BuildDeleteRelationshipRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteRelationshipDSLEditorPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "DeleteRelationship", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRelationshipRequest returns an encoder for requests sent to the
// DSLEditor DeleteRelationship server.
func EncodeDeleteRelationshipRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.DeleteRelationshipPayload)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "DeleteRelationship", "*dsleditor.DeleteRelationshipPayload", v)
		}
		body := NewDeleteRelationshipRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "DeleteRelationship", err)
		}
		return nil
	}
}

// DecodeDeleteRelationshipResponse returns a decoder for responses returned by
// the DSLEditor DeleteRelationship endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteRelationshipResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteRelationshipResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteRelationshipResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteRelationship", err)
			}
			err = ValidateDeleteRelationshipResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteRelationship", err)
			}
			res := NewDeleteRelationshipPackageFileOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body DeleteRelationshipNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteRelationship", err)
			}
			err = ValidateDeleteRelationshipNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteRelationship", err)
			}
			return nil, NewDeleteRelationshipNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteRelationshipCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteRelationship", err)
			}
			err = ValidateDeleteRelationshipCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteRelationship", err)
			}
			return nil, NewDeleteRelationshipCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "DeleteRelationship", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteLandscapeViewRequest instantiates a HTTP request object with
// method and path set to call the "DSLEditor" service "DeleteLandscapeView"
// endpoint
func (c *Client) BuildDeleteLandscapeViewRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		key string
	)
	{
		p, ok := v.(*dsleditor.DeleteLandscapeViewPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("DSLEditor", "DeleteLandscapeView", "*dsleditor.DeleteLandscapeViewPayload", v)
		}
		key = p.Key
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteLandscapeViewDSLEditorPath(key)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "DeleteLandscapeView", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteLandscapeViewRequest returns an encoder for requests sent to the
// DSLEditor DeleteLandscapeView server.
func EncodeDeleteLandscapeViewRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.DeleteLandscapeViewPayload)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "DeleteLandscapeView", "*dsleditor.DeleteLandscapeViewPayload", v)
		}
		body := NewDeleteLandscapeViewRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "DeleteLandscapeView", err)
		}
		return nil
	}
}

// DecodeDeleteLandscapeViewResponse returns a decoder for responses returned
// by the DSLEditor DeleteLandscapeView endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeDeleteLandscapeViewResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteLandscapeViewResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteLandscapeViewResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteLandscapeView", err)
			}
			err = ValidateDeleteLandscapeViewResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteLandscapeView", err)
			}
			res := NewDeleteLandscapeViewPackageFileOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body DeleteLandscapeViewNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteLandscapeView", err)
			}
			err = ValidateDeleteLandscapeViewNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteLandscapeView", err)
			}
			return nil, NewDeleteLandscapeViewNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteLandscapeViewCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteLandscapeView", err)
			}
			err = ValidateDeleteLandscapeViewCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteLandscapeView", err)
			}
			return nil, NewDeleteLandscapeViewCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "DeleteLandscapeView", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteSystemContextViewRequest instantiates a HTTP request object with
// method and path set to call the "DSLEditor" service
// "DeleteSystemContextView" endpoint
func (c *Client) BuildDeleteSystemContextViewRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		key string
	)
	{
		p, ok := v.(*dsleditor.DeleteSystemContextViewPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("DSLEditor", "DeleteSystemContextView", "*dsleditor.DeleteSystemContextViewPayload", v)
		}
		key = p.Key
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteSystemContextViewDSLEditorPath(key)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "DeleteSystemContextView", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteSystemContextViewRequest returns an encoder for requests sent to
// the DSLEditor DeleteSystemContextView server.
func EncodeDeleteSystemContextViewRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.DeleteSystemContextViewPayload)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "DeleteSystemContextView", "*dsleditor.DeleteSystemContextViewPayload", v)
		}
		body := NewDeleteSystemContextViewRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "DeleteSystemContextView", err)
		}
		return nil
	}
}

// DecodeDeleteSystemContextViewResponse returns a decoder for responses
// returned by the DSLEditor DeleteSystemContextView endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeDeleteSystemContextViewResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteSystemContextViewResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteSystemContextViewResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteSystemContextView", err)
			}
			err = ValidateDeleteSystemContextViewResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteSystemContextView", err)
			}
			res := NewDeleteSystemContextViewPackageFileOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body DeleteSystemContextViewNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteSystemContextView", err)
			}
			err = ValidateDeleteSystemContextViewNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteSystemContextView", err)
			}
			return nil, NewDeleteSystemContextViewNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteSystemContextViewCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteSystemContextView", err)
			}
			err = ValidateDeleteSystemContextViewCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteSystemContextView", err)
			}
			return nil, NewDeleteSystemContextViewCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "DeleteSystemContextView", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteContainerViewRequest instantiates a HTTP request object with
// method and path set to call the "DSLEditor" service "DeleteContainerView"
// endpoint
func (c *Client) BuildDeleteContainerViewRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		key string
	)
	{
		p, ok := v.(*dsleditor.DeleteContainerViewPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("DSLEditor", "DeleteContainerView", "*dsleditor.DeleteContainerViewPayload", v)
		}
		key = p.Key
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteContainerViewDSLEditorPath(key)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "DeleteContainerView", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteContainerViewRequest returns an encoder for requests sent to the
// DSLEditor DeleteContainerView server.
func EncodeDeleteContainerViewRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.DeleteContainerViewPayload)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "DeleteContainerView", "*dsleditor.DeleteContainerViewPayload", v)
		}
		body := NewDeleteContainerViewRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "DeleteContainerView", err)
		}
		return nil
	}
}

// DecodeDeleteContainerViewResponse returns a decoder for responses returned
// by the DSLEditor DeleteContainerView endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeDeleteContainerViewResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteContainerViewResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteContainerViewResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteContainerView", err)
			}
			err = ValidateDeleteContainerViewResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteContainerView", err)
			}
			res := NewDeleteContainerViewPackageFileOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body DeleteContainerViewNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteContainerView", err)
			}
			err = ValidateDeleteContainerViewNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteContainerView", err)
			}
			return nil, NewDeleteContainerViewNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteContainerViewCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteContainerView", err)
			}
			err = ValidateDeleteContainerViewCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteContainerView", err)
			}
			return nil, NewDeleteContainerViewCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "DeleteContainerView", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteComponentViewRequest instantiates a HTTP request object with
// method and path set to call the "DSLEditor" service "DeleteComponentView"
// endpoint
func (c *Client) BuildDeleteComponentViewRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		key string
	)
	{
		p, ok := v.(*dsleditor.DeleteComponentViewPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("DSLEditor", "DeleteComponentView", "*dsleditor.DeleteComponentViewPayload", v)
		}
		key = p.Key
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteComponentViewDSLEditorPath(key)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "DeleteComponentView", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteComponentViewRequest returns an encoder for requests sent to the
// DSLEditor DeleteComponentView server.
func EncodeDeleteComponentViewRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.DeleteComponentViewPayload)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "DeleteComponentView", "*dsleditor.DeleteComponentViewPayload", v)
		}
		body := NewDeleteComponentViewRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "DeleteComponentView", err)
		}
		return nil
	}
}

// DecodeDeleteComponentViewResponse returns a decoder for responses returned
// by the DSLEditor DeleteComponentView endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeDeleteComponentViewResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteComponentViewResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteComponentViewResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteComponentView", err)
			}
			err = ValidateDeleteComponentViewResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteComponentView", err)
			}
			res := NewDeleteComponentViewPackageFileOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body DeleteComponentViewNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteComponentView", err)
			}
			err = ValidateDeleteComponentViewNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteComponentView", err)
			}
			return nil, NewDeleteComponentViewNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteComponentViewCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteComponentView", err)
			}
			err = ValidateDeleteComponentViewCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteComponentView", err)
			}
			return nil, NewDeleteComponentViewCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "DeleteComponentView", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteElementStyleRequest instantiates a HTTP request object with
// method and path set to call the "DSLEditor" service "DeleteElementStyle"
// endpoint
func (c *Client) BuildDeleteElementStyleRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		tag string
	)
	{
		p, ok := v.(*dsleditor.DeleteElementStylePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("DSLEditor", "DeleteElementStyle", "*dsleditor.DeleteElementStylePayload", v)
		}
		tag = p.Tag
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteElementStyleDSLEditorPath(tag)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "DeleteElementStyle", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteElementStyleRequest returns an encoder for requests sent to the
// DSLEditor DeleteElementStyle server.
func EncodeDeleteElementStyleRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.DeleteElementStylePayload)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "DeleteElementStyle", "*dsleditor.DeleteElementStylePayload", v)
		}
		body := NewDeleteElementStyleRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "DeleteElementStyle", err)
		}
		return nil
	}
}

// DecodeDeleteElementStyleResponse returns a decoder for responses returned by
// the DSLEditor DeleteElementStyle endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteElementStyleResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteElementStyleResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteElementStyleResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteElementStyle", err)
			}
			err = ValidateDeleteElementStyleResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteElementStyle", err)
			}
			res := NewDeleteElementStylePackageFileOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body DeleteElementStyleNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteElementStyle", err)
			}
			err = ValidateDeleteElementStyleNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteElementStyle", err)
			}
			return nil, NewDeleteElementStyleNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteElementStyleCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteElementStyle", err)
			}
			err = ValidateDeleteElementStyleCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteElementStyle", err)
			}
			return nil, NewDeleteElementStyleCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "DeleteElementStyle", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRelationshipStyleRequest instantiates a HTTP request object with
// method and path set to call the "DSLEditor" service
// "DeleteRelationshipStyle" endpoint
func (c *Client) BuildDeleteRelationshipStyleRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		tag string
	)
	{
		p, ok := v.(*dsleditor.DeleteRelationshipStylePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("DSLEditor", "DeleteRelationshipStyle", "*dsleditor.DeleteRelationshipStylePayload", v)
		}
		tag = p.Tag
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteRelationshipStyleDSLEditorPath(tag)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("DSLEditor", "DeleteRelationshipStyle", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRelationshipStyleRequest returns an encoder for requests sent to
// the DSLEditor DeleteRelationshipStyle server.
func EncodeDeleteRelationshipStyleRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*dsleditor.DeleteRelationshipStylePayload)
		if !ok {
			return goahttp.ErrInvalidType("DSLEditor", "DeleteRelationshipStyle", "*dsleditor.DeleteRelationshipStylePayload", v)
		}
		body := NewDeleteRelationshipStyleRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("DSLEditor", "DeleteRelationshipStyle", err)
		}
		return nil
	}
}

// DecodeDeleteRelationshipStyleResponse returns a decoder for responses
// returned by the DSLEditor DeleteRelationshipStyle endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeDeleteRelationshipStyleResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "compilation_failed" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteRelationshipStyleResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteRelationshipStyleResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteRelationshipStyle", err)
			}
			err = ValidateDeleteRelationshipStyleResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteRelationshipStyle", err)
			}
			res := NewDeleteRelationshipStylePackageFileOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body DeleteRelationshipStyleNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteRelationshipStyle", err)
			}
			err = ValidateDeleteRelationshipStyleNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteRelationshipStyle", err)
			}
			return nil, NewDeleteRelationshipStyleNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteRelationshipStyleCompilationFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("DSLEditor", "DeleteRelationshipStyle", err)
			}
			err = ValidateDeleteRelationshipStyleCompilationFailedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("DSLEditor", "DeleteRelationshipStyle", err)
			}
			return nil, NewDeleteRelationshipStyleCompilationFailed(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("DSLEditor", "DeleteRelationshipStyle", resp.StatusCode, string(body))
		}
	}
}

// marshalTypesFileLocatorToFileLocatorRequestBody builds a value of type
// *FileLocatorRequestBody from a value of type *types.FileLocator.
func marshalTypesFileLocatorToFileLocatorRequestBody(v *types.FileLocator) *FileLocatorRequestBody {
	res := &FileLocatorRequestBody{
		Filename:   v.Filename,
		Repository: v.Repository,
		Dir:        v.Dir,
	}

	return res
}

// marshalFileLocatorRequestBodyToTypesFileLocator builds a value of type
// *types.FileLocator from a value of type *FileLocatorRequestBody.
func marshalFileLocatorRequestBodyToTypesFileLocator(v *FileLocatorRequestBody) *types.FileLocator {
	res := &types.FileLocator{
		Filename:   v.Filename,
		Repository: v.Repository,
		Dir:        v.Dir,
	}

	return res
}

// unmarshalFileLocatorResponseBodyToTypesFileLocator builds a value of type
// *types.FileLocator from a value of type *FileLocatorResponseBody.
func unmarshalFileLocatorResponseBodyToTypesFileLocator(v *FileLocatorResponseBody) *types.FileLocator {
	res := &types.FileLocator{
		Filename:   *v.Filename,
		Repository: *v.Repository,
		Dir:        *v.Dir,
	}

	return res
}

// marshalDsleditorElementViewToElementViewRequestBody builds a value of type
// *ElementViewRequestBody from a value of type *dsleditor.ElementView.
func marshalDsleditorElementViewToElementViewRequestBody(v *dsleditor.ElementView) *ElementViewRequestBody {
	if v == nil {
		return nil
	}
	res := &ElementViewRequestBody{
		Element: v.Element,
	}

	return res
}

// marshalDsleditorRelationshipViewToRelationshipViewRequestBody builds a value
// of type *RelationshipViewRequestBody from a value of type
// *dsleditor.RelationshipView.
func marshalDsleditorRelationshipViewToRelationshipViewRequestBody(v *dsleditor.RelationshipView) *RelationshipViewRequestBody {
	if v == nil {
		return nil
	}
	res := &RelationshipViewRequestBody{
		Source:      v.Source,
		Destination: v.Destination,
	}

	return res
}

// marshalElementViewRequestBodyToDsleditorElementView builds a value of type
// *dsleditor.ElementView from a value of type *ElementViewRequestBody.
func marshalElementViewRequestBodyToDsleditorElementView(v *ElementViewRequestBody) *dsleditor.ElementView {
	if v == nil {
		return nil
	}
	res := &dsleditor.ElementView{
		Element: v.Element,
	}

	return res
}

// marshalRelationshipViewRequestBodyToDsleditorRelationshipView builds a value
// of type *dsleditor.RelationshipView from a value of type
// *RelationshipViewRequestBody.
func marshalRelationshipViewRequestBodyToDsleditorRelationshipView(v *RelationshipViewRequestBody) *dsleditor.RelationshipView {
	if v == nil {
		return nil
	}
	res := &dsleditor.RelationshipView{
		Source:      v.Source,
		Destination: v.Destination,
	}

	return res
}
