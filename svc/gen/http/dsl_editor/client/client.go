// Code generated by goa v3.14.0, DO NOT EDIT.
//
// DSLEditor client HTTP transport
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the DSLEditor service endpoint HTTP clients.
type Client struct {
	// UpdateDSL Doer is the HTTP client used to make requests to the UpdateDSL
	// endpoint.
	UpdateDSLDoer goahttp.Doer

	// UpsertSystem Doer is the HTTP client used to make requests to the
	// UpsertSystem endpoint.
	UpsertSystemDoer goahttp.Doer

	// UpsertPerson Doer is the HTTP client used to make requests to the
	// UpsertPerson endpoint.
	UpsertPersonDoer goahttp.Doer

	// UpsertContainer Doer is the HTTP client used to make requests to the
	// UpsertContainer endpoint.
	UpsertContainerDoer goahttp.Doer

	// UpsertComponent Doer is the HTTP client used to make requests to the
	// UpsertComponent endpoint.
	UpsertComponentDoer goahttp.Doer

	// UpsertRelationship Doer is the HTTP client used to make requests to the
	// UpsertRelationship endpoint.
	UpsertRelationshipDoer goahttp.Doer

	// UpsertLandscapeView Doer is the HTTP client used to make requests to the
	// UpsertLandscapeView endpoint.
	UpsertLandscapeViewDoer goahttp.Doer

	// UpsertSystemContextView Doer is the HTTP client used to make requests to the
	// UpsertSystemContextView endpoint.
	UpsertSystemContextViewDoer goahttp.Doer

	// UpsertContainerView Doer is the HTTP client used to make requests to the
	// UpsertContainerView endpoint.
	UpsertContainerViewDoer goahttp.Doer

	// UpsertComponentView Doer is the HTTP client used to make requests to the
	// UpsertComponentView endpoint.
	UpsertComponentViewDoer goahttp.Doer

	// UpserElementStyle Doer is the HTTP client used to make requests to the
	// UpserElementStyle endpoint.
	UpserElementStyleDoer goahttp.Doer

	// UpsertRelationshipStyle Doer is the HTTP client used to make requests to the
	// UpsertRelationshipStyle endpoint.
	UpsertRelationshipStyleDoer goahttp.Doer

	// DeleteSystem Doer is the HTTP client used to make requests to the
	// DeleteSystem endpoint.
	DeleteSystemDoer goahttp.Doer

	// DeletePerson Doer is the HTTP client used to make requests to the
	// DeletePerson endpoint.
	DeletePersonDoer goahttp.Doer

	// DeleteContainer Doer is the HTTP client used to make requests to the
	// DeleteContainer endpoint.
	DeleteContainerDoer goahttp.Doer

	// DeleteComponent Doer is the HTTP client used to make requests to the
	// DeleteComponent endpoint.
	DeleteComponentDoer goahttp.Doer

	// DeleteRelationship Doer is the HTTP client used to make requests to the
	// DeleteRelationship endpoint.
	DeleteRelationshipDoer goahttp.Doer

	// DeleteLandscapeView Doer is the HTTP client used to make requests to the
	// DeleteLandscapeView endpoint.
	DeleteLandscapeViewDoer goahttp.Doer

	// DeleteSystemContextView Doer is the HTTP client used to make requests to the
	// DeleteSystemContextView endpoint.
	DeleteSystemContextViewDoer goahttp.Doer

	// DeleteContainerView Doer is the HTTP client used to make requests to the
	// DeleteContainerView endpoint.
	DeleteContainerViewDoer goahttp.Doer

	// DeleteComponentView Doer is the HTTP client used to make requests to the
	// DeleteComponentView endpoint.
	DeleteComponentViewDoer goahttp.Doer

	// DeleteElementStyle Doer is the HTTP client used to make requests to the
	// DeleteElementStyle endpoint.
	DeleteElementStyleDoer goahttp.Doer

	// DeleteRelationshipStyle Doer is the HTTP client used to make requests to the
	// DeleteRelationshipStyle endpoint.
	DeleteRelationshipStyleDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the DSLEditor service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		UpdateDSLDoer:               doer,
		UpsertSystemDoer:            doer,
		UpsertPersonDoer:            doer,
		UpsertContainerDoer:         doer,
		UpsertComponentDoer:         doer,
		UpsertRelationshipDoer:      doer,
		UpsertLandscapeViewDoer:     doer,
		UpsertSystemContextViewDoer: doer,
		UpsertContainerViewDoer:     doer,
		UpsertComponentViewDoer:     doer,
		UpserElementStyleDoer:       doer,
		UpsertRelationshipStyleDoer: doer,
		DeleteSystemDoer:            doer,
		DeletePersonDoer:            doer,
		DeleteContainerDoer:         doer,
		DeleteComponentDoer:         doer,
		DeleteRelationshipDoer:      doer,
		DeleteLandscapeViewDoer:     doer,
		DeleteSystemContextViewDoer: doer,
		DeleteContainerViewDoer:     doer,
		DeleteComponentViewDoer:     doer,
		DeleteElementStyleDoer:      doer,
		DeleteRelationshipStyleDoer: doer,
		RestoreResponseBody:         restoreBody,
		scheme:                      scheme,
		host:                        host,
		decoder:                     dec,
		encoder:                     enc,
	}
}

// UpdateDSL returns an endpoint that makes HTTP requests to the DSLEditor
// service UpdateDSL server.
func (c *Client) UpdateDSL() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateDSLRequest(c.encoder)
		decodeResponse = DecodeUpdateDSLResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateDSLRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateDSLDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "UpdateDSL", err)
		}
		return decodeResponse(resp)
	}
}

// UpsertSystem returns an endpoint that makes HTTP requests to the DSLEditor
// service UpsertSystem server.
func (c *Client) UpsertSystem() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpsertSystemRequest(c.encoder)
		decodeResponse = DecodeUpsertSystemResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpsertSystemRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpsertSystemDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "UpsertSystem", err)
		}
		return decodeResponse(resp)
	}
}

// UpsertPerson returns an endpoint that makes HTTP requests to the DSLEditor
// service UpsertPerson server.
func (c *Client) UpsertPerson() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpsertPersonRequest(c.encoder)
		decodeResponse = DecodeUpsertPersonResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpsertPersonRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpsertPersonDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "UpsertPerson", err)
		}
		return decodeResponse(resp)
	}
}

// UpsertContainer returns an endpoint that makes HTTP requests to the
// DSLEditor service UpsertContainer server.
func (c *Client) UpsertContainer() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpsertContainerRequest(c.encoder)
		decodeResponse = DecodeUpsertContainerResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpsertContainerRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpsertContainerDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "UpsertContainer", err)
		}
		return decodeResponse(resp)
	}
}

// UpsertComponent returns an endpoint that makes HTTP requests to the
// DSLEditor service UpsertComponent server.
func (c *Client) UpsertComponent() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpsertComponentRequest(c.encoder)
		decodeResponse = DecodeUpsertComponentResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpsertComponentRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpsertComponentDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "UpsertComponent", err)
		}
		return decodeResponse(resp)
	}
}

// UpsertRelationship returns an endpoint that makes HTTP requests to the
// DSLEditor service UpsertRelationship server.
func (c *Client) UpsertRelationship() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpsertRelationshipRequest(c.encoder)
		decodeResponse = DecodeUpsertRelationshipResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpsertRelationshipRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpsertRelationshipDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "UpsertRelationship", err)
		}
		return decodeResponse(resp)
	}
}

// UpsertLandscapeView returns an endpoint that makes HTTP requests to the
// DSLEditor service UpsertLandscapeView server.
func (c *Client) UpsertLandscapeView() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpsertLandscapeViewRequest(c.encoder)
		decodeResponse = DecodeUpsertLandscapeViewResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpsertLandscapeViewRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpsertLandscapeViewDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "UpsertLandscapeView", err)
		}
		return decodeResponse(resp)
	}
}

// UpsertSystemContextView returns an endpoint that makes HTTP requests to the
// DSLEditor service UpsertSystemContextView server.
func (c *Client) UpsertSystemContextView() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpsertSystemContextViewRequest(c.encoder)
		decodeResponse = DecodeUpsertSystemContextViewResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpsertSystemContextViewRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpsertSystemContextViewDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "UpsertSystemContextView", err)
		}
		return decodeResponse(resp)
	}
}

// UpsertContainerView returns an endpoint that makes HTTP requests to the
// DSLEditor service UpsertContainerView server.
func (c *Client) UpsertContainerView() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpsertContainerViewRequest(c.encoder)
		decodeResponse = DecodeUpsertContainerViewResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpsertContainerViewRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpsertContainerViewDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "UpsertContainerView", err)
		}
		return decodeResponse(resp)
	}
}

// UpsertComponentView returns an endpoint that makes HTTP requests to the
// DSLEditor service UpsertComponentView server.
func (c *Client) UpsertComponentView() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpsertComponentViewRequest(c.encoder)
		decodeResponse = DecodeUpsertComponentViewResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpsertComponentViewRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpsertComponentViewDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "UpsertComponentView", err)
		}
		return decodeResponse(resp)
	}
}

// UpserElementStyle returns an endpoint that makes HTTP requests to the
// DSLEditor service UpserElementStyle server.
func (c *Client) UpserElementStyle() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpserElementStyleRequest(c.encoder)
		decodeResponse = DecodeUpserElementStyleResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpserElementStyleRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpserElementStyleDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "UpserElementStyle", err)
		}
		return decodeResponse(resp)
	}
}

// UpsertRelationshipStyle returns an endpoint that makes HTTP requests to the
// DSLEditor service UpsertRelationshipStyle server.
func (c *Client) UpsertRelationshipStyle() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpsertRelationshipStyleRequest(c.encoder)
		decodeResponse = DecodeUpsertRelationshipStyleResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpsertRelationshipStyleRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpsertRelationshipStyleDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "UpsertRelationshipStyle", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteSystem returns an endpoint that makes HTTP requests to the DSLEditor
// service DeleteSystem server.
func (c *Client) DeleteSystem() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteSystemRequest(c.encoder)
		decodeResponse = DecodeDeleteSystemResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteSystemRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteSystemDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "DeleteSystem", err)
		}
		return decodeResponse(resp)
	}
}

// DeletePerson returns an endpoint that makes HTTP requests to the DSLEditor
// service DeletePerson server.
func (c *Client) DeletePerson() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeletePersonRequest(c.encoder)
		decodeResponse = DecodeDeletePersonResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeletePersonRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeletePersonDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "DeletePerson", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteContainer returns an endpoint that makes HTTP requests to the
// DSLEditor service DeleteContainer server.
func (c *Client) DeleteContainer() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteContainerRequest(c.encoder)
		decodeResponse = DecodeDeleteContainerResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteContainerRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteContainerDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "DeleteContainer", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteComponent returns an endpoint that makes HTTP requests to the
// DSLEditor service DeleteComponent server.
func (c *Client) DeleteComponent() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteComponentRequest(c.encoder)
		decodeResponse = DecodeDeleteComponentResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteComponentRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteComponentDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "DeleteComponent", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteRelationship returns an endpoint that makes HTTP requests to the
// DSLEditor service DeleteRelationship server.
func (c *Client) DeleteRelationship() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteRelationshipRequest(c.encoder)
		decodeResponse = DecodeDeleteRelationshipResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteRelationshipRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteRelationshipDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "DeleteRelationship", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteLandscapeView returns an endpoint that makes HTTP requests to the
// DSLEditor service DeleteLandscapeView server.
func (c *Client) DeleteLandscapeView() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteLandscapeViewRequest(c.encoder)
		decodeResponse = DecodeDeleteLandscapeViewResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteLandscapeViewRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteLandscapeViewDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "DeleteLandscapeView", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteSystemContextView returns an endpoint that makes HTTP requests to the
// DSLEditor service DeleteSystemContextView server.
func (c *Client) DeleteSystemContextView() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteSystemContextViewRequest(c.encoder)
		decodeResponse = DecodeDeleteSystemContextViewResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteSystemContextViewRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteSystemContextViewDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "DeleteSystemContextView", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteContainerView returns an endpoint that makes HTTP requests to the
// DSLEditor service DeleteContainerView server.
func (c *Client) DeleteContainerView() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteContainerViewRequest(c.encoder)
		decodeResponse = DecodeDeleteContainerViewResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteContainerViewRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteContainerViewDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "DeleteContainerView", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteComponentView returns an endpoint that makes HTTP requests to the
// DSLEditor service DeleteComponentView server.
func (c *Client) DeleteComponentView() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteComponentViewRequest(c.encoder)
		decodeResponse = DecodeDeleteComponentViewResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteComponentViewRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteComponentViewDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "DeleteComponentView", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteElementStyle returns an endpoint that makes HTTP requests to the
// DSLEditor service DeleteElementStyle server.
func (c *Client) DeleteElementStyle() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteElementStyleRequest(c.encoder)
		decodeResponse = DecodeDeleteElementStyleResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteElementStyleRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteElementStyleDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "DeleteElementStyle", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteRelationshipStyle returns an endpoint that makes HTTP requests to the
// DSLEditor service DeleteRelationshipStyle server.
func (c *Client) DeleteRelationshipStyle() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteRelationshipStyleRequest(c.encoder)
		decodeResponse = DecodeDeleteRelationshipStyleResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteRelationshipStyleRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteRelationshipStyleDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("DSLEditor", "DeleteRelationshipStyle", err)
		}
		return decodeResponse(resp)
	}
}
