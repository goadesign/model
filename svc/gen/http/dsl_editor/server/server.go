// Code generated by goa v3.13.2, DO NOT EDIT.
//
// DSLEditor HTTP server
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package server

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	dsleditor "goa.design/model/svc/gen/dsl_editor"
)

// Server lists the DSLEditor service endpoint HTTP handlers.
type Server struct {
	Mounts                  []*MountPoint
	UpdateDSL               http.Handler
	UpsertSystem            http.Handler
	UpsertPerson            http.Handler
	UpsertContainer         http.Handler
	UpsertComponent         http.Handler
	UpsertRelationship      http.Handler
	UpsertLandscapeView     http.Handler
	UpsertSystemContextView http.Handler
	UpsertContainerView     http.Handler
	UpsertComponentView     http.Handler
	UpserElementStyle       http.Handler
	UpsertRelationshipStyle http.Handler
	DeleteSystem            http.Handler
	DeletePerson            http.Handler
	DeleteContainer         http.Handler
	DeleteComponent         http.Handler
	DeleteRelationship      http.Handler
	DeleteLandscapeView     http.Handler
	DeleteSystemContextView http.Handler
	DeleteContainerView     http.Handler
	DeleteComponentView     http.Handler
	DeleteElementStyle      http.Handler
	DeleteRelationshipStyle http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the DSLEditor service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *dsleditor.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"UpdateDSL", "POST", "/api/dsl"},
			{"UpsertSystem", "PUT", "/api/dsl/model/system"},
			{"UpsertPerson", "PUT", "/api/dsl/model/person"},
			{"UpsertContainer", "PUT", "/api/dsl/model/container"},
			{"UpsertComponent", "PUT", "/api/dsl/model/component"},
			{"UpsertRelationship", "PUT", "/api/dsl/model/relationship"},
			{"UpsertLandscapeView", "PUT", "/api/dsl/views/landscape"},
			{"UpsertSystemContextView", "PUT", "/api/dsl/views/systemcontext"},
			{"UpsertContainerView", "PUT", "/api/dsl/views/container"},
			{"UpsertComponentView", "PUT", "/api/dsl/views/component"},
			{"UpserElementStyle", "PUT", "/api/dsl/views/elementstyle"},
			{"UpsertRelationshipStyle", "PUT", "/api/dsl/views/relationshipstyle"},
			{"DeleteSystem", "DELETE", "/api/dsl/model/system/{SystemName}"},
			{"DeletePerson", "DELETE", "/api/dsl/model/person/{PersonName}"},
			{"DeleteContainer", "DELETE", "/api/dsl/model/system/{SystemName}/container/{ContainerName}"},
			{"DeleteComponent", "DELETE", "/api/dsl/model/system/{SystemName}/container/{ContainerName}/component/{ComponentName}"},
			{"DeleteRelationship", "DELETE", "/api/dsl/model/relationship"},
			{"DeleteLandscapeView", "DELETE", "/api/dsl/views/landscape/{Key}"},
			{"DeleteSystemContextView", "DELETE", "/api/dsl/views/systemcontext/{Key}"},
			{"DeleteContainerView", "DELETE", "/api/dsl/views/container/{Key}"},
			{"DeleteComponentView", "DELETE", "/api/dsl/views/component/{Key}"},
			{"DeleteElementStyle", "DELETE", "/api/dsl/views/elementstyle/{Tag}"},
			{"DeleteRelationshipStyle", "DELETE", "/api/dsl/views/relationshipstyle/{Tag}"},
		},
		UpdateDSL:               NewUpdateDSLHandler(e.UpdateDSL, mux, decoder, encoder, errhandler, formatter),
		UpsertSystem:            NewUpsertSystemHandler(e.UpsertSystem, mux, decoder, encoder, errhandler, formatter),
		UpsertPerson:            NewUpsertPersonHandler(e.UpsertPerson, mux, decoder, encoder, errhandler, formatter),
		UpsertContainer:         NewUpsertContainerHandler(e.UpsertContainer, mux, decoder, encoder, errhandler, formatter),
		UpsertComponent:         NewUpsertComponentHandler(e.UpsertComponent, mux, decoder, encoder, errhandler, formatter),
		UpsertRelationship:      NewUpsertRelationshipHandler(e.UpsertRelationship, mux, decoder, encoder, errhandler, formatter),
		UpsertLandscapeView:     NewUpsertLandscapeViewHandler(e.UpsertLandscapeView, mux, decoder, encoder, errhandler, formatter),
		UpsertSystemContextView: NewUpsertSystemContextViewHandler(e.UpsertSystemContextView, mux, decoder, encoder, errhandler, formatter),
		UpsertContainerView:     NewUpsertContainerViewHandler(e.UpsertContainerView, mux, decoder, encoder, errhandler, formatter),
		UpsertComponentView:     NewUpsertComponentViewHandler(e.UpsertComponentView, mux, decoder, encoder, errhandler, formatter),
		UpserElementStyle:       NewUpserElementStyleHandler(e.UpserElementStyle, mux, decoder, encoder, errhandler, formatter),
		UpsertRelationshipStyle: NewUpsertRelationshipStyleHandler(e.UpsertRelationshipStyle, mux, decoder, encoder, errhandler, formatter),
		DeleteSystem:            NewDeleteSystemHandler(e.DeleteSystem, mux, decoder, encoder, errhandler, formatter),
		DeletePerson:            NewDeletePersonHandler(e.DeletePerson, mux, decoder, encoder, errhandler, formatter),
		DeleteContainer:         NewDeleteContainerHandler(e.DeleteContainer, mux, decoder, encoder, errhandler, formatter),
		DeleteComponent:         NewDeleteComponentHandler(e.DeleteComponent, mux, decoder, encoder, errhandler, formatter),
		DeleteRelationship:      NewDeleteRelationshipHandler(e.DeleteRelationship, mux, decoder, encoder, errhandler, formatter),
		DeleteLandscapeView:     NewDeleteLandscapeViewHandler(e.DeleteLandscapeView, mux, decoder, encoder, errhandler, formatter),
		DeleteSystemContextView: NewDeleteSystemContextViewHandler(e.DeleteSystemContextView, mux, decoder, encoder, errhandler, formatter),
		DeleteContainerView:     NewDeleteContainerViewHandler(e.DeleteContainerView, mux, decoder, encoder, errhandler, formatter),
		DeleteComponentView:     NewDeleteComponentViewHandler(e.DeleteComponentView, mux, decoder, encoder, errhandler, formatter),
		DeleteElementStyle:      NewDeleteElementStyleHandler(e.DeleteElementStyle, mux, decoder, encoder, errhandler, formatter),
		DeleteRelationshipStyle: NewDeleteRelationshipStyleHandler(e.DeleteRelationshipStyle, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "DSLEditor" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.UpdateDSL = m(s.UpdateDSL)
	s.UpsertSystem = m(s.UpsertSystem)
	s.UpsertPerson = m(s.UpsertPerson)
	s.UpsertContainer = m(s.UpsertContainer)
	s.UpsertComponent = m(s.UpsertComponent)
	s.UpsertRelationship = m(s.UpsertRelationship)
	s.UpsertLandscapeView = m(s.UpsertLandscapeView)
	s.UpsertSystemContextView = m(s.UpsertSystemContextView)
	s.UpsertContainerView = m(s.UpsertContainerView)
	s.UpsertComponentView = m(s.UpsertComponentView)
	s.UpserElementStyle = m(s.UpserElementStyle)
	s.UpsertRelationshipStyle = m(s.UpsertRelationshipStyle)
	s.DeleteSystem = m(s.DeleteSystem)
	s.DeletePerson = m(s.DeletePerson)
	s.DeleteContainer = m(s.DeleteContainer)
	s.DeleteComponent = m(s.DeleteComponent)
	s.DeleteRelationship = m(s.DeleteRelationship)
	s.DeleteLandscapeView = m(s.DeleteLandscapeView)
	s.DeleteSystemContextView = m(s.DeleteSystemContextView)
	s.DeleteContainerView = m(s.DeleteContainerView)
	s.DeleteComponentView = m(s.DeleteComponentView)
	s.DeleteElementStyle = m(s.DeleteElementStyle)
	s.DeleteRelationshipStyle = m(s.DeleteRelationshipStyle)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return dsleditor.MethodNames[:] }

// Mount configures the mux to serve the DSLEditor endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountUpdateDSLHandler(mux, h.UpdateDSL)
	MountUpsertSystemHandler(mux, h.UpsertSystem)
	MountUpsertPersonHandler(mux, h.UpsertPerson)
	MountUpsertContainerHandler(mux, h.UpsertContainer)
	MountUpsertComponentHandler(mux, h.UpsertComponent)
	MountUpsertRelationshipHandler(mux, h.UpsertRelationship)
	MountUpsertLandscapeViewHandler(mux, h.UpsertLandscapeView)
	MountUpsertSystemContextViewHandler(mux, h.UpsertSystemContextView)
	MountUpsertContainerViewHandler(mux, h.UpsertContainerView)
	MountUpsertComponentViewHandler(mux, h.UpsertComponentView)
	MountUpserElementStyleHandler(mux, h.UpserElementStyle)
	MountUpsertRelationshipStyleHandler(mux, h.UpsertRelationshipStyle)
	MountDeleteSystemHandler(mux, h.DeleteSystem)
	MountDeletePersonHandler(mux, h.DeletePerson)
	MountDeleteContainerHandler(mux, h.DeleteContainer)
	MountDeleteComponentHandler(mux, h.DeleteComponent)
	MountDeleteRelationshipHandler(mux, h.DeleteRelationship)
	MountDeleteLandscapeViewHandler(mux, h.DeleteLandscapeView)
	MountDeleteSystemContextViewHandler(mux, h.DeleteSystemContextView)
	MountDeleteContainerViewHandler(mux, h.DeleteContainerView)
	MountDeleteComponentViewHandler(mux, h.DeleteComponentView)
	MountDeleteElementStyleHandler(mux, h.DeleteElementStyle)
	MountDeleteRelationshipStyleHandler(mux, h.DeleteRelationshipStyle)
}

// Mount configures the mux to serve the DSLEditor endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountUpdateDSLHandler configures the mux to serve the "DSLEditor" service
// "UpdateDSL" endpoint.
func MountUpdateDSLHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/dsl", f)
}

// NewUpdateDSLHandler creates a HTTP handler which loads the HTTP request and
// calls the "DSLEditor" service "UpdateDSL" endpoint.
func NewUpdateDSLHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateDSLRequest(mux, decoder)
		encodeResponse = EncodeUpdateDSLResponse(encoder)
		encodeError    = EncodeUpdateDSLError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpdateDSL")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpsertSystemHandler configures the mux to serve the "DSLEditor" service
// "UpsertSystem" endpoint.
func MountUpsertSystemHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/dsl/model/system", f)
}

// NewUpsertSystemHandler creates a HTTP handler which loads the HTTP request
// and calls the "DSLEditor" service "UpsertSystem" endpoint.
func NewUpsertSystemHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpsertSystemRequest(mux, decoder)
		encodeResponse = EncodeUpsertSystemResponse(encoder)
		encodeError    = EncodeUpsertSystemError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpsertSystem")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpsertPersonHandler configures the mux to serve the "DSLEditor" service
// "UpsertPerson" endpoint.
func MountUpsertPersonHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/dsl/model/person", f)
}

// NewUpsertPersonHandler creates a HTTP handler which loads the HTTP request
// and calls the "DSLEditor" service "UpsertPerson" endpoint.
func NewUpsertPersonHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpsertPersonRequest(mux, decoder)
		encodeResponse = EncodeUpsertPersonResponse(encoder)
		encodeError    = EncodeUpsertPersonError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpsertPerson")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpsertContainerHandler configures the mux to serve the "DSLEditor"
// service "UpsertContainer" endpoint.
func MountUpsertContainerHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/dsl/model/container", f)
}

// NewUpsertContainerHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "UpsertContainer" endpoint.
func NewUpsertContainerHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpsertContainerRequest(mux, decoder)
		encodeResponse = EncodeUpsertContainerResponse(encoder)
		encodeError    = EncodeUpsertContainerError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpsertContainer")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpsertComponentHandler configures the mux to serve the "DSLEditor"
// service "UpsertComponent" endpoint.
func MountUpsertComponentHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/dsl/model/component", f)
}

// NewUpsertComponentHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "UpsertComponent" endpoint.
func NewUpsertComponentHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpsertComponentRequest(mux, decoder)
		encodeResponse = EncodeUpsertComponentResponse(encoder)
		encodeError    = EncodeUpsertComponentError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpsertComponent")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpsertRelationshipHandler configures the mux to serve the "DSLEditor"
// service "UpsertRelationship" endpoint.
func MountUpsertRelationshipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/dsl/model/relationship", f)
}

// NewUpsertRelationshipHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "UpsertRelationship" endpoint.
func NewUpsertRelationshipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpsertRelationshipRequest(mux, decoder)
		encodeResponse = EncodeUpsertRelationshipResponse(encoder)
		encodeError    = EncodeUpsertRelationshipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpsertRelationship")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpsertLandscapeViewHandler configures the mux to serve the "DSLEditor"
// service "UpsertLandscapeView" endpoint.
func MountUpsertLandscapeViewHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/dsl/views/landscape", f)
}

// NewUpsertLandscapeViewHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "UpsertLandscapeView" endpoint.
func NewUpsertLandscapeViewHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpsertLandscapeViewRequest(mux, decoder)
		encodeResponse = EncodeUpsertLandscapeViewResponse(encoder)
		encodeError    = EncodeUpsertLandscapeViewError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpsertLandscapeView")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpsertSystemContextViewHandler configures the mux to serve the
// "DSLEditor" service "UpsertSystemContextView" endpoint.
func MountUpsertSystemContextViewHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/dsl/views/systemcontext", f)
}

// NewUpsertSystemContextViewHandler creates a HTTP handler which loads the
// HTTP request and calls the "DSLEditor" service "UpsertSystemContextView"
// endpoint.
func NewUpsertSystemContextViewHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpsertSystemContextViewRequest(mux, decoder)
		encodeResponse = EncodeUpsertSystemContextViewResponse(encoder)
		encodeError    = EncodeUpsertSystemContextViewError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpsertSystemContextView")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpsertContainerViewHandler configures the mux to serve the "DSLEditor"
// service "UpsertContainerView" endpoint.
func MountUpsertContainerViewHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/dsl/views/container", f)
}

// NewUpsertContainerViewHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "UpsertContainerView" endpoint.
func NewUpsertContainerViewHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpsertContainerViewRequest(mux, decoder)
		encodeResponse = EncodeUpsertContainerViewResponse(encoder)
		encodeError    = EncodeUpsertContainerViewError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpsertContainerView")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpsertComponentViewHandler configures the mux to serve the "DSLEditor"
// service "UpsertComponentView" endpoint.
func MountUpsertComponentViewHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/dsl/views/component", f)
}

// NewUpsertComponentViewHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "UpsertComponentView" endpoint.
func NewUpsertComponentViewHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpsertComponentViewRequest(mux, decoder)
		encodeResponse = EncodeUpsertComponentViewResponse(encoder)
		encodeError    = EncodeUpsertComponentViewError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpsertComponentView")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpserElementStyleHandler configures the mux to serve the "DSLEditor"
// service "UpserElementStyle" endpoint.
func MountUpserElementStyleHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/dsl/views/elementstyle", f)
}

// NewUpserElementStyleHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "UpserElementStyle" endpoint.
func NewUpserElementStyleHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpserElementStyleRequest(mux, decoder)
		encodeResponse = EncodeUpserElementStyleResponse(encoder)
		encodeError    = EncodeUpserElementStyleError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpserElementStyle")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpsertRelationshipStyleHandler configures the mux to serve the
// "DSLEditor" service "UpsertRelationshipStyle" endpoint.
func MountUpsertRelationshipStyleHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/dsl/views/relationshipstyle", f)
}

// NewUpsertRelationshipStyleHandler creates a HTTP handler which loads the
// HTTP request and calls the "DSLEditor" service "UpsertRelationshipStyle"
// endpoint.
func NewUpsertRelationshipStyleHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpsertRelationshipStyleRequest(mux, decoder)
		encodeResponse = EncodeUpsertRelationshipStyleResponse(encoder)
		encodeError    = EncodeUpsertRelationshipStyleError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpsertRelationshipStyle")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteSystemHandler configures the mux to serve the "DSLEditor" service
// "DeleteSystem" endpoint.
func MountDeleteSystemHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/dsl/model/system/{SystemName}", f)
}

// NewDeleteSystemHandler creates a HTTP handler which loads the HTTP request
// and calls the "DSLEditor" service "DeleteSystem" endpoint.
func NewDeleteSystemHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteSystemRequest(mux, decoder)
		encodeResponse = EncodeDeleteSystemResponse(encoder)
		encodeError    = EncodeDeleteSystemError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteSystem")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeletePersonHandler configures the mux to serve the "DSLEditor" service
// "DeletePerson" endpoint.
func MountDeletePersonHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/dsl/model/person/{PersonName}", f)
}

// NewDeletePersonHandler creates a HTTP handler which loads the HTTP request
// and calls the "DSLEditor" service "DeletePerson" endpoint.
func NewDeletePersonHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeletePersonRequest(mux, decoder)
		encodeResponse = EncodeDeletePersonResponse(encoder)
		encodeError    = EncodeDeletePersonError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeletePerson")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteContainerHandler configures the mux to serve the "DSLEditor"
// service "DeleteContainer" endpoint.
func MountDeleteContainerHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/dsl/model/system/{SystemName}/container/{ContainerName}", f)
}

// NewDeleteContainerHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "DeleteContainer" endpoint.
func NewDeleteContainerHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteContainerRequest(mux, decoder)
		encodeResponse = EncodeDeleteContainerResponse(encoder)
		encodeError    = EncodeDeleteContainerError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteContainer")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteComponentHandler configures the mux to serve the "DSLEditor"
// service "DeleteComponent" endpoint.
func MountDeleteComponentHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/dsl/model/system/{SystemName}/container/{ContainerName}/component/{ComponentName}", f)
}

// NewDeleteComponentHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "DeleteComponent" endpoint.
func NewDeleteComponentHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteComponentRequest(mux, decoder)
		encodeResponse = EncodeDeleteComponentResponse(encoder)
		encodeError    = EncodeDeleteComponentError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteComponent")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteRelationshipHandler configures the mux to serve the "DSLEditor"
// service "DeleteRelationship" endpoint.
func MountDeleteRelationshipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/dsl/model/relationship", f)
}

// NewDeleteRelationshipHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "DeleteRelationship" endpoint.
func NewDeleteRelationshipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteRelationshipRequest(mux, decoder)
		encodeResponse = EncodeDeleteRelationshipResponse(encoder)
		encodeError    = EncodeDeleteRelationshipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteRelationship")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteLandscapeViewHandler configures the mux to serve the "DSLEditor"
// service "DeleteLandscapeView" endpoint.
func MountDeleteLandscapeViewHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/dsl/views/landscape/{Key}", f)
}

// NewDeleteLandscapeViewHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "DeleteLandscapeView" endpoint.
func NewDeleteLandscapeViewHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteLandscapeViewRequest(mux, decoder)
		encodeResponse = EncodeDeleteLandscapeViewResponse(encoder)
		encodeError    = EncodeDeleteLandscapeViewError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteLandscapeView")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteSystemContextViewHandler configures the mux to serve the
// "DSLEditor" service "DeleteSystemContextView" endpoint.
func MountDeleteSystemContextViewHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/dsl/views/systemcontext/{Key}", f)
}

// NewDeleteSystemContextViewHandler creates a HTTP handler which loads the
// HTTP request and calls the "DSLEditor" service "DeleteSystemContextView"
// endpoint.
func NewDeleteSystemContextViewHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteSystemContextViewRequest(mux, decoder)
		encodeResponse = EncodeDeleteSystemContextViewResponse(encoder)
		encodeError    = EncodeDeleteSystemContextViewError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteSystemContextView")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteContainerViewHandler configures the mux to serve the "DSLEditor"
// service "DeleteContainerView" endpoint.
func MountDeleteContainerViewHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/dsl/views/container/{Key}", f)
}

// NewDeleteContainerViewHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "DeleteContainerView" endpoint.
func NewDeleteContainerViewHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteContainerViewRequest(mux, decoder)
		encodeResponse = EncodeDeleteContainerViewResponse(encoder)
		encodeError    = EncodeDeleteContainerViewError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteContainerView")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteComponentViewHandler configures the mux to serve the "DSLEditor"
// service "DeleteComponentView" endpoint.
func MountDeleteComponentViewHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/dsl/views/component/{Key}", f)
}

// NewDeleteComponentViewHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "DeleteComponentView" endpoint.
func NewDeleteComponentViewHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteComponentViewRequest(mux, decoder)
		encodeResponse = EncodeDeleteComponentViewResponse(encoder)
		encodeError    = EncodeDeleteComponentViewError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteComponentView")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteElementStyleHandler configures the mux to serve the "DSLEditor"
// service "DeleteElementStyle" endpoint.
func MountDeleteElementStyleHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/dsl/views/elementstyle/{Tag}", f)
}

// NewDeleteElementStyleHandler creates a HTTP handler which loads the HTTP
// request and calls the "DSLEditor" service "DeleteElementStyle" endpoint.
func NewDeleteElementStyleHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteElementStyleRequest(mux, decoder)
		encodeResponse = EncodeDeleteElementStyleResponse(encoder)
		encodeError    = EncodeDeleteElementStyleError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteElementStyle")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteRelationshipStyleHandler configures the mux to serve the
// "DSLEditor" service "DeleteRelationshipStyle" endpoint.
func MountDeleteRelationshipStyleHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/dsl/views/relationshipstyle/{Tag}", f)
}

// NewDeleteRelationshipStyleHandler creates a HTTP handler which loads the
// HTTP request and calls the "DSLEditor" service "DeleteRelationshipStyle"
// endpoint.
func NewDeleteRelationshipStyleHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteRelationshipStyleRequest(mux, decoder)
		encodeResponse = EncodeDeleteRelationshipStyleResponse(encoder)
		encodeError    = EncodeDeleteRelationshipStyleError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteRelationshipStyle")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DSLEditor")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
