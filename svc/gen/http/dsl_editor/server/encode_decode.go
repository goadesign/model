// Code generated by goa v3.14.0, DO NOT EDIT.
//
// DSLEditor HTTP server encoders and decoders
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"unicode/utf8"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	dsleditor "goa.design/model/svc/gen/dsl_editor"
	types "goa.design/model/svc/gen/types"
)

// EncodeUpdateDSLResponse returns an encoder for responses returned by the
// DSLEditor UpdateDSL endpoint.
func EncodeUpdateDSLResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeUpdateDSLRequest returns a decoder for requests sent to the DSLEditor
// UpdateDSL endpoint.
func DecodeUpdateDSLRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateDSLRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateDSLRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpdateDSLPackageFile(&body)

		return payload, nil
	}
}

// EncodeUpdateDSLError returns an encoder for errors returned by the UpdateDSL
// DSLEditor endpoint.
func EncodeUpdateDSLError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateDSLCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpsertSystemResponse returns an encoder for responses returned by the
// DSLEditor UpsertSystem endpoint.
func EncodeUpsertSystemResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewUpsertSystemResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpsertSystemRequest returns a decoder for requests sent to the
// DSLEditor UpsertSystem endpoint.
func DecodeUpsertSystemRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpsertSystemRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpsertSystemRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpsertSystemSystem(&body)

		return payload, nil
	}
}

// EncodeUpsertSystemError returns an encoder for errors returned by the
// UpsertSystem DSLEditor endpoint.
func EncodeUpsertSystemError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpsertSystemCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpsertPersonResponse returns an encoder for responses returned by the
// DSLEditor UpsertPerson endpoint.
func EncodeUpsertPersonResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewUpsertPersonResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpsertPersonRequest returns a decoder for requests sent to the
// DSLEditor UpsertPerson endpoint.
func DecodeUpsertPersonRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpsertPersonRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpsertPersonRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpsertPersonPerson(&body)

		return payload, nil
	}
}

// EncodeUpsertPersonError returns an encoder for errors returned by the
// UpsertPerson DSLEditor endpoint.
func EncodeUpsertPersonError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpsertPersonCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpsertContainerResponse returns an encoder for responses returned by
// the DSLEditor UpsertContainer endpoint.
func EncodeUpsertContainerResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewUpsertContainerResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpsertContainerRequest returns a decoder for requests sent to the
// DSLEditor UpsertContainer endpoint.
func DecodeUpsertContainerRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpsertContainerRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpsertContainerRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpsertContainerContainer(&body)

		return payload, nil
	}
}

// EncodeUpsertContainerError returns an encoder for errors returned by the
// UpsertContainer DSLEditor endpoint.
func EncodeUpsertContainerError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpsertContainerCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpsertComponentResponse returns an encoder for responses returned by
// the DSLEditor UpsertComponent endpoint.
func EncodeUpsertComponentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewUpsertComponentResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpsertComponentRequest returns a decoder for requests sent to the
// DSLEditor UpsertComponent endpoint.
func DecodeUpsertComponentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpsertComponentRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpsertComponentRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpsertComponentComponent(&body)

		return payload, nil
	}
}

// EncodeUpsertComponentError returns an encoder for errors returned by the
// UpsertComponent DSLEditor endpoint.
func EncodeUpsertComponentError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpsertComponentCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpsertRelationshipResponse returns an encoder for responses returned
// by the DSLEditor UpsertRelationship endpoint.
func EncodeUpsertRelationshipResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewUpsertRelationshipResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpsertRelationshipRequest returns a decoder for requests sent to the
// DSLEditor UpsertRelationship endpoint.
func DecodeUpsertRelationshipRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpsertRelationshipRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpsertRelationshipRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpsertRelationshipRelationship(&body)

		return payload, nil
	}
}

// EncodeUpsertRelationshipError returns an encoder for errors returned by the
// UpsertRelationship DSLEditor endpoint.
func EncodeUpsertRelationshipError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpsertRelationshipCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpsertLandscapeViewResponse returns an encoder for responses returned
// by the DSLEditor UpsertLandscapeView endpoint.
func EncodeUpsertLandscapeViewResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewUpsertLandscapeViewResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpsertLandscapeViewRequest returns a decoder for requests sent to the
// DSLEditor UpsertLandscapeView endpoint.
func DecodeUpsertLandscapeViewRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpsertLandscapeViewRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpsertLandscapeViewRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpsertLandscapeViewLandscapeView(&body)

		return payload, nil
	}
}

// EncodeUpsertLandscapeViewError returns an encoder for errors returned by the
// UpsertLandscapeView DSLEditor endpoint.
func EncodeUpsertLandscapeViewError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpsertLandscapeViewCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpsertSystemContextViewResponse returns an encoder for responses
// returned by the DSLEditor UpsertSystemContextView endpoint.
func EncodeUpsertSystemContextViewResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewUpsertSystemContextViewResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpsertSystemContextViewRequest returns a decoder for requests sent to
// the DSLEditor UpsertSystemContextView endpoint.
func DecodeUpsertSystemContextViewRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpsertSystemContextViewRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpsertSystemContextViewRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpsertSystemContextViewSystemContextView(&body)

		return payload, nil
	}
}

// EncodeUpsertSystemContextViewError returns an encoder for errors returned by
// the UpsertSystemContextView DSLEditor endpoint.
func EncodeUpsertSystemContextViewError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpsertSystemContextViewCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpsertContainerViewResponse returns an encoder for responses returned
// by the DSLEditor UpsertContainerView endpoint.
func EncodeUpsertContainerViewResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewUpsertContainerViewResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpsertContainerViewRequest returns a decoder for requests sent to the
// DSLEditor UpsertContainerView endpoint.
func DecodeUpsertContainerViewRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpsertContainerViewRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpsertContainerViewRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpsertContainerViewContainerView(&body)

		return payload, nil
	}
}

// EncodeUpsertContainerViewError returns an encoder for errors returned by the
// UpsertContainerView DSLEditor endpoint.
func EncodeUpsertContainerViewError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpsertContainerViewCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpsertComponentViewResponse returns an encoder for responses returned
// by the DSLEditor UpsertComponentView endpoint.
func EncodeUpsertComponentViewResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewUpsertComponentViewResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpsertComponentViewRequest returns a decoder for requests sent to the
// DSLEditor UpsertComponentView endpoint.
func DecodeUpsertComponentViewRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpsertComponentViewRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpsertComponentViewRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpsertComponentViewComponentView(&body)

		return payload, nil
	}
}

// EncodeUpsertComponentViewError returns an encoder for errors returned by the
// UpsertComponentView DSLEditor endpoint.
func EncodeUpsertComponentViewError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpsertComponentViewCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpserElementStyleResponse returns an encoder for responses returned by
// the DSLEditor UpserElementStyle endpoint.
func EncodeUpserElementStyleResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewUpserElementStyleResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpserElementStyleRequest returns a decoder for requests sent to the
// DSLEditor UpserElementStyle endpoint.
func DecodeUpserElementStyleRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpserElementStyleRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpserElementStyleRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpserElementStyleElementStyle(&body)

		return payload, nil
	}
}

// EncodeUpserElementStyleError returns an encoder for errors returned by the
// UpserElementStyle DSLEditor endpoint.
func EncodeUpserElementStyleError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpserElementStyleCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpsertRelationshipStyleResponse returns an encoder for responses
// returned by the DSLEditor UpsertRelationshipStyle endpoint.
func EncodeUpsertRelationshipStyleResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewUpsertRelationshipStyleResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpsertRelationshipStyleRequest returns a decoder for requests sent to
// the DSLEditor UpsertRelationshipStyle endpoint.
func DecodeUpsertRelationshipStyleRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpsertRelationshipStyleRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpsertRelationshipStyleRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpsertRelationshipStyleRelationshipStyle(&body)

		return payload, nil
	}
}

// EncodeUpsertRelationshipStyleError returns an encoder for errors returned by
// the UpsertRelationshipStyle DSLEditor endpoint.
func EncodeUpsertRelationshipStyleError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpsertRelationshipStyleCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteSystemResponse returns an encoder for responses returned by the
// DSLEditor DeleteSystem endpoint.
func EncodeDeleteSystemResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewDeleteSystemResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteSystemRequest returns a decoder for requests sent to the
// DSLEditor DeleteSystem endpoint.
func DecodeDeleteSystemRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			systemName string
			repository string
			dir        string
			err        error

			params = mux.Vars(r)
		)
		systemName = params["SystemName"]
		repository = r.URL.Query().Get("repo")
		if repository == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Repository", "query string"))
		}
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteSystemPayload(systemName, repository, dir)

		return payload, nil
	}
}

// EncodeDeleteSystemError returns an encoder for errors returned by the
// DeleteSystem DSLEditor endpoint.
func EncodeDeleteSystemError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteSystemNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteSystemCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeletePersonResponse returns an encoder for responses returned by the
// DSLEditor DeletePerson endpoint.
func EncodeDeletePersonResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewDeletePersonResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeletePersonRequest returns a decoder for requests sent to the
// DSLEditor DeletePerson endpoint.
func DecodeDeletePersonRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			personName string
			repository string
			dir        string
			err        error

			params = mux.Vars(r)
		)
		personName = params["PersonName"]
		repository = r.URL.Query().Get("repo")
		if repository == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Repository", "query string"))
		}
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeletePersonPayload(personName, repository, dir)

		return payload, nil
	}
}

// EncodeDeletePersonError returns an encoder for errors returned by the
// DeletePerson DSLEditor endpoint.
func EncodeDeletePersonError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeletePersonNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeletePersonCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteContainerResponse returns an encoder for responses returned by
// the DSLEditor DeleteContainer endpoint.
func EncodeDeleteContainerResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewDeleteContainerResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteContainerRequest returns a decoder for requests sent to the
// DSLEditor DeleteContainer endpoint.
func DecodeDeleteContainerRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			systemName    string
			containerName string
			repository    string
			dir           string
			err           error

			params = mux.Vars(r)
		)
		systemName = params["SystemName"]
		containerName = params["ContainerName"]
		repository = r.URL.Query().Get("repo")
		if repository == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Repository", "query string"))
		}
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteContainerPayload(systemName, containerName, repository, dir)

		return payload, nil
	}
}

// EncodeDeleteContainerError returns an encoder for errors returned by the
// DeleteContainer DSLEditor endpoint.
func EncodeDeleteContainerError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteContainerNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteContainerCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteComponentResponse returns an encoder for responses returned by
// the DSLEditor DeleteComponent endpoint.
func EncodeDeleteComponentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewDeleteComponentResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteComponentRequest returns a decoder for requests sent to the
// DSLEditor DeleteComponent endpoint.
func DecodeDeleteComponentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			systemName    string
			containerName string
			componentName string
			repository    string
			dir           string
			err           error

			params = mux.Vars(r)
		)
		systemName = params["SystemName"]
		containerName = params["ContainerName"]
		componentName = params["ComponentName"]
		repository = r.URL.Query().Get("repo")
		if repository == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Repository", "query string"))
		}
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteComponentPayload(systemName, containerName, componentName, repository, dir)

		return payload, nil
	}
}

// EncodeDeleteComponentError returns an encoder for errors returned by the
// DeleteComponent DSLEditor endpoint.
func EncodeDeleteComponentError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteComponentNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteComponentCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteRelationshipResponse returns an encoder for responses returned
// by the DSLEditor DeleteRelationship endpoint.
func EncodeDeleteRelationshipResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewDeleteRelationshipResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteRelationshipRequest returns a decoder for requests sent to the
// DSLEditor DeleteRelationship endpoint.
func DecodeDeleteRelationshipRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			sourceKind      string
			sourcePath      string
			repository      string
			dir             string
			destinationPath string
			err             error

			params = mux.Vars(r)
		)
		sourceKind = params["SourceKind"]
		if !(sourceKind == "SoftwareSystem" || sourceKind == "Person" || sourceKind == "Container" || sourceKind == "Component") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("SourceKind", sourceKind, []any{"SoftwareSystem", "Person", "Container", "Component"}))
		}
		sourcePath = params["SourcePath"]
		repository = r.URL.Query().Get("repo")
		if repository == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Repository", "query string"))
		}
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		destinationPath = r.URL.Query().Get("path")
		if destinationPath == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("DestinationPath", "query string"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteRelationshipPayload(sourceKind, sourcePath, repository, dir, destinationPath)

		return payload, nil
	}
}

// EncodeDeleteRelationshipError returns an encoder for errors returned by the
// DeleteRelationship DSLEditor endpoint.
func EncodeDeleteRelationshipError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteRelationshipNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteRelationshipCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteLandscapeViewResponse returns an encoder for responses returned
// by the DSLEditor DeleteLandscapeView endpoint.
func EncodeDeleteLandscapeViewResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewDeleteLandscapeViewResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteLandscapeViewRequest returns a decoder for requests sent to the
// DSLEditor DeleteLandscapeView endpoint.
func DecodeDeleteLandscapeViewRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			key        string
			repository string
			dir        string
			err        error

			params = mux.Vars(r)
		)
		key = params["Key"]
		repository = r.URL.Query().Get("repo")
		if repository == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Repository", "query string"))
		}
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteLandscapeViewPayload(key, repository, dir)

		return payload, nil
	}
}

// EncodeDeleteLandscapeViewError returns an encoder for errors returned by the
// DeleteLandscapeView DSLEditor endpoint.
func EncodeDeleteLandscapeViewError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteLandscapeViewNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteLandscapeViewCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteSystemContextViewResponse returns an encoder for responses
// returned by the DSLEditor DeleteSystemContextView endpoint.
func EncodeDeleteSystemContextViewResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewDeleteSystemContextViewResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteSystemContextViewRequest returns a decoder for requests sent to
// the DSLEditor DeleteSystemContextView endpoint.
func DecodeDeleteSystemContextViewRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			key        string
			repository string
			dir        string
			err        error

			params = mux.Vars(r)
		)
		key = params["Key"]
		repository = r.URL.Query().Get("repo")
		if repository == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Repository", "query string"))
		}
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteSystemContextViewPayload(key, repository, dir)

		return payload, nil
	}
}

// EncodeDeleteSystemContextViewError returns an encoder for errors returned by
// the DeleteSystemContextView DSLEditor endpoint.
func EncodeDeleteSystemContextViewError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteSystemContextViewNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteSystemContextViewCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteContainerViewResponse returns an encoder for responses returned
// by the DSLEditor DeleteContainerView endpoint.
func EncodeDeleteContainerViewResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewDeleteContainerViewResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteContainerViewRequest returns a decoder for requests sent to the
// DSLEditor DeleteContainerView endpoint.
func DecodeDeleteContainerViewRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			key        string
			repository string
			dir        string
			err        error

			params = mux.Vars(r)
		)
		key = params["Key"]
		repository = r.URL.Query().Get("repo")
		if repository == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Repository", "query string"))
		}
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteContainerViewPayload(key, repository, dir)

		return payload, nil
	}
}

// EncodeDeleteContainerViewError returns an encoder for errors returned by the
// DeleteContainerView DSLEditor endpoint.
func EncodeDeleteContainerViewError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteContainerViewNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteContainerViewCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteComponentViewResponse returns an encoder for responses returned
// by the DSLEditor DeleteComponentView endpoint.
func EncodeDeleteComponentViewResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewDeleteComponentViewResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteComponentViewRequest returns a decoder for requests sent to the
// DSLEditor DeleteComponentView endpoint.
func DecodeDeleteComponentViewRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			key        string
			repository string
			dir        string
			err        error

			params = mux.Vars(r)
		)
		key = params["Key"]
		repository = r.URL.Query().Get("repo")
		if repository == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Repository", "query string"))
		}
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteComponentViewPayload(key, repository, dir)

		return payload, nil
	}
}

// EncodeDeleteComponentViewError returns an encoder for errors returned by the
// DeleteComponentView DSLEditor endpoint.
func EncodeDeleteComponentViewError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteComponentViewNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteComponentViewCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteElementStyleResponse returns an encoder for responses returned
// by the DSLEditor DeleteElementStyle endpoint.
func EncodeDeleteElementStyleResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewDeleteElementStyleResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteElementStyleRequest returns a decoder for requests sent to the
// DSLEditor DeleteElementStyle endpoint.
func DecodeDeleteElementStyleRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			tag        string
			repository string
			dir        string
			err        error

			params = mux.Vars(r)
		)
		tag = params["Tag"]
		repository = r.URL.Query().Get("repo")
		if repository == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Repository", "query string"))
		}
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteElementStylePayload(tag, repository, dir)

		return payload, nil
	}
}

// EncodeDeleteElementStyleError returns an encoder for errors returned by the
// DeleteElementStyle DSLEditor endpoint.
func EncodeDeleteElementStyleError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteElementStyleNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteElementStyleCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteRelationshipStyleResponse returns an encoder for responses
// returned by the DSLEditor DeleteRelationshipStyle endpoint.
func EncodeDeleteRelationshipStyleResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*types.PackageFile)
		enc := encoder(ctx, w)
		body := NewDeleteRelationshipStyleResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteRelationshipStyleRequest returns a decoder for requests sent to
// the DSLEditor DeleteRelationshipStyle endpoint.
func DecodeDeleteRelationshipStyleRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			tag        string
			repository string
			dir        string
			err        error

			params = mux.Vars(r)
		)
		tag = params["Tag"]
		repository = r.URL.Query().Get("repo")
		if repository == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Repository", "query string"))
		}
		if utf8.RuneCountInString(repository) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Repository", repository, utf8.RuneCountInString(repository), 1, true))
		}
		dir = r.URL.Query().Get("dir")
		if dir == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Dir", "query string"))
		}
		if utf8.RuneCountInString(dir) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Dir", dir, utf8.RuneCountInString(dir), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteRelationshipStylePayload(tag, repository, dir)

		return payload, nil
	}
}

// EncodeDeleteRelationshipStyleError returns an encoder for errors returned by
// the DeleteRelationshipStyle DSLEditor endpoint.
func EncodeDeleteRelationshipStyleError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteRelationshipStyleNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "compilation_failed":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteRelationshipStyleCompilationFailedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// unmarshalFileLocatorRequestBodyToTypesFileLocator builds a value of type
// *types.FileLocator from a value of type *FileLocatorRequestBody.
func unmarshalFileLocatorRequestBodyToTypesFileLocator(v *FileLocatorRequestBody) *types.FileLocator {
	res := &types.FileLocator{
		Filename:   *v.Filename,
		Repository: *v.Repository,
		Dir:        *v.Dir,
	}

	return res
}

// marshalTypesFileLocatorToFileLocatorResponseBody builds a value of type
// *FileLocatorResponseBody from a value of type *types.FileLocator.
func marshalTypesFileLocatorToFileLocatorResponseBody(v *types.FileLocator) *FileLocatorResponseBody {
	res := &FileLocatorResponseBody{
		Filename:   v.Filename,
		Repository: v.Repository,
		Dir:        v.Dir,
	}

	return res
}

// unmarshalElementViewRequestBodyToDsleditorElementView builds a value of type
// *dsleditor.ElementView from a value of type *ElementViewRequestBody.
func unmarshalElementViewRequestBodyToDsleditorElementView(v *ElementViewRequestBody) *dsleditor.ElementView {
	if v == nil {
		return nil
	}
	res := &dsleditor.ElementView{
		Element: v.Element,
	}

	return res
}

// unmarshalRelationshipViewRequestBodyToDsleditorRelationshipView builds a
// value of type *dsleditor.RelationshipView from a value of type
// *RelationshipViewRequestBody.
func unmarshalRelationshipViewRequestBodyToDsleditorRelationshipView(v *RelationshipViewRequestBody) *dsleditor.RelationshipView {
	if v == nil {
		return nil
	}
	res := &dsleditor.RelationshipView{
		Source:      v.Source,
		Destination: v.Destination,
	}

	return res
}
