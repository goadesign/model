// Code generated by goa v3.13.2, DO NOT EDIT.
//
// DSLEditor service
//
// Command:
// $ goa gen goa.design/model/svc/design -o svc/

package dsleditor

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	types "goa.design/model/svc/gen/types"
)

// Service is the DSLEditor service interface.
type Service interface {
	// Update the DSL for the given package, compile it and return the
	// corresponding JSON if successful
	UpdateDSL(context.Context, *types.PackageFile) (err error)
	// Create or update a software system in the model
	UpsertSystem(context.Context, *System) (res *types.PackageFile, err error)
	// Create or update a person in the model
	UpsertPerson(context.Context, *Person) (res *types.PackageFile, err error)
	// Create or update a container in the model
	UpsertContainer(context.Context, *Container) (res *types.PackageFile, err error)
	// Create or update a component in the model
	UpsertComponent(context.Context, *Component) (res *types.PackageFile, err error)
	// Create or update a relationship in the model
	UpsertRelationship(context.Context, *Relationship) (res *types.PackageFile, err error)
	// Create or update a landscape view in the model
	UpsertLandscapeView(context.Context, *LandscapeView) (res *types.PackageFile, err error)
	// Create or update a system context view in the model
	UpsertSystemContextView(context.Context, *SystemContextView) (res *types.PackageFile, err error)
	// Create or update a container view in the model
	UpsertContainerView(context.Context, *ContainerView) (res *types.PackageFile, err error)
	// Create or update a component view in the model
	UpsertComponentView(context.Context, *ComponentView) (res *types.PackageFile, err error)
	// Create or update an element style in the model
	UpserElementStyle(context.Context, *ElementStyle) (res *types.PackageFile, err error)
	// Create or update a relationship style in the model
	UpsertRelationshipStyle(context.Context, *RelationshipStyle) (res *types.PackageFile, err error)
	// Delete an existing software system from the model
	DeleteSystem(context.Context, *DeleteSystemPayload) (res *types.PackageFile, err error)
	// Delete an existing person from the model
	DeletePerson(context.Context, *DeletePersonPayload) (res *types.PackageFile, err error)
	// Delete an existing container from the model
	DeleteContainer(context.Context, *DeleteContainerPayload) (res *types.PackageFile, err error)
	// Delete an existing component from the model
	DeleteComponent(context.Context, *DeleteComponentPayload) (res *types.PackageFile, err error)
	// Delete an existing relationship from the model
	DeleteRelationship(context.Context, *DeleteRelationshipPayload) (res *types.PackageFile, err error)
	// Delete an existing landscape view from the model
	DeleteLandscapeView(context.Context, *DeleteLandscapeViewPayload) (res *types.PackageFile, err error)
	// Delete an existing system context view from the model
	DeleteSystemContextView(context.Context, *DeleteSystemContextViewPayload) (res *types.PackageFile, err error)
	// Delete an existing container view from the model
	DeleteContainerView(context.Context, *DeleteContainerViewPayload) (res *types.PackageFile, err error)
	// Delete an existing component view from the model
	DeleteComponentView(context.Context, *DeleteComponentViewPayload) (res *types.PackageFile, err error)
	// Delete an existing element style from the model
	DeleteElementStyle(context.Context, *DeleteElementStylePayload) (res *types.PackageFile, err error)
	// Delete an existing relationship style from the model
	DeleteRelationshipStyle(context.Context, *DeleteRelationshipStylePayload) (res *types.PackageFile, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "DSLEditor"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [23]string{"UpdateDSL", "UpsertSystem", "UpsertPerson", "UpsertContainer", "UpsertComponent", "UpsertRelationship", "UpsertLandscapeView", "UpsertSystemContextView", "UpsertContainerView", "UpsertComponentView", "UpserElementStyle", "UpsertRelationshipStyle", "DeleteSystem", "DeletePerson", "DeleteContainer", "DeleteComponent", "DeleteRelationship", "DeleteLandscapeView", "DeleteSystemContextView", "DeleteContainerView", "DeleteComponentView", "DeleteElementStyle", "DeleteRelationshipStyle"}

// Component is the payload type of the DSLEditor service UpsertComponent
// method.
type Component struct {
	// Path to file containing component DSL
	Locator *types.FileLocator
	// Name of parent software system
	SystemName string
	// Name of parent container
	ContainerName string
	// Name of component
	Name string
	// Description of component
	Description *string
	// Technology used by component
	Technology *string
	// Attached tags
	Tags []string
	// Documentation URL
	URL *string
	// Set of arbitrary name-value properties (shown in diagram tooltips)
	Properties map[string]string
}

// ComponentView is the payload type of the DSLEditor service
// UpsertComponentView method.
type ComponentView struct {
	// Name of software system to create view for
	SoftwareSystemName string
	// Name of container to create view for
	ContainerName string
	// Indicates whether the container boundaries are visible on the resulting
	// diagram
	ContainerBoundaryVisible bool
	// Path to file containing view DSL
	Locator *types.FileLocator
	// Key of view
	Key string
	// Title of view
	Title string
	// Description of view
	Description *string
	// Paper size of view
	PaperSize *string
	// Elements in view
	ElementViews []*ElementView
	// Relationships in view
	RelationshipViews []*RelationshipView
}

// Container is the payload type of the DSLEditor service UpsertContainer
// method.
type Container struct {
	// Path to file containing container DSL
	Locator *types.FileLocator
	// Name of parent software system
	SystemName string
	// Name of container
	Name string
	// Description of container
	Description *string
	// Technology used by container
	Technology *string
	// Attached tags
	Tags []string
	// Documentation URL
	URL *string
	// Set of arbitrary name-value properties (shown in diagram tooltips)
	Properties map[string]string
}

// ContainerView is the payload type of the DSLEditor service
// UpsertContainerView method.
type ContainerView struct {
	// Name of software system to create view for
	SoftwareSystemName *string
	// Indicates whether the system boundaries are visible on the resulting diagram
	SystemBoundariesVisible bool
	// Path to file containing view DSL
	Locator *types.FileLocator
	// Key of view
	Key string
	// Title of view
	Title string
	// Description of view
	Description *string
	// Paper size of view
	PaperSize *string
	// Elements in view
	ElementViews []*ElementView
	// Relationships in view
	RelationshipViews []*RelationshipView
}

// DeleteComponentPayload is the payload type of the DSLEditor service
// DeleteComponent method.
type DeleteComponentPayload struct {
	// Name of component software system
	SystemName string
	// Name of component software system
	ContainerName string
	// Name of component to delete
	ComponentName string
	// Name of DSL file
	Filename string
	// Path to repository root
	Repository string
	// Path to directory containing a model package
	Dir string
}

// DeleteComponentViewPayload is the payload type of the DSLEditor service
// DeleteComponentView method.
type DeleteComponentViewPayload struct {
	// Key of component view to delete
	Key string
	// Name of DSL file
	Filename string
	// Path to repository root
	Repository string
	// Path to directory containing a model package
	Dir string
}

// DeleteContainerPayload is the payload type of the DSLEditor service
// DeleteContainer method.
type DeleteContainerPayload struct {
	// Name of container software system
	SystemName *string
	// Name of container to delete
	ContainerName string
	// Name of DSL file
	Filename string
	// Path to repository root
	Repository string
	// Path to directory containing a model package
	Dir string
}

// DeleteContainerViewPayload is the payload type of the DSLEditor service
// DeleteContainerView method.
type DeleteContainerViewPayload struct {
	// Key of container view to delete
	Key string
	// Name of DSL file
	Filename string
	// Path to repository root
	Repository string
	// Path to directory containing a model package
	Dir string
}

// DeleteElementStylePayload is the payload type of the DSLEditor service
// DeleteElementStyle method.
type DeleteElementStylePayload struct {
	// Tag of element style to delete
	Tag string
	// Name of DSL file
	Filename string
	// Path to repository root
	Repository string
	// Path to directory containing a model package
	Dir string
}

// DeleteLandscapeViewPayload is the payload type of the DSLEditor service
// DeleteLandscapeView method.
type DeleteLandscapeViewPayload struct {
	// Key of landscape view to delete
	Key string
	// Name of DSL file
	Filename string
	// Path to repository root
	Repository string
	// Path to directory containing a model package
	Dir string
}

// DeletePersonPayload is the payload type of the DSLEditor service
// DeletePerson method.
type DeletePersonPayload struct {
	// Name of person to delete
	PersonName string
	// Name of DSL file
	Filename string
	// Path to repository root
	Repository string
	// Path to directory containing a model package
	Dir string
}

// DeleteRelationshipPayload is the payload type of the DSLEditor service
// DeleteRelationship method.
type DeleteRelationshipPayload struct {
	// Path to source element consisting of <software system name>[/<container
	// name>[/<component name>]]
	SourcePath string
	// Path to destination element, see SourcePath for details.
	DestinationPath string
	// Name of DSL file
	Filename string
	// Path to repository root
	Repository string
	// Path to directory containing a model package
	Dir string
}

// DeleteRelationshipStylePayload is the payload type of the DSLEditor service
// DeleteRelationshipStyle method.
type DeleteRelationshipStylePayload struct {
	// Tag of relationship style to delete
	Tag string
	// Name of DSL file
	Filename string
	// Path to repository root
	Repository string
	// Path to directory containing a model package
	Dir string
}

// DeleteSystemContextViewPayload is the payload type of the DSLEditor service
// DeleteSystemContextView method.
type DeleteSystemContextViewPayload struct {
	// Key of system context view to delete
	Key string
	// Name of DSL file
	Filename string
	// Path to repository root
	Repository string
	// Path to directory containing a model package
	Dir string
}

// DeleteSystemPayload is the payload type of the DSLEditor service
// DeleteSystem method.
type DeleteSystemPayload struct {
	// Name of software system to delete
	SystemName string
	// Name of DSL file
	Filename string
	// Path to repository root
	Repository string
	// Path to directory containing a model package
	Dir string
}

// ElementStyle is the payload type of the DSLEditor service UpserElementStyle
// method.
type ElementStyle struct {
	// Path to file containing style DSL
	Locator *types.FileLocator
	// Tag of elements to apply style onto
	Tag string
	// Shape of element
	Shape string
	// URL to icon of element
	Icon *string
	// Background color of element
	Background *string
	// Text color of element
	Color *string
	// Stroke color of element
	Stroke *string
	// Width of element
	Width *int
	// Height of element
	Height *int
	// Font size of element
	FontSize *int
	// Indicates whether the element metadata should be visible on the resulting
	// diagram
	Metadata *bool
	// Indicates whether the element description should be visible on the resulting
	// diagram
	Description bool
	// Opacity of element as a percentage
	Opacity *int
	// Type of border to apply to elements
	Border string
}

// ElementView defines an element in a view
type ElementView struct {
	// Path to element consisting of <software system name>[/<container
	// name>[/<component name>]]
	Element *string
}

// LandscapeView is the payload type of the DSLEditor service
// UpsertLandscapeView method.
type LandscapeView struct {
	// Indicates whether the enterprise boundary is visible on the resulting diagram
	EnterpriseBoundaryVisible bool
	// Path to file containing view DSL
	Locator *types.FileLocator
	// Key of view
	Key string
	// Title of view
	Title string
	// Description of view
	Description *string
	// Paper size of view
	PaperSize *string
	// Elements in view
	ElementViews []*ElementView
	// Relationships in view
	RelationshipViews []*RelationshipView
}

// Person is the payload type of the DSLEditor service UpsertPerson method.
type Person struct {
	// Path to file containing person DSL
	Locator *types.FileLocator
	// Name of person
	Name string
	// Description of person
	Description *string
	// Attached tags
	Tags []string
	// Documentation URL
	URL *string
	// Indicates whether the person is an employee (Internal) or a third party
	// (External)
	Location string
	// Set of arbitrary name-value properties (shown in diagram tooltips)
	Properties map[string]string
}

// Relationship is the payload type of the DSLEditor service UpsertRelationship
// method.
type Relationship struct {
	// Path to file containing relationship DSL
	Locator *types.FileLocator
	// Kind of source element
	SourceKind string
	// Path to source element consisting of <software system name>[/<container
	// name>[/<component name>]]
	SourcePath string
	// Relative path to destination element, see SourcePath for details.
	DestinationPath string
	// Kind of destination element
	DestinationKind string
	// Description of relationship
	Description *string
	// Technology used by relationship
	Technology *string
	// Indicates whether the relationship is synchronous or asynchronous
	InteractionStyle string
	// Attached tags
	Tags []string
	// Documentation URL
	URL *string
}

// RelationshipStyle is the payload type of the DSLEditor service
// UpsertRelationshipStyle method.
type RelationshipStyle struct {
	// Path to file containing style DSL
	Locator *types.FileLocator
	// Tag of relationships to apply style onto
	Tag string
	// Thickness of relationship in pixels
	Thickness *int
	// Font size of label on relationship
	FontSize *int
	// Width of label on relationship
	Width *int
	// Position of label on relationship as a percentage (0 is next to source, 100
	// next to destination)
	Position *int
	// Color of label
	Color *string
	// Stroke color of relationship
	Stroke *string
	// Indicates whether the relationship is dashed
	Dashed bool
	// Routing of relationship
	Routing string
	// Opacity of relationship as a percentage
	Opacity *int
}

// RelationshipView defines a relationship in a view
type RelationshipView struct {
	// Path to source element consisting of <software system name>[/<container
	// name>[/<component name>]]
	Source *string
	// Path to destination element, see SourcePath for details.
	Destination *string
}

// System is the payload type of the DSLEditor service UpsertSystem method.
type System struct {
	// Path to file containing system DSL
	Locator *types.FileLocator
	// Name of software system
	Name string
	// Description of system
	Description *string
	// Attached tags
	Tags []string
	// Documentation URL
	URL *string
	// Indicates whether the system is in-house (Internal) or hosted by a third
	// party (External)
	Location string
	// Set of arbitrary name-value properties (shown in diagram tooltips)
	Properties map[string]string
}

// SystemContextView is the payload type of the DSLEditor service
// UpsertSystemContextView method.
type SystemContextView struct {
	// Name of software system to create view for
	SoftwareSystemName string
	// Indicates whether the enterprise boundary is visible on the resulting diagram
	EnterpriseBoundaryVisible bool
	// Path to file containing view DSL
	Locator *types.FileLocator
	// Key of view
	Key string
	// Title of view
	Title string
	// Description of view
	Description *string
	// Paper size of view
	PaperSize *string
	// Elements in view
	ElementViews []*ElementView
	// Relationships in view
	RelationshipViews []*RelationshipView
}

// MakeCompilationFailed builds a goa.ServiceError from an error.
func MakeCompilationFailed(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "compilation_failed", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "NotFound", false, false, false)
}
