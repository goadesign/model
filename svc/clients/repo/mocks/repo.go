// Code generated by Clue Mock Generator v0.18.2, DO NOT EDIT.
//
// Command:
// $ cmg gen goa.design/model/svc/clients/repo

package mockrepo

import (
	"context"
	"testing"

	"goa.design/clue/mock"

	"goa.design/model/svc/clients/repo"
	"goa.design/model/svc/gen/types"
)

type (
	RepoHandler struct {
		m *mock.Mock
		t *testing.T
	}

	RepoHandlerListPackagesFunc  func(p0 context.Context, p1 string) ([]*types.Package, error)
	RepoHandlerReadPackageFunc   func(p0 context.Context, p1 *types.PackageLocator) ([]*types.PackageFile, error)
	RepoHandlerCreatePackageFunc func(p0 context.Context, p1 *types.PackageFile) error
	RepoHandlerDeletePackageFunc func(p0 context.Context, p1 *types.PackageLocator) error
	RepoHandlerGetImportPathFunc func(p0 context.Context, p1 *types.PackageLocator) (string, error)
	RepoHandlerSaveFunc          func(p0 context.Context, p1 *types.PackageFile) error
	RepoHandlerSubscribeFunc     func(p0 context.Context, p1 *types.PackageLocator) (<-chan struct{}, error)
)

func NewRepoHandler(t *testing.T) *RepoHandler {
	var (
		m                  = &RepoHandler{mock.New(), t}
		_ repo.RepoHandler = m
	)
	return m
}

func (m *RepoHandler) AddListPackages(f RepoHandlerListPackagesFunc) {
	m.m.Add("ListPackages", f)
}

func (m *RepoHandler) SetListPackages(f RepoHandlerListPackagesFunc) {
	m.m.Set("ListPackages", f)
}

func (m *RepoHandler) ListPackages(p0 context.Context, p1 string) ([]*types.Package, error) {
	if f := m.m.Next("ListPackages"); f != nil {
		return f.(RepoHandlerListPackagesFunc)(p0, p1)
	}
	m.t.Helper()
	m.t.Error("unexpected ListPackages call")
	return nil, nil
}

func (m *RepoHandler) AddReadPackage(f RepoHandlerReadPackageFunc) {
	m.m.Add("ReadPackage", f)
}

func (m *RepoHandler) SetReadPackage(f RepoHandlerReadPackageFunc) {
	m.m.Set("ReadPackage", f)
}

func (m *RepoHandler) ReadPackage(p0 context.Context, p1 *types.PackageLocator) ([]*types.PackageFile, error) {
	if f := m.m.Next("ReadPackage"); f != nil {
		return f.(RepoHandlerReadPackageFunc)(p0, p1)
	}
	m.t.Helper()
	m.t.Error("unexpected ReadPackage call")
	return nil, nil
}

func (m *RepoHandler) AddCreatePackage(f RepoHandlerCreatePackageFunc) {
	m.m.Add("CreatePackage", f)
}

func (m *RepoHandler) SetCreatePackage(f RepoHandlerCreatePackageFunc) {
	m.m.Set("CreatePackage", f)
}

func (m *RepoHandler) CreatePackage(p0 context.Context, p1 *types.PackageFile) error {
	if f := m.m.Next("CreatePackage"); f != nil {
		return f.(RepoHandlerCreatePackageFunc)(p0, p1)
	}
	m.t.Helper()
	m.t.Error("unexpected CreatePackage call")
	return nil
}

func (m *RepoHandler) AddDeletePackage(f RepoHandlerDeletePackageFunc) {
	m.m.Add("DeletePackage", f)
}

func (m *RepoHandler) SetDeletePackage(f RepoHandlerDeletePackageFunc) {
	m.m.Set("DeletePackage", f)
}

func (m *RepoHandler) DeletePackage(p0 context.Context, p1 *types.PackageLocator) error {
	if f := m.m.Next("DeletePackage"); f != nil {
		return f.(RepoHandlerDeletePackageFunc)(p0, p1)
	}
	m.t.Helper()
	m.t.Error("unexpected DeletePackage call")
	return nil
}

func (m *RepoHandler) AddGetImportPath(f RepoHandlerGetImportPathFunc) {
	m.m.Add("GetImportPath", f)
}

func (m *RepoHandler) SetGetImportPath(f RepoHandlerGetImportPathFunc) {
	m.m.Set("GetImportPath", f)
}

func (m *RepoHandler) GetImportPath(p0 context.Context, p1 *types.PackageLocator) (string, error) {
	if f := m.m.Next("GetImportPath"); f != nil {
		return f.(RepoHandlerGetImportPathFunc)(p0, p1)
	}
	m.t.Helper()
	m.t.Error("unexpected GetImportPath call")
	return "", nil
}

func (m *RepoHandler) AddSave(f RepoHandlerSaveFunc) {
	m.m.Add("Save", f)
}

func (m *RepoHandler) SetSave(f RepoHandlerSaveFunc) {
	m.m.Set("Save", f)
}

func (m *RepoHandler) Save(p0 context.Context, p1 *types.PackageFile) error {
	if f := m.m.Next("Save"); f != nil {
		return f.(RepoHandlerSaveFunc)(p0, p1)
	}
	m.t.Helper()
	m.t.Error("unexpected Save call")
	return nil
}

func (m *RepoHandler) AddSubscribe(f RepoHandlerSubscribeFunc) {
	m.m.Add("Subscribe", f)
}

func (m *RepoHandler) SetSubscribe(f RepoHandlerSubscribeFunc) {
	m.m.Set("Subscribe", f)
}

func (m *RepoHandler) Subscribe(p0 context.Context, p1 *types.PackageLocator) (<-chan struct{}, error) {
	if f := m.m.Next("Subscribe"); f != nil {
		return f.(RepoHandlerSubscribeFunc)(p0, p1)
	}
	m.t.Helper()
	m.t.Error("unexpected Subscribe call")
	return nil, nil
}

func (m *RepoHandler) HasMore() bool {
	return m.m.HasMore()
}
