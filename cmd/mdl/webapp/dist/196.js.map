{"version":3,"file":"196.js","mappings":"gPASO,IAAMA,EAAmB,SAAHC,GAAmC,I,IAA9BC,EAAID,EAAJC,KAAMC,EAAQF,EAARE,SAAUC,EAAQH,EAARG,SACMC,G,GAAnBC,EAAAA,EAAAA,UAAc,M,EAAK,E,o4BAAhDC,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAC1BI,GAAMC,EAAAA,EAAAA,QAAuB,MA0DnC,OAvDAC,EAAAA,EAAAA,WAAU,WACT,GAAKF,EAAIG,QAAT,CAGAH,EAAIG,QAAQC,UAAY,GAGxB,IAAMC,GAAIC,EAAAA,EAAAA,IAAWb,EAAM,SAACc,GAAc,OAAKb,EAASa,EAAIA,EAAEC,GAAK,KAAK,EAAEb,GAC1EK,EAAIG,QAAQM,OAAOJ,EAAEK,KACrBX,EAAcM,IAITM,EAAAA,EAAAA,IAAiBlB,EAAKe,KAAQf,EAAKmB,qBACvCnB,EAAKoB,YAIN,IAAMC,EAAqB,WACtBrB,SAAAA,EAAMe,KACTO,EAAAA,EAAAA,IAActB,EAAKe,GAErB,EAIA,OAFAQ,OAAOC,iBAAiB,eAAgBH,GAEjC,WAEFrB,SAAAA,EAAMe,KACTO,EAAAA,EAAAA,IAActB,EAAKe,IAGpBQ,OAAOE,oBAAoB,eAAgBJ,GAEvCd,EAAIG,UACPH,EAAIG,QAAQC,UAAY,GAE1B,CApCwB,CAqCzB,EAAG,CAACX,EAAMC,KAGVQ,EAAAA,EAAAA,WAAU,WACT,GAAIJ,SAAAA,EAAYY,IAAK,CAEpB,IAAMA,EAAMZ,EAAWY,IACjBS,EAAmBT,EAAYU,2BACjCD,GACHA,KAIDE,EAAAA,EAAAA,IAAqBX,EAAKf,EAC3B,CACD,EAAG,CAACA,EAAUG,IAEPwB,EAAAA,cAAA,OAAKC,UAAU,QAAQvB,IAAKA,GACpC,C","sources":["webpack://app/./src/graph-view/graph-react.tsx"],"sourcesContent":["import React, {FC, useEffect, useRef, useState} from \"react\";\nimport {buildGraph, GraphData, Node, addCursorInteraction, restoreViewState, saveViewState} from \"./graph\";\n\ninterface Props {\n\tdata: GraphData;\n\tonSelect: (nodeName: string | null) => void;\n\tdragMode: 'pan' | 'select';\n}\n\nexport const Graph: FC<Props> = ({data, onSelect, dragMode}) => {\n\tconst [graphState, setGraphState] = useState<any>(null);\n\tconst ref = useRef<HTMLDivElement>(null);\n\n\t// Single effect for building the graph and handling all setup/cleanup\n\tuseEffect(() => {\n\t\tif (!ref.current) return;\n\n\t\t// Clear previous content\n\t\tref.current.innerHTML = '';\n\n\t\t// Build graph with current props\n\t\tconst g = buildGraph(data, (n: Node | null) => onSelect(n ? n.id : null), dragMode);\n\t\tref.current.append(g.svg);\n\t\tsetGraphState(g);\n\t\t\n\t\t// Try to restore previous view state, otherwise use auto fit\n\t\t// Skip auto fit if we're in the middle of a reset operation to prevent infinite loop\n\t\tif (!restoreViewState(data.id) && !data.shouldSkipAutoFit()) {\n\t\t\tdata.fitToView();\n\t\t}\n\n\t\t// Save view state before page unload\n\t\tconst handleBeforeUnload = () => {\n\t\t\tif (data?.id) {\n\t\t\t\tsaveViewState(data.id);\n\t\t\t}\n\t\t};\n\t\t\n\t\twindow.addEventListener('beforeunload', handleBeforeUnload);\n\n\t\treturn () => {\n\t\t\t// Save view state before cleanup\n\t\t\tif (data?.id) {\n\t\t\t\tsaveViewState(data.id);\n\t\t\t}\n\t\t\t\n\t\t\twindow.removeEventListener('beforeunload', handleBeforeUnload);\n\t\t\t\n\t\t\tif (ref.current) {\n\t\t\t\tref.current.innerHTML = '';\n\t\t\t}\n\t\t};\n\t}, [data, onSelect]);\n\n\t// Effect for updating drag mode on existing graph\n\tuseEffect(() => {\n\t\tif (graphState?.svg) {\n\t\t\t// Clean up existing cursor interaction\n\t\t\tconst svg = graphState.svg;\n\t\t\tconst existingCleanup = (svg as any).__cursorInteractionCleanup;\n\t\t\tif (existingCleanup) {\n\t\t\t\texistingCleanup();\n\t\t\t}\n\t\t\t\n\t\t\t// Set up cursor interaction with current drag mode\n\t\t\taddCursorInteraction(svg, dragMode);\n\t\t}\n\t}, [dragMode, graphState]);\n\n\treturn <div className=\"graph\" ref={ref}/>;\n}"],"names":["Graph","_ref","data","onSelect","dragMode","_useState2","useState","graphState","setGraphState","ref","useRef","useEffect","current","innerHTML","g","buildGraph","n","id","append","svg","restoreViewState","shouldSkipAutoFit","fitToView","handleBeforeUnload","saveViewState","window","addEventListener","removeEventListener","existingCleanup","__cursorInteractionCleanup","addCursorInteraction","React","className"],"sourceRoot":""}