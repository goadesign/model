// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Module client HTTP transport
//
// Command:
// $ goa gen goa.design/model/mdl/service/design -o mdl/service

package client

import (
	"context"
	"net/http"
	"time"

	"github.com/gorilla/websocket"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	module "goa.design/model/mdl/service/gen/module"
)

// Client lists the Module service endpoint HTTP clients.
type Client struct {
	// ListModules Doer is the HTTP client used to make requests to the ListModules
	// endpoint.
	ListModulesDoer goahttp.Doer

	// Subscribe Doer is the HTTP client used to make requests to the Subscribe
	// endpoint.
	SubscribeDoer goahttp.Doer

	// GetModel Doer is the HTTP client used to make requests to the GetModel
	// endpoint.
	GetModelDoer goahttp.Doer

	// Compile Doer is the HTTP client used to make requests to the Compile
	// endpoint.
	CompileDoer goahttp.Doer

	// GetLayout Doer is the HTTP client used to make requests to the GetLayout
	// endpoint.
	GetLayoutDoer goahttp.Doer

	// WriteDiagram Doer is the HTTP client used to make requests to the
	// WriteDiagram endpoint.
	WriteDiagramDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme     string
	host       string
	encoder    func(*http.Request) goahttp.Encoder
	decoder    func(*http.Response) goahttp.Decoder
	dialer     goahttp.Dialer
	configurer *ConnConfigurer
}

// NewClient instantiates HTTP clients for all the Module service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
	dialer goahttp.Dialer,
	cfn *ConnConfigurer,
) *Client {
	if cfn == nil {
		cfn = &ConnConfigurer{}
	}
	return &Client{
		ListModulesDoer:     doer,
		SubscribeDoer:       doer,
		GetModelDoer:        doer,
		CompileDoer:         doer,
		GetLayoutDoer:       doer,
		WriteDiagramDoer:    doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
		dialer:              dialer,
		configurer:          cfn,
	}
}

// ListModules returns an endpoint that makes HTTP requests to the Module
// service ListModules server.
func (c *Client) ListModules() goa.Endpoint {
	var (
		decodeResponse = DecodeListModulesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListModulesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListModulesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Module", "ListModules", err)
		}
		return decodeResponse(resp)
	}
}

// Subscribe returns an endpoint that makes HTTP requests to the Module service
// Subscribe server.
func (c *Client) Subscribe() goa.Endpoint {
	var (
		encodeRequest  = EncodeSubscribeRequest(c.encoder)
		decodeResponse = DecodeSubscribeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSubscribeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("Module", "Subscribe", err)
		}
		if c.configurer.SubscribeFn != nil {
			var cancel context.CancelFunc
			ctx, cancel = context.WithCancel(ctx)
			conn = c.configurer.SubscribeFn(conn, cancel)
		}
		go func() {
			<-ctx.Done()
			conn.WriteControl(
				websocket.CloseMessage,
				websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing connection"),
				time.Now().Add(time.Second),
			)
			conn.Close()
		}()
		stream := &SubscribeClientStream{conn: conn}
		return stream, nil
	}
}

// GetModel returns an endpoint that makes HTTP requests to the Module service
// GetModel server.
func (c *Client) GetModel() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetModelRequest(c.encoder)
		decodeResponse = DecodeGetModelResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetModelRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetModelDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Module", "GetModel", err)
		}
		_, err = decodeResponse(resp)
		if err != nil {
			resp.Body.Close()
			return nil, err
		}
		return &module.GetModelResponseData{Body: resp.Body}, nil
	}
}

// Compile returns an endpoint that makes HTTP requests to the Module service
// Compile server.
func (c *Client) Compile() goa.Endpoint {
	var (
		encodeRequest  = EncodeCompileRequest(c.encoder)
		decodeResponse = DecodeCompileResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCompileRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CompileDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Module", "Compile", err)
		}
		return decodeResponse(resp)
	}
}

// GetLayout returns an endpoint that makes HTTP requests to the Module service
// GetLayout server.
func (c *Client) GetLayout() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetLayoutRequest(c.encoder)
		decodeResponse = DecodeGetLayoutResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetLayoutRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetLayoutDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Module", "GetLayout", err)
		}
		_, err = decodeResponse(resp)
		if err != nil {
			resp.Body.Close()
			return nil, err
		}
		return &module.GetLayoutResponseData{Body: resp.Body}, nil
	}
}

// WriteDiagram returns an endpoint that makes HTTP requests to the Module
// service WriteDiagram server.
func (c *Client) WriteDiagram() goa.Endpoint {
	var (
		encodeRequest  = EncodeWriteDiagramRequest(c.encoder)
		decodeResponse = DecodeWriteDiagramResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildWriteDiagramRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.WriteDiagramDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Module", "WriteDiagram", err)
		}
		return decodeResponse(resp)
	}
}
