// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Editor HTTP server encoders and decoders
//
// Command:
// $ goa gen goa.design/model/mdl/service/design -o mdl/service

package server

import (
	"context"
	"errors"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeUpsertSystemResponse returns an encoder for responses returned by the
// Editor UpsertSystem endpoint.
func EncodeUpsertSystemResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeUpsertSystemRequest returns a decoder for requests sent to the Editor
// UpsertSystem endpoint.
func DecodeUpsertSystemRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpsertSystemRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpsertSystemRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			goMod string
		)
		goMod = r.URL.Query().Get("mod")
		if goMod == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("GoMod", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("GoMod", goMod, "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\\-]+/(/([a-zA-Z0-9_\\-]+))*$"))
		if err != nil {
			return nil, err
		}
		payload := NewUpsertSystemSystem(&body, goMod)

		return payload, nil
	}
}

// EncodeUpsertPersonResponse returns an encoder for responses returned by the
// Editor UpsertPerson endpoint.
func EncodeUpsertPersonResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeUpsertPersonRequest returns a decoder for requests sent to the Editor
// UpsertPerson endpoint.
func DecodeUpsertPersonRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpsertPersonRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpsertPersonRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			goMod string
		)
		goMod = r.URL.Query().Get("mod")
		if goMod == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("GoMod", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("GoMod", goMod, "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\\-]+/(/([a-zA-Z0-9_\\-]+))*$"))
		if err != nil {
			return nil, err
		}
		payload := NewUpsertPersonPerson(&body, goMod)

		return payload, nil
	}
}

// EncodeUpsertContainerResponse returns an encoder for responses returned by
// the Editor UpsertContainer endpoint.
func EncodeUpsertContainerResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeUpsertContainerRequest returns a decoder for requests sent to the
// Editor UpsertContainer endpoint.
func DecodeUpsertContainerRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpsertContainerRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpsertContainerRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			goMod string
		)
		goMod = r.URL.Query().Get("mod")
		if goMod == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("GoMod", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("GoMod", goMod, "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\\-]+/(/([a-zA-Z0-9_\\-]+))*$"))
		if err != nil {
			return nil, err
		}
		payload := NewUpsertContainerContainer(&body, goMod)

		return payload, nil
	}
}

// EncodeUpsertComponentResponse returns an encoder for responses returned by
// the Editor UpsertComponent endpoint.
func EncodeUpsertComponentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeUpsertComponentRequest returns a decoder for requests sent to the
// Editor UpsertComponent endpoint.
func DecodeUpsertComponentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpsertComponentRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpsertComponentRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			goMod string
		)
		goMod = r.URL.Query().Get("mod")
		if goMod == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("GoMod", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("GoMod", goMod, "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\\-]+/(/([a-zA-Z0-9_\\-]+))*$"))
		if err != nil {
			return nil, err
		}
		payload := NewUpsertComponentComponent(&body, goMod)

		return payload, nil
	}
}

// EncodeUpsertRelationshipResponse returns an encoder for responses returned
// by the Editor UpsertRelationship endpoint.
func EncodeUpsertRelationshipResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeUpsertRelationshipRequest returns a decoder for requests sent to the
// Editor UpsertRelationship endpoint.
func DecodeUpsertRelationshipRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpsertRelationshipRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpsertRelationshipRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			goMod string
		)
		goMod = r.URL.Query().Get("mod")
		if goMod == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("GoMod", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("GoMod", goMod, "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\\-]+/(/([a-zA-Z0-9_\\-]+))*$"))
		if err != nil {
			return nil, err
		}
		payload := NewUpsertRelationshipRelationship(&body, goMod)

		return payload, nil
	}
}

// EncodeDeleteSystemResponse returns an encoder for responses returned by the
// Editor DeleteSystem endpoint.
func EncodeDeleteSystemResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteSystemRequest returns a decoder for requests sent to the Editor
// DeleteSystem endpoint.
func DecodeDeleteSystemRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			name  string
			goMod string
			err   error

			params = mux.Vars(r)
		)
		name = params["Name"]
		goMod = r.URL.Query().Get("mod")
		if goMod == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("GoMod", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("GoMod", goMod, "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\\-]+/(/([a-zA-Z0-9_\\-]+))*$"))
		if err != nil {
			return nil, err
		}
		payload := NewDeleteSystemPayload(name, goMod)

		return payload, nil
	}
}

// EncodeDeleteSystemError returns an encoder for errors returned by the
// DeleteSystem Editor endpoint.
func EncodeDeleteSystemError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteSystemNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeletePersonResponse returns an encoder for responses returned by the
// Editor DeletePerson endpoint.
func EncodeDeletePersonResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeletePersonRequest returns a decoder for requests sent to the Editor
// DeletePerson endpoint.
func DecodeDeletePersonRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			name  string
			goMod string
			err   error

			params = mux.Vars(r)
		)
		name = params["Name"]
		goMod = r.URL.Query().Get("mod")
		if goMod == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("GoMod", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("GoMod", goMod, "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\\-]+/(/([a-zA-Z0-9_\\-]+))*$"))
		if err != nil {
			return nil, err
		}
		payload := NewDeletePersonPayload(name, goMod)

		return payload, nil
	}
}

// EncodeDeletePersonError returns an encoder for errors returned by the
// DeletePerson Editor endpoint.
func EncodeDeletePersonError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeletePersonNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteContainerResponse returns an encoder for responses returned by
// the Editor DeleteContainer endpoint.
func EncodeDeleteContainerResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteContainerRequest returns a decoder for requests sent to the
// Editor DeleteContainer endpoint.
func DecodeDeleteContainerRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			systemName string
			name       string
			goMod      string
			err        error

			params = mux.Vars(r)
		)
		systemName = params["SystemName"]
		name = params["Name"]
		goMod = r.URL.Query().Get("mod")
		if goMod == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("GoMod", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("GoMod", goMod, "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\\-]+/(/([a-zA-Z0-9_\\-]+))*$"))
		if err != nil {
			return nil, err
		}
		payload := NewDeleteContainerPayload(systemName, name, goMod)

		return payload, nil
	}
}

// EncodeDeleteContainerError returns an encoder for errors returned by the
// DeleteContainer Editor endpoint.
func EncodeDeleteContainerError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteContainerNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteComponentResponse returns an encoder for responses returned by
// the Editor DeleteComponent endpoint.
func EncodeDeleteComponentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteComponentRequest returns a decoder for requests sent to the
// Editor DeleteComponent endpoint.
func DecodeDeleteComponentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			systemName    string
			containerName string
			name          string
			goMod         string
			err           error

			params = mux.Vars(r)
		)
		systemName = params["SystemName"]
		containerName = params["ContainerName"]
		name = params["Name"]
		goMod = r.URL.Query().Get("mod")
		if goMod == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("GoMod", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("GoMod", goMod, "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\\-]+/(/([a-zA-Z0-9_\\-]+))*$"))
		if err != nil {
			return nil, err
		}
		payload := NewDeleteComponentPayload(systemName, containerName, name, goMod)

		return payload, nil
	}
}

// EncodeDeleteComponentError returns an encoder for errors returned by the
// DeleteComponent Editor endpoint.
func EncodeDeleteComponentError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteComponentNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteRelationshipResponse returns an encoder for responses returned
// by the Editor DeleteRelationship endpoint.
func EncodeDeleteRelationshipResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteRelationshipRequest returns a decoder for requests sent to the
// Editor DeleteRelationship endpoint.
func DecodeDeleteRelationshipRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			sourcePath      string
			destinationPath string
			goMod           string
			err             error

			params = mux.Vars(r)
		)
		sourcePath = params["SourcePath"]
		destinationPath = params["DestinationPath"]
		goMod = r.URL.Query().Get("mod")
		if goMod == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("GoMod", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("GoMod", goMod, "^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}/[a-zA-Z0-9_\\-]+/(/([a-zA-Z0-9_\\-]+))*$"))
		if err != nil {
			return nil, err
		}
		payload := NewDeleteRelationshipPayload(sourcePath, destinationPath, goMod)

		return payload, nil
	}
}

// EncodeDeleteRelationshipError returns an encoder for errors returned by the
// DeleteRelationship Editor endpoint.
func EncodeDeleteRelationshipError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteRelationshipNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}
