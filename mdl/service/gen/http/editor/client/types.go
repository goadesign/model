// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Editor HTTP client types
//
// Command:
// $ goa gen goa.design/model/mdl/service/design -o mdl/service

package client

import (
	goa "goa.design/goa/v3/pkg"
	editor "goa.design/model/mdl/service/gen/editor"
)

// UpsertSystemRequestBody is the type of the "Editor" service "UpsertSystem"
// endpoint HTTP request body.
type UpsertSystemRequestBody struct {
	// Name of software system
	Name string `form:"Name" json:"Name" xml:"Name"`
	// Description of system
	Description *string `form:"Description,omitempty" json:"Description,omitempty" xml:"Description,omitempty"`
	// Attached tags
	Tags []string `form:"Tags,omitempty" json:"Tags,omitempty" xml:"Tags,omitempty"`
	// Documentation URL
	URL *string `form:"URL,omitempty" json:"URL,omitempty" xml:"URL,omitempty"`
	// Indicates whether the system is in-house (Internal) or hosted by a third
	// party (External)
	Location string `form:"Location" json:"Location" xml:"Location"`
	// Set of arbitrary name-value properties (shown in diagram tooltips)
	Properties map[string]string `form:"Properties,omitempty" json:"Properties,omitempty" xml:"Properties,omitempty"`
}

// UpsertPersonRequestBody is the type of the "Editor" service "UpsertPerson"
// endpoint HTTP request body.
type UpsertPersonRequestBody struct {
	// Name of person
	Name string `form:"Name" json:"Name" xml:"Name"`
	// Description of person
	Description *string `form:"Description,omitempty" json:"Description,omitempty" xml:"Description,omitempty"`
	// Attached tags
	Tags []string `form:"Tags,omitempty" json:"Tags,omitempty" xml:"Tags,omitempty"`
	// Documentation URL
	URL *string `form:"URL,omitempty" json:"URL,omitempty" xml:"URL,omitempty"`
	// Indicates whether the person is an employee (Internal) or a third party
	// (External)
	Location string `form:"Location" json:"Location" xml:"Location"`
	// Set of arbitrary name-value properties (shown in diagram tooltips)
	Properties map[string]string `form:"Properties,omitempty" json:"Properties,omitempty" xml:"Properties,omitempty"`
}

// UpsertContainerRequestBody is the type of the "Editor" service
// "UpsertContainer" endpoint HTTP request body.
type UpsertContainerRequestBody struct {
	// Name of parent software system
	SystemName string `form:"SystemName" json:"SystemName" xml:"SystemName"`
	// Name of container
	Name string `form:"Name" json:"Name" xml:"Name"`
	// Description of container
	Description *string `form:"Description,omitempty" json:"Description,omitempty" xml:"Description,omitempty"`
	// Technology used by container
	Technology *string `form:"Technology,omitempty" json:"Technology,omitempty" xml:"Technology,omitempty"`
	// Attached tags
	Tags []string `form:"Tags,omitempty" json:"Tags,omitempty" xml:"Tags,omitempty"`
	// Documentation URL
	URL *string `form:"URL,omitempty" json:"URL,omitempty" xml:"URL,omitempty"`
	// Set of arbitrary name-value properties (shown in diagram tooltips)
	Properties map[string]string `form:"Properties,omitempty" json:"Properties,omitempty" xml:"Properties,omitempty"`
}

// UpsertComponentRequestBody is the type of the "Editor" service
// "UpsertComponent" endpoint HTTP request body.
type UpsertComponentRequestBody struct {
	// Name of parent software system
	SystemName string `form:"SystemName" json:"SystemName" xml:"SystemName"`
	// Name of parent container
	ContainerName string `form:"ContainerName" json:"ContainerName" xml:"ContainerName"`
	// Name of component
	Name string `form:"Name" json:"Name" xml:"Name"`
	// Description of component
	Description *string `form:"Description,omitempty" json:"Description,omitempty" xml:"Description,omitempty"`
	// Technology used by component
	Technology *string `form:"Technology,omitempty" json:"Technology,omitempty" xml:"Technology,omitempty"`
	// Attached tags
	Tags []string `form:"Tags,omitempty" json:"Tags,omitempty" xml:"Tags,omitempty"`
	// Documentation URL
	URL *string `form:"URL,omitempty" json:"URL,omitempty" xml:"URL,omitempty"`
	// Set of arbitrary name-value properties (shown in diagram tooltips)
	Properties map[string]string `form:"Properties,omitempty" json:"Properties,omitempty" xml:"Properties,omitempty"`
}

// UpsertRelationshipRequestBody is the type of the "Editor" service
// "UpsertRelationship" endpoint HTTP request body.
type UpsertRelationshipRequestBody struct {
	// Path to source element consisting of <software system name>[/<container
	// name>[/<component name>]]
	SourcePath string `form:"SourcePath" json:"SourcePath" xml:"SourcePath"`
	// Path to destination element, see SourcePath for details.
	DestinationPath string `form:"DestinationPath" json:"DestinationPath" xml:"DestinationPath"`
	// Description of relationship
	Description *string `form:"Description,omitempty" json:"Description,omitempty" xml:"Description,omitempty"`
	// Technology used by relationship
	Technology *string `form:"Technology,omitempty" json:"Technology,omitempty" xml:"Technology,omitempty"`
	// Indicates whether the relationship is synchronous or asynchronous
	InteractionStyle string `form:"InteractionStyle" json:"InteractionStyle" xml:"InteractionStyle"`
	// Attached tags
	Tags []string `form:"Tags,omitempty" json:"Tags,omitempty" xml:"Tags,omitempty"`
	// Documentation URL
	URL *string `form:"URL,omitempty" json:"URL,omitempty" xml:"URL,omitempty"`
}

// DeleteSystemNotFoundResponseBody is the type of the "Editor" service
// "DeleteSystem" endpoint HTTP response body for the "NotFound" error.
type DeleteSystemNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeletePersonNotFoundResponseBody is the type of the "Editor" service
// "DeletePerson" endpoint HTTP response body for the "NotFound" error.
type DeletePersonNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteContainerNotFoundResponseBody is the type of the "Editor" service
// "DeleteContainer" endpoint HTTP response body for the "NotFound" error.
type DeleteContainerNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteComponentNotFoundResponseBody is the type of the "Editor" service
// "DeleteComponent" endpoint HTTP response body for the "NotFound" error.
type DeleteComponentNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteRelationshipNotFoundResponseBody is the type of the "Editor" service
// "DeleteRelationship" endpoint HTTP response body for the "NotFound" error.
type DeleteRelationshipNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewUpsertSystemRequestBody builds the HTTP request body from the payload of
// the "UpsertSystem" endpoint of the "Editor" service.
func NewUpsertSystemRequestBody(p *editor.System) *UpsertSystemRequestBody {
	body := &UpsertSystemRequestBody{
		Name:        p.Name,
		Description: p.Description,
		URL:         p.URL,
		Location:    p.Location,
	}
	if p.Tags != nil {
		body.Tags = make([]string, len(p.Tags))
		for i, val := range p.Tags {
			body.Tags[i] = val
		}
	}
	{
		var zero string
		if body.Location == zero {
			body.Location = "Internal"
		}
	}
	if p.Properties != nil {
		body.Properties = make(map[string]string, len(p.Properties))
		for key, val := range p.Properties {
			tk := key
			tv := val
			body.Properties[tk] = tv
		}
	}
	return body
}

// NewUpsertPersonRequestBody builds the HTTP request body from the payload of
// the "UpsertPerson" endpoint of the "Editor" service.
func NewUpsertPersonRequestBody(p *editor.Person) *UpsertPersonRequestBody {
	body := &UpsertPersonRequestBody{
		Name:        p.Name,
		Description: p.Description,
		URL:         p.URL,
		Location:    p.Location,
	}
	if p.Tags != nil {
		body.Tags = make([]string, len(p.Tags))
		for i, val := range p.Tags {
			body.Tags[i] = val
		}
	}
	{
		var zero string
		if body.Location == zero {
			body.Location = "Internal"
		}
	}
	if p.Properties != nil {
		body.Properties = make(map[string]string, len(p.Properties))
		for key, val := range p.Properties {
			tk := key
			tv := val
			body.Properties[tk] = tv
		}
	}
	return body
}

// NewUpsertContainerRequestBody builds the HTTP request body from the payload
// of the "UpsertContainer" endpoint of the "Editor" service.
func NewUpsertContainerRequestBody(p *editor.Container) *UpsertContainerRequestBody {
	body := &UpsertContainerRequestBody{
		SystemName:  p.SystemName,
		Name:        p.Name,
		Description: p.Description,
		Technology:  p.Technology,
		URL:         p.URL,
	}
	if p.Tags != nil {
		body.Tags = make([]string, len(p.Tags))
		for i, val := range p.Tags {
			body.Tags[i] = val
		}
	}
	if p.Properties != nil {
		body.Properties = make(map[string]string, len(p.Properties))
		for key, val := range p.Properties {
			tk := key
			tv := val
			body.Properties[tk] = tv
		}
	}
	return body
}

// NewUpsertComponentRequestBody builds the HTTP request body from the payload
// of the "UpsertComponent" endpoint of the "Editor" service.
func NewUpsertComponentRequestBody(p *editor.Component) *UpsertComponentRequestBody {
	body := &UpsertComponentRequestBody{
		SystemName:    p.SystemName,
		ContainerName: p.ContainerName,
		Name:          p.Name,
		Description:   p.Description,
		Technology:    p.Technology,
		URL:           p.URL,
	}
	if p.Tags != nil {
		body.Tags = make([]string, len(p.Tags))
		for i, val := range p.Tags {
			body.Tags[i] = val
		}
	}
	if p.Properties != nil {
		body.Properties = make(map[string]string, len(p.Properties))
		for key, val := range p.Properties {
			tk := key
			tv := val
			body.Properties[tk] = tv
		}
	}
	return body
}

// NewUpsertRelationshipRequestBody builds the HTTP request body from the
// payload of the "UpsertRelationship" endpoint of the "Editor" service.
func NewUpsertRelationshipRequestBody(p *editor.Relationship) *UpsertRelationshipRequestBody {
	body := &UpsertRelationshipRequestBody{
		SourcePath:       p.SourcePath,
		DestinationPath:  p.DestinationPath,
		Description:      p.Description,
		Technology:       p.Technology,
		InteractionStyle: p.InteractionStyle,
		URL:              p.URL,
	}
	{
		var zero string
		if body.InteractionStyle == zero {
			body.InteractionStyle = "Synchronous"
		}
	}
	if p.Tags != nil {
		body.Tags = make([]string, len(p.Tags))
		for i, val := range p.Tags {
			body.Tags[i] = val
		}
	}
	return body
}

// NewDeleteSystemNotFound builds a Editor service DeleteSystem endpoint
// NotFound error.
func NewDeleteSystemNotFound(body *DeleteSystemNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeletePersonNotFound builds a Editor service DeletePerson endpoint
// NotFound error.
func NewDeletePersonNotFound(body *DeletePersonNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteContainerNotFound builds a Editor service DeleteContainer endpoint
// NotFound error.
func NewDeleteContainerNotFound(body *DeleteContainerNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteComponentNotFound builds a Editor service DeleteComponent endpoint
// NotFound error.
func NewDeleteComponentNotFound(body *DeleteComponentNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteRelationshipNotFound builds a Editor service DeleteRelationship
// endpoint NotFound error.
func NewDeleteRelationshipNotFound(body *DeleteRelationshipNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateDeleteSystemNotFoundResponseBody runs the validations defined on
// DeleteSystem_NotFound_Response_Body
func ValidateDeleteSystemNotFoundResponseBody(body *DeleteSystemNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeletePersonNotFoundResponseBody runs the validations defined on
// DeletePerson_NotFound_Response_Body
func ValidateDeletePersonNotFoundResponseBody(body *DeletePersonNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteContainerNotFoundResponseBody runs the validations defined on
// DeleteContainer_NotFound_Response_Body
func ValidateDeleteContainerNotFoundResponseBody(body *DeleteContainerNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteComponentNotFoundResponseBody runs the validations defined on
// DeleteComponent_NotFound_Response_Body
func ValidateDeleteComponentNotFoundResponseBody(body *DeleteComponentNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteRelationshipNotFoundResponseBody runs the validations defined
// on DeleteRelationship_NotFound_Response_Body
func ValidateDeleteRelationshipNotFoundResponseBody(body *DeleteRelationshipNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
