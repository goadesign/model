// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Module endpoints
//
// Command:
// $ goa gen goa.design/model/mdl/service/design -o mdl/service

package module

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "Module" service endpoints.
type Endpoints struct {
	ListModules  goa.Endpoint
	Subscribe    goa.Endpoint
	GetModel     goa.Endpoint
	Compile      goa.Endpoint
	GetLayout    goa.Endpoint
	WriteDiagram goa.Endpoint
}

// SubscribeEndpointInput holds both the payload and the server stream of the
// "Subscribe" method.
type SubscribeEndpointInput struct {
	// Payload is the method payload.
	Payload *Module
	// Stream is the server stream used by the "Subscribe" method to send data.
	Stream SubscribeServerStream
}

// GetModelResponseData holds both the result and the HTTP response body reader
// of the "GetModel" method.
type GetModelResponseData struct {
	// Body streams the HTTP response body.
	Body io.ReadCloser
}

// CompileRequestData holds both the payload and the HTTP request body reader
// of the "Compile" method.
type CompileRequestData struct {
	// Payload is the method payload.
	Payload *Module
	// Body streams the HTTP request body.
	Body io.ReadCloser
}

// GetLayoutResponseData holds both the result and the HTTP response body
// reader of the "GetLayout" method.
type GetLayoutResponseData struct {
	// Body streams the HTTP response body.
	Body io.ReadCloser
}

// WriteDiagramRequestData holds both the payload and the HTTP request body
// reader of the "WriteDiagram" method.
type WriteDiagramRequestData struct {
	// Payload is the method payload.
	Payload *Module
	// Body streams the HTTP request body.
	Body io.ReadCloser
}

// NewEndpoints wraps the methods of the "Module" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		ListModules:  NewListModulesEndpoint(s),
		Subscribe:    NewSubscribeEndpoint(s),
		GetModel:     NewGetModelEndpoint(s),
		Compile:      NewCompileEndpoint(s),
		GetLayout:    NewGetLayoutEndpoint(s),
		WriteDiagram: NewWriteDiagramEndpoint(s),
	}
}

// Use applies the given middleware to all the "Module" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListModules = m(e.ListModules)
	e.Subscribe = m(e.Subscribe)
	e.GetModel = m(e.GetModel)
	e.Compile = m(e.Compile)
	e.GetLayout = m(e.GetLayout)
	e.WriteDiagram = m(e.WriteDiagram)
}

// NewListModulesEndpoint returns an endpoint function that calls the method
// "ListModules" of service "Module".
func NewListModulesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.ListModules(ctx)
	}
}

// NewSubscribeEndpoint returns an endpoint function that calls the method
// "Subscribe" of service "Module".
func NewSubscribeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*SubscribeEndpointInput)
		return nil, s.Subscribe(ctx, ep.Payload, ep.Stream)
	}
}

// NewGetModelEndpoint returns an endpoint function that calls the method
// "GetModel" of service "Module".
func NewGetModelEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*Module)
		body, err := s.GetModel(ctx, p)
		if err != nil {
			return nil, err
		}
		return &GetModelResponseData{Body: body}, nil
	}
}

// NewCompileEndpoint returns an endpoint function that calls the method
// "Compile" of service "Module".
func NewCompileEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*CompileRequestData)
		return s.Compile(ctx, ep.Payload, ep.Body)
	}
}

// NewGetLayoutEndpoint returns an endpoint function that calls the method
// "GetLayout" of service "Module".
func NewGetLayoutEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*Module)
		body, err := s.GetLayout(ctx, p)
		if err != nil {
			return nil, err
		}
		return &GetLayoutResponseData{Body: body}, nil
	}
}

// NewWriteDiagramEndpoint returns an endpoint function that calls the method
// "WriteDiagram" of service "Module".
func NewWriteDiagramEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*WriteDiagramRequestData)
		return nil, s.WriteDiagram(ctx, ep.Payload, ep.Body)
	}
}
