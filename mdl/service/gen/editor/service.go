// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Editor service
//
// Command:
// $ goa gen goa.design/model/mdl/service/design -o mdl/service

package editor

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Service is the Editor service interface.
type Service interface {
	// Create or update a software system in the model
	UpsertSystem(context.Context, *System) (err error)
	// Create or update a person in the model
	UpsertPerson(context.Context, *Person) (err error)
	// Create or update a container in the model
	UpsertContainer(context.Context, *Container) (err error)
	// Create or update a component in the model
	UpsertComponent(context.Context, *Component) (err error)
	// Create or update a relationship in the model
	UpsertRelationship(context.Context, *Relationship) (err error)
	// Delete an existing software system from the model
	DeleteSystem(context.Context, *DeleteSystemPayload) (err error)
	// Delete an existing person from the model
	DeletePerson(context.Context, *DeletePersonPayload) (err error)
	// Delete an existing container from the model
	DeleteContainer(context.Context, *DeleteContainerPayload) (err error)
	// Delete an existing component from the model
	DeleteComponent(context.Context, *DeleteComponentPayload) (err error)
	// Delete an existing relationship from the model
	DeleteRelationship(context.Context, *DeleteRelationshipPayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Editor"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [10]string{"UpsertSystem", "UpsertPerson", "UpsertContainer", "UpsertComponent", "UpsertRelationship", "DeleteSystem", "DeletePerson", "DeleteContainer", "DeleteComponent", "DeleteRelationship"}

// Component is the payload type of the Editor service UpsertComponent method.
type Component struct {
	// Name of parent software system
	SystemName string
	// Name of parent container
	ContainerName string
	// Name of component
	Name string
	// Description of component
	Description *string
	// Technology used by component
	Technology *string
	// Attached tags
	Tags []string
	// Documentation URL
	URL *string
	// Set of arbitrary name-value properties (shown in diagram tooltips)
	Properties map[string]string
	// Design Go module
	GoMod string
}

// Container is the payload type of the Editor service UpsertContainer method.
type Container struct {
	// Name of parent software system
	SystemName string
	// Name of container
	Name string
	// Description of container
	Description *string
	// Technology used by container
	Technology *string
	// Attached tags
	Tags []string
	// Documentation URL
	URL *string
	// Set of arbitrary name-value properties (shown in diagram tooltips)
	Properties map[string]string
	// Design Go module
	GoMod string
}

// DeleteComponentPayload is the payload type of the Editor service
// DeleteComponent method.
type DeleteComponentPayload struct {
	// Name of component software system
	SystemName string
	// Name of component software system
	ContainerName string
	// Name of component to delete
	Name string
	// Design Go module
	GoMod string
}

// DeleteContainerPayload is the payload type of the Editor service
// DeleteContainer method.
type DeleteContainerPayload struct {
	// Name of container software system
	SystemName string
	// Name of container to delete
	Name string
	// Design Go module
	GoMod string
}

// DeletePersonPayload is the payload type of the Editor service DeletePerson
// method.
type DeletePersonPayload struct {
	// Name of person to delete
	Name string
	// Design Go module
	GoMod string
}

// DeleteRelationshipPayload is the payload type of the Editor service
// DeleteRelationship method.
type DeleteRelationshipPayload struct {
	// Path to source element consisting of <software system name>[/<container
	// name>[/<component name>]]
	SourcePath string
	// Path to destination element, see SourcePath for details.
	DestinationPath string
	// Design Go module
	GoMod string
}

// DeleteSystemPayload is the payload type of the Editor service DeleteSystem
// method.
type DeleteSystemPayload struct {
	// Name of software system to delete
	Name string
	// Design Go module
	GoMod string
}

// Person is the payload type of the Editor service UpsertPerson method.
type Person struct {
	// Name of person
	Name string
	// Description of person
	Description *string
	// Attached tags
	Tags []string
	// Documentation URL
	URL *string
	// Indicates whether the person is an employee (Internal) or a third party
	// (External)
	Location string
	// Set of arbitrary name-value properties (shown in diagram tooltips)
	Properties map[string]string
	// Design Go module
	GoMod string
}

// Relationship is the payload type of the Editor service UpsertRelationship
// method.
type Relationship struct {
	// Path to source element consisting of <software system name>[/<container
	// name>[/<component name>]]
	SourcePath string
	// Path to destination element, see SourcePath for details.
	DestinationPath string
	// Description of relationship
	Description *string
	// Technology used by relationship
	Technology *string
	// Indicates whether the relationship is synchronous or asynchronous
	InteractionStyle string
	// Attached tags
	Tags []string
	// Documentation URL
	URL *string
	// Design Go module
	GoMod string
}

// System is the payload type of the Editor service UpsertSystem method.
type System struct {
	// Name of software system
	Name string
	// Description of system
	Description *string
	// Attached tags
	Tags []string
	// Documentation URL
	URL *string
	// Indicates whether the system is in-house (Internal) or hosted by a third
	// party (External)
	Location string
	// Set of arbitrary name-value properties (shown in diagram tooltips)
	Properties map[string]string
	// Design Go module
	GoMod string
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "NotFound", false, false, false)
}
